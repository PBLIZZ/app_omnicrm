

/* ===== src/app/(authorisedRoute)/analytics/AnalyticsSidebar.tsx ===== */

"use client";

import {
  BarChart,
  TrendingUp,
  Users,
  Eye,
  MousePointer,
  Clock,
  Globe,
  Mail,
  Calendar,
  LinkIcon,
  Code,
  Settings,
  Download,
  Filter,
  RefreshCw,
  Activity,
} from "lucide-react";
import Link from "next/link";
import { usePathname } from "next/navigation";
import { Badge } from "@/components/ui";
import {
  SidebarContent,
  SidebarGroup,
  SidebarGroupLabel,
  SidebarMenu,
  SidebarMenuButton,
  SidebarMenuItem,
} from "@/components/ui/sidebar";

// Mock data for analytics metrics
const quickMetrics = [
  { label: "Website Visitors", value: "2,847", change: "+12%", icon: Eye },
  { label: "New Clients", value: "23", change: "+8%", icon: Users },
  { label: "Conversion Rate", value: "3.4%", change: "+0.2%", icon: TrendingUp },
  { label: "Avg Session Time", value: "4:32", change: "+15%", icon: Clock },
];

const integrationStatus = [
  { name: "Google Analytics 4", status: "Connected", color: "green" },
  { name: "Google Tag Manager", status: "Connected", color: "green" },
  { name: "Facebook Pixel", status: "Pending", color: "yellow" },
  { name: "Google Ads", status: "Not Connected", color: "gray" },
];

export function AnalyticsSidebar(): JSX.Element {
  const pathname = usePathname();

  return (
    <SidebarContent>
      {/* Analytics Overview */}
      <SidebarGroup>
        <SidebarGroupLabel>Analytics</SidebarGroupLabel>
        <SidebarMenu>
          <SidebarMenuItem>
            <SidebarMenuButton asChild isActive={pathname === "/analytics"}>
              <Link href={{ pathname: "/analytics" }} className="flex items-center w-full">
                <BarChart className="w-4 h-4 mr-3" />
                <span>Dashboard</span>
              </Link>
            </SidebarMenuButton>
          </SidebarMenuItem>
          <SidebarMenuItem>
            <SidebarMenuButton asChild>
              <Link href={{ pathname: "/analytics/website" }} className="flex items-center w-full">
                <Globe className="w-4 h-4 mr-3" />
                <span>Website Analytics</span>
              </Link>
            </SidebarMenuButton>
          </SidebarMenuItem>
          <SidebarMenuItem>
            <SidebarMenuButton asChild>
              <Link
                href={{ pathname: "/analytics/marketing" }}
                className="flex items-center w-full"
              >
                <TrendingUp className="w-4 h-4 mr-3" />
                <span>Marketing Performance</span>
              </Link>
            </SidebarMenuButton>
          </SidebarMenuItem>
          <SidebarMenuItem>
            <SidebarMenuButton asChild>
              <Link href={{ pathname: "/analytics/clients" }} className="flex items-center w-full">
                <Users className="w-4 h-4 mr-3" />
                <span>Client Analytics</span>
              </Link>
            </SidebarMenuButton>
          </SidebarMenuItem>
          <SidebarMenuItem>
            <SidebarMenuButton asChild>
              <Link
                href={{ pathname: "/analytics/appointments" }}
                className="flex items-center w-full"
              >
                <Calendar className="w-4 h-4 mr-3" />
                <span>Appointment Metrics</span>
              </Link>
            </SidebarMenuButton>
          </SidebarMenuItem>
        </SidebarMenu>
      </SidebarGroup>

      {/* Quick Metrics */}
      <SidebarGroup>
        <SidebarGroupLabel>This Month</SidebarGroupLabel>
        <SidebarMenu>
          {quickMetrics.map((metric, index) => (
            <SidebarMenuItem key={index}>
              <SidebarMenuButton asChild className="h-auto p-2">
                <Link
                  href={{ pathname: "/analytics/detailed" }}
                  className="flex items-center w-full"
                >
                  <div className="flex items-center gap-2 w-full">
                    <metric.icon className="w-4 h-4 flex-shrink-0" />
                    <div className="flex-1 min-w-0 group-data-[collapsible=icon]:hidden">
                      <div className="flex items-center justify-between">
                        <span className="text-sm font-medium">{metric.value}</span>
                        <Badge
                          variant={metric.change.startsWith("+") ? "default" : "secondary"}
                          className="h-4 text-xs"
                        >
                          {metric.change}
                        </Badge>
                      </div>
                      <p className="text-xs text-muted-foreground truncate">{metric.label}</p>
                    </div>
                  </div>
                </Link>
              </SidebarMenuButton>
            </SidebarMenuItem>
          ))}
        </SidebarMenu>
      </SidebarGroup>

      {/* Reports & Tools */}
      <SidebarGroup>
        <SidebarGroupLabel>Reports & Tools</SidebarGroupLabel>
        <SidebarMenu>
          <SidebarMenuItem>
            <SidebarMenuButton asChild>
              <Link
                href={{ pathname: "/analytics/utm-builder" }}
                className="flex items-center w-full"
              >
                <LinkIcon className="w-4 h-4 mr-2" />
                <span>UTM Builder</span>
              </Link>
            </SidebarMenuButton>
          </SidebarMenuItem>
          <SidebarMenuItem>
            <SidebarMenuButton asChild>
              <Link
                href={{ pathname: "/analytics/tracking-codes" }}
                className="flex items-center w-full"
              >
                <Code className="w-4 h-4 mr-2" />
                <span>Tracking Codes</span>
              </Link>
            </SidebarMenuButton>
          </SidebarMenuItem>
          <SidebarMenuItem>
            <SidebarMenuButton asChild>
              <Link
                href={{ pathname: "/analytics/conversion-tracking" }}
                className="flex items-center w-full"
              >
                <MousePointer className="w-4 h-4 mr-2" />
                <span>Conversion Tracking</span>
              </Link>
            </SidebarMenuButton>
          </SidebarMenuItem>
          <SidebarMenuItem>
            <SidebarMenuButton asChild>
              <Link
                href={{ pathname: "/analytics/custom-reports" }}
                className="flex items-center w-full"
              >
                <Filter className="w-4 h-4 mr-2" />
                <span>Custom Reports</span>
              </Link>
            </SidebarMenuButton>
          </SidebarMenuItem>
          <SidebarMenuItem>
            <SidebarMenuButton asChild>
              <Link href={{ pathname: "/analytics/export" }} className="flex items-center w-full">
                <Download className="w-4 h-4 mr-2" />
                <span>Export Data</span>
              </Link>
            </SidebarMenuButton>
          </SidebarMenuItem>
        </SidebarMenu>
      </SidebarGroup>

      {/* Integration Status */}
      <SidebarGroup>
        <SidebarGroupLabel>Integrations</SidebarGroupLabel>
        <SidebarMenu>
          {integrationStatus.map((integration, index) => (
            <SidebarMenuItem key={index}>
              <SidebarMenuButton asChild className="h-auto p-2">
                <Link
                  href={{ pathname: "/analytics/integrations" }}
                  className="flex items-center w-full"
                >
                  <div className="flex items-center gap-2 w-full">
                    <div
                      className={`flex-shrink-0 w-2 h-2 rounded-full ${
                        integration.color === "green"
                          ? "bg-green-500"
                          : integration.color === "yellow"
                            ? "bg-yellow-500"
                            : "bg-gray-400"
                      }`}
                    ></div>
                    <div className="flex-1 min-w-0 group-data-[collapsible=icon]:hidden">
                      <div className="flex items-center justify-between">
                        <span className="text-sm font-medium truncate">{integration.name}</span>
                        <Badge
                          variant={integration.status === "Connected" ? "default" : "secondary"}
                          className="h-4 text-xs ml-1"
                        >
                          {integration.status === "Connected"
                            ? "✓"
                            : integration.status === "Pending"
                              ? "⏳"
                              : "○"}
                        </Badge>
                      </div>
                      <p className="text-xs text-muted-foreground">{integration.status}</p>
                    </div>
                  </div>
                </Link>
              </SidebarMenuButton>
            </SidebarMenuItem>
          ))}
        </SidebarMenu>
      </SidebarGroup>

      {/* Data Sources */}
      <SidebarGroup>
        <SidebarGroupLabel>Data Sources</SidebarGroupLabel>
        <SidebarMenu>
          <SidebarMenuItem>
            <SidebarMenuButton asChild>
              <Link
                href={{ pathname: "/analytics/google-analytics" }}
                className="flex items-center w-full"
              >
                <Activity className="w-4 h-4 mr-2" />
                <span>Google Analytics 4</span>
              </Link>
            </SidebarMenuButton>
          </SidebarMenuItem>
          <SidebarMenuItem>
            <SidebarMenuButton asChild>
              <Link
                href={{ pathname: "/analytics/google-tag-manager" }}
                className="flex items-center w-full"
              >
                <Code className="w-4 h-4 mr-2" />
                <span>Google Tag Manager</span>
              </Link>
            </SidebarMenuButton>
          </SidebarMenuItem>
          <SidebarMenuItem>
            <SidebarMenuButton asChild>
              <Link href={{ pathname: "/analytics/crm-data" }} className="flex items-center w-full">
                <Users className="w-4 h-4 mr-2" />
                <span>CRM Data</span>
              </Link>
            </SidebarMenuButton>
          </SidebarMenuItem>
          <SidebarMenuItem>
            <SidebarMenuButton asChild>
              <Link
                href={{ pathname: "/analytics/email-metrics" }}
                className="flex items-center w-full"
              >
                <Mail className="w-4 h-4 mr-2" />
                <span>Email Metrics</span>
              </Link>
            </SidebarMenuButton>
          </SidebarMenuItem>
        </SidebarMenu>
      </SidebarGroup>

      {/* Settings */}
      <SidebarGroup>
        <SidebarGroupLabel>Settings</SidebarGroupLabel>
        <SidebarMenu>
          <SidebarMenuItem>
            <SidebarMenuButton asChild>
              <Link href={{ pathname: "/analytics/sync" }} className="flex items-center w-full">
                <RefreshCw className="w-4 h-4 mr-2" />
                <span>Sync Data</span>
              </Link>
            </SidebarMenuButton>
          </SidebarMenuItem>
          <SidebarMenuItem>
            <SidebarMenuButton asChild>
              <Link href={{ pathname: "/analytics/settings" }} className="flex items-center w-full">
                <Settings className="w-4 h-4 mr-2" />
                <span>Analytics Settings</span>
              </Link>
            </SidebarMenuButton>
          </SidebarMenuItem>
        </SidebarMenu>
      </SidebarGroup>
    </SidebarContent>
  );
}


/* ===== src/app/(authorisedRoute)/analytics/page.tsx ===== */

import { AnalyticsSidebar } from "./AnalyticsSidebar";

export default function Analytics(): JSX.Element {
  return <AnalyticsSidebar />;
}


/* ===== src/app/(authorisedRoute)/layout.tsx ===== */

import type { Metadata } from "next";
import { redirect } from "next/navigation";
import { MainLayout } from "@/components/layout/MainLayout";
import { getServerUserId } from "@/server/auth/user";

export const metadata: Metadata = {
  title: "OmniCRM",
};

export default async function AuthorisedLayout({
  children,
}: {
  children: React.ReactNode;
}): Promise<JSX.Element> {
  try {
    await getServerUserId();
  } catch {
    redirect("/login");
  }

  return <MainLayout>{children}</MainLayout>;
}


/* ===== src/app/(authorisedRoute)/omni-clients/_components/ClientAIInsightsDialog.tsx ===== */

"use client";

import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import type { ClientAIInsightsDialogProps } from "./types";
import { Loader2 } from "lucide-react";

export function ClientAIInsightsDialog({
  open,
  onOpenChange,
  insights,
  isLoading,
  clientName,
}: ClientAIInsightsDialogProps): JSX.Element {
  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-[600px]">
        <DialogHeader>
          <DialogTitle>AI Insights for {clientName}</DialogTitle>
        </DialogHeader>

        {isLoading ? (
          <div className="flex items-center justify-center p-8">
            <Loader2 className="h-8 w-8 animate-spin" />
            <span className="ml-2">Generating insights...</span>
          </div>
        ) : insights ? (
          <div className="space-y-4">
            {insights.insights.wellnessGoals && insights.insights.wellnessGoals.length > 0 && (
              <div>
                <h4 className="font-medium">Wellness Goals</h4>
                <ul className="list-disc list-inside text-sm text-muted-foreground">
                  {insights.insights.wellnessGoals.map((goal, i) => (
                    <li key={i}>{goal}</li>
                  ))}
                </ul>
              </div>
            )}

            {insights.insights.nextSteps && insights.insights.nextSteps.length > 0 && (
              <div>
                <h4 className="font-medium">Next Steps</h4>
                <ul className="list-disc list-inside text-sm text-muted-foreground">
                  {insights.insights.nextSteps.map((step, i) => (
                    <li key={i}>{step}</li>
                  ))}
                </ul>
              </div>
            )}

            <div className="text-xs text-muted-foreground">
              Confidence: {Math.round(insights.confidence * 100)}%
            </div>
          </div>
        ) : null}
      </DialogContent>
    </Dialog>
  );
}


/* ===== src/app/(authorisedRoute)/omni-clients/_components/ClientEmailDialog.tsx ===== */

"use client";

import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import type { ClientEmailDialogProps } from "./types";
import { Loader2 } from "lucide-react";

export function ClientEmailDialog({
  open,
  onOpenChange,
  emailSuggestion,
  isLoading,
  clientName,
  clientEmail,
}: ClientEmailDialogProps): JSX.Element {
  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-[600px]">
        <DialogHeader>
          <DialogTitle>Email Suggestion for {clientName}</DialogTitle>
        </DialogHeader>

        {isLoading ? (
          <div className="flex items-center justify-center p-8">
            <Loader2 className="h-8 w-8 animate-spin" />
            <span className="ml-2">Generating email suggestion...</span>
          </div>
        ) : emailSuggestion ? (
          <div className="space-y-4">
            <div>
              <label className="text-sm font-medium">To:</label>
              <p className="text-sm text-muted-foreground">{clientEmail}</p>
            </div>

            <div>
              <label className="text-sm font-medium">Subject:</label>
              <p className="text-sm">{emailSuggestion.subject}</p>
            </div>

            <div>
              <label className="text-sm font-medium">Content:</label>
              <div className="bg-muted p-3 rounded-md text-sm whitespace-pre-wrap">
                {emailSuggestion.content}
              </div>
            </div>

            <div className="text-xs text-muted-foreground">Tone: {emailSuggestion.tone}</div>
          </div>
        ) : null}
      </DialogContent>
    </Dialog>
  );
}


/* ===== src/app/(authorisedRoute)/omni-clients/_components/ClientNoteSuggestionsDialog.tsx ===== */

"use client";

import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import type { ClientNoteSuggestionsDialogProps } from "./types";
import { Loader2 } from "lucide-react";

export function ClientNoteSuggestionsDialog({
  open,
  onOpenChange,
  suggestions,
  isLoading,
  clientName,
}: ClientNoteSuggestionsDialogProps): JSX.Element {
  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-[600px]">
        <DialogHeader>
          <DialogTitle>Note Suggestions for {clientName}</DialogTitle>
        </DialogHeader>

        {isLoading ? (
          <div className="flex items-center justify-center p-8">
            <Loader2 className="h-8 w-8 animate-spin" />
            <span className="ml-2">Generating note suggestions...</span>
          </div>
        ) : suggestions && suggestions.length > 0 ? (
          <div className="space-y-4 max-h-96 overflow-y-auto">
            {suggestions.map((suggestion, index) => (
              <div key={index} className="border rounded-lg p-4 space-y-2">
                <div className="flex items-center justify-between">
                  <h4 className="font-medium">{suggestion.title}</h4>
                  <div className="flex gap-2">
                    <Badge variant="outline" className="text-xs">
                      {suggestion.category}
                    </Badge>
                    <Badge
                      variant="outline"
                      className={`text-xs ${
                        suggestion.priority === "high"
                          ? "border-red-200 text-red-700"
                          : suggestion.priority === "medium"
                            ? "border-yellow-200 text-yellow-700"
                            : "border-gray-200 text-gray-700"
                      }`}
                    >
                      {suggestion.priority}
                    </Badge>
                  </div>
                </div>

                <p className="text-sm text-muted-foreground">{suggestion.content}</p>

                <Button
                  size="sm"
                  variant="outline"
                  onClick={() => {
                    // TODO: Implement create note functionality
                  }}
                >
                  Use This Note
                </Button>
              </div>
            ))}
          </div>
        ) : (
          <p className="text-center text-muted-foreground py-8">No note suggestions available</p>
        )}
      </DialogContent>
    </Dialog>
  );
}


/* ===== src/app/(authorisedRoute)/omni-clients/_components/ClientsSidebar.tsx ===== */

"use client";

import { Users, UserPlus, Heart, Brain } from "lucide-react";
import Link from "next/link";
import { useRouter, usePathname } from "next/navigation";
import {
  Badge,
  SidebarContent,
  SidebarGroup,
  SidebarGroupLabel,
  SidebarMenu,
  SidebarMenuButton,
  SidebarMenuItem,
} from "@/components/ui";

export function ClientsSidebar(): JSX.Element {
  const pathname = usePathname();
  const router = useRouter();

  // Handler for selecting "All Clients"
  const handleAllClientsSelect = (): void => {
    router.push("/omni-clients");
  };

  return (
    <SidebarContent>
      {/* OmniClients Navigation */}
      <SidebarGroup>
        <SidebarGroupLabel>OmniClients</SidebarGroupLabel>
        <SidebarMenu>
          {/* All Clients link */}
          <SidebarMenuItem>
            <SidebarMenuButton
              onClick={handleAllClientsSelect}
              isActive={pathname === "/omni-clients"}
              tooltip="All Clients"
              className="justify-between w-full"
            >
              <div className="flex items-center gap-3">
                <Users className="w-4 h-4" />
                <span>All Clients</span>
              </div>
              <Badge
                variant="outline"
                className="ml-auto bg-purple-50 border-purple-200 text-purple-700 text-xs"
              ></Badge>
            </SidebarMenuButton>
          </SidebarMenuItem>

          {/* Add Client */}
          <SidebarMenuItem>
            <SidebarMenuButton asChild>
              <Link href="/omni-clients/new" className="flex items-center w-full">
                <UserPlus className="w-4 h-4 mr-2" />
                <span className="font-medium">Add Client</span>
              </Link>
            </SidebarMenuButton>
          </SidebarMenuItem>
        </SidebarMenu>
      </SidebarGroup>

      {/* Wellness Intelligence */}
      <SidebarGroup>
        <SidebarGroupLabel>Client Intelligence</SidebarGroupLabel>
        <SidebarMenu>
          {/* Client Journey */}
          <SidebarMenuItem>
            <SidebarMenuButton asChild>
              <Link href="/omni-clients/journey" className="flex items-center w-full">
                <Heart className="w-4 h-4 mr-2" />
                <span className="font-medium">Wellness Journey</span>
              </Link>
            </SidebarMenuButton>
          </SidebarMenuItem>

          {/* AI Insights */}
          <SidebarMenuItem>
            <SidebarMenuButton asChild>
              <Link href="/omni-clients/insights" className="flex items-center w-full">
                <Brain className="w-4 h-4 mr-2" />
                <span className="font-medium">AI Insights</span>
              </Link>
            </SidebarMenuButton>
          </SidebarMenuItem>
        </SidebarMenu>
      </SidebarGroup>
    </SidebarContent>
  );
}


/* ===== src/app/(authorisedRoute)/omni-clients/_components/NoteComposerPopover.tsx ===== */

"use client";

import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { Separator } from "@/components/ui/separator";
import { Sparkles, Mic, Send } from "lucide-react";
import { toast } from "sonner";
import { post } from "@/lib/api/client";
import { Textarea } from "@/components/ui/textarea";

// Speech Recognition Types
interface SpeechRecognitionEvent {
  results: SpeechRecognitionResultList;
}

interface SpeechRecognitionResultList {
  [index: number]: SpeechRecognitionResult;
  length: number;
}

interface SpeechRecognitionResult {
  [index: number]: SpeechRecognitionAlternative;
  isFinal: boolean;
  length: number;
}

interface SpeechRecognitionAlternative {
  transcript: string;
  confidence: number;
}

interface SpeechRecognition {
  continuous: boolean;
  interimResults: boolean;
  lang: string;
  onstart: () => void;
  onresult: (event: SpeechRecognitionEvent) => void;
  onerror: (event: Event) => void;
  onend: () => void;
  start: () => void;
  stop: () => void;
}

// Extend window for speech recognition
declare global {
  interface Window {
    SpeechRecognition: {
      new (): SpeechRecognition;
    };
    webkitSpeechRecognition: {
      new (): SpeechRecognition;
    };
  }
}

interface NoteComposerPopoverProps {
  children: React.ReactNode;
  clientId: string;
  clientName: string;
}

export function NoteComposerPopover({
  children,
  clientId,
  clientName,
}: NoteComposerPopoverProps): JSX.Element {
  const [isOpen, setIsOpen] = useState(false);
  const [content, setContent] = useState("");
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [isEnhancing, setIsEnhancing] = useState(false);
  const [isRecording, setIsRecording] = useState(false);

  // Draft persistence
  const draftKey = `note-draft-${clientId}`;

  useEffect(() => {
    if (isOpen && typeof window !== "undefined") {
      const savedDraft = localStorage.getItem(draftKey);
      if (savedDraft) {
        setContent(savedDraft);
      }
      // Focus will be handled by ReactQuill internally
    }
  }, [isOpen, draftKey]);

  useEffect(() => {
    if (typeof window !== "undefined" && content) {
      localStorage.setItem(draftKey, content);
    }
  }, [content, draftKey]);

  const handleSubmit = async (): Promise<void> => {
    const plainTextContent = content.trim();

    if (!plainTextContent) {
      toast.error("Please enter a note");
      return;
    }

    setIsSubmitting(true);
    try {
      await post<{
        id: string;
        title?: string;
        content: string;
        createdAt: string;
        updatedAt: string;
      }>(`/api/omni-clients/${clientId}/notes`, {
        content: `[User] ${plainTextContent}`,
      });

      toast.success("Note saved successfully");
      setContent("");
      localStorage.removeItem(draftKey);
      setIsOpen(false);

      // Refresh the notes data - you may want to use React Query invalidation here
      window.dispatchEvent(new CustomEvent("notesUpdated", { detail: { clientId } }));
    } catch (error) {
      console.error("Failed to save note:", error);
      toast.error("Failed to save note");
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleEnhance = async (): Promise<void> => {
    const plainTextContent = content.trim();

    if (!plainTextContent) {
      toast.error("Please enter some text to enhance");
      return;
    }

    setIsEnhancing(true);
    try {
      // TODO: Implement LLM enhancement API call
      const result = await post<{ enhancedContent: string }>(
        `/api/omni-clients/${clientId}/notes/enhance`,
        {
          content: plainTextContent,
        },
      );

      setContent(result.enhancedContent);
      toast.success("Note enhanced with AI");
    } catch (error) {
      console.error("AI enhancement failed:", error);
      toast.error("AI enhancement not available");
    } finally {
      setIsEnhancing(false);
    }
  };

  const handleVoiceToText = async (): Promise<void> => {
    if (!("webkitSpeechRecognition" in window) && !("SpeechRecognition" in window)) {
      toast.error("Voice recognition not supported in this browser");
      return;
    }

    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
    const recognition = new SpeechRecognition();

    recognition.continuous = false;
    recognition.interimResults = false;
    recognition.lang = "en-US";

    recognition.onstart = () => {
      setIsRecording(true);
      toast.info("Listening... Speak now");
    };

    recognition.onresult = (event: SpeechRecognitionEvent) => {
      const transcript = event.results[0]?.[0]?.transcript;
      const newText = content + (content ? " " : "") + transcript;
      setContent(newText);
      toast.success("Voice input added");
    };

    recognition.onerror = (event: Event) => {
      console.error("Voice recognition error:", event);
      toast.error("Voice recognition failed");
      setIsRecording(false);
    };

    recognition.onend = () => {
      setIsRecording(false);
    };

    recognition.start();
  };

  // Handle Enter key to submit
  const handleKeyDown = (e: React.KeyboardEvent): void => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault();
      handleSubmit().catch((error) => {
        toast.error("Failed to save note");
        console.error("Note submission error:", error);
      });
    }
  };

  return (
    <Popover open={isOpen} onOpenChange={setIsOpen}>
      <PopoverTrigger asChild>{children}</PopoverTrigger>
      <PopoverContent className="w-96 p-0" side="right" align="start">
        <div className="p-4 space-y-3">
          <div className="space-y-1">
            <h4 className="font-semibold text-sm">Add Note</h4>
            <p className="text-xs text-muted-foreground">for {clientName}</p>
          </div>

          <div className="space-y-2">
            <Textarea
              value={content}
              onChange={(e) => setContent(e.target.value)}
              onKeyDown={handleKeyDown}
              placeholder="Write your note here..."
              className="min-h-32 resize-none"
              rows={5}
            />
          </div>

          <Separator />

          <div className="flex items-center justify-between">
            <div className="flex items-center gap-2">
              <Button
                variant="ghost"
                size="sm"
                onClick={handleEnhance}
                disabled={isEnhancing || !content.trim()}
                className="h-8 text-xs"
              >
                <Sparkles className="h-3.5 w-3.5 mr-1" />
                {isEnhancing ? "Enhancing..." : "Enhance"}
              </Button>

              <Button
                variant="ghost"
                size="sm"
                onClick={handleVoiceToText}
                disabled={isRecording}
                className="h-8 text-xs"
              >
                <Mic className={`h-3.5 w-3.5 mr-1 ${isRecording ? "text-red-500" : ""}`} />
                {isRecording ? "Listening..." : "Voice"}
              </Button>
            </div>

            <Button
              size="sm"
              onClick={handleSubmit}
              disabled={isSubmitting || !content.trim()}
              className="h-8 text-xs"
            >
              <Send className="h-3.5 w-3.5 mr-1" />
              {isSubmitting ? "Saving..." : "Save"}
            </Button>
          </div>
        </div>
      </PopoverContent>
    </Popover>
  );
}


/* ===== src/app/(authorisedRoute)/omni-clients/_components/NotesHoverCard.tsx ===== */

"use client";

import { useState } from "react";
import { HoverCard, HoverCardContent, HoverCardTrigger } from "@/components/ui/hover-card";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Skeleton } from "@/components/ui/skeleton";
import { formatDistanceToNow } from "date-fns";
import { get } from "@/lib/api/client";

interface Note {
  id: string;
  content: string;
  createdAt: string;
  updatedAt: string;
}

interface NotesHoverCardProps {
  clientId: string;
  clientName: string;
  children: React.ReactNode;
  "data-testid"?: string;
}

export function NotesHoverCard({
  clientId,
  clientName,
  children,
  "data-testid": testId,
}: NotesHoverCardProps): JSX.Element {
  const [notes, setNotes] = useState<Note[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const fetchNotes = async (): Promise<void> => {
    if (!clientId) return;

    setLoading(true);
    setError(null);

    try {
      const data = await get<{ notes: Note[] }>(`/api/omni-clients/${clientId}/notes`);
      setNotes(data.notes || []);
    } catch (err) {
      setError(err instanceof Error ? err.message : "Failed to load notes");
    } finally {
      setLoading(false);
    }
  };

  return (
    <HoverCard>
      <HoverCardTrigger asChild>
        <div
          className="cursor-pointer hover:bg-muted/20 p-1 rounded-sm transition-colors"
          data-testid={testId}
          onMouseEnter={fetchNotes}
        >
          {children}
        </div>
      </HoverCardTrigger>
      <HoverCardContent className="w-96 p-4" side="top" align="start">
        <div className="space-y-3">
          <h4 className="text-sm font-semibold text-foreground">Notes for {clientName}</h4>

          {loading && (
            <div className="space-y-2">
              <Skeleton className="h-4 w-full" />
              <Skeleton className="h-4 w-3/4" />
              <Skeleton className="h-4 w-1/2" />
            </div>
          )}

          {error && <p className="text-sm text-destructive">{error}</p>}

          {!loading && !error && (
            <ScrollArea className="max-h-80">
              {notes.length > 0 ? (
                <div className="space-y-4">
                  {notes.slice(0, 20).map((note, index) => (
                    <div key={note.id} className="space-y-1">
                      <div className="flex items-center gap-2 text-xs text-muted-foreground">
                        <time dateTime={note.createdAt}>
                          {formatDistanceToNow(new Date(note.createdAt), { addSuffix: true })}
                        </time>
                        {index === 0 && <span className="text-primary font-medium">(Latest)</span>}
                      </div>
                      <p className="text-sm leading-relaxed whitespace-pre-wrap">{note.content}</p>
                    </div>
                  ))}
                </div>
              ) : (
                <p className="text-sm text-muted-foreground italic">No notes yet</p>
              )}
            </ScrollArea>
          )}
        </div>
      </HoverCardContent>
    </HoverCard>
  );
}


/* ===== src/app/(authorisedRoute)/omni-clients/_components/omni-clients-columns.tsx ===== */

"use client";

import { useState } from "react";
import { ColumnDef } from "@tanstack/react-table";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Avatar, AvatarImage, AvatarFallback } from "@/components/ui/avatar";
import { Tooltip, TooltipTrigger, TooltipContent } from "@/components/ui/tooltip";
import {
  MoreHorizontal,
  Edit,
  Trash2,
  MessageSquare,
  Plus,
  Mail,
  ArrowUpDown,
  ArrowUp,
  ArrowDown,
  Sparkles,
  NotebookPen,
} from "lucide-react";
import { Checkbox } from "@/components/ui/checkbox";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { formatDistanceToNow } from "date-fns";
import { NotesHoverCard } from "./NotesHoverCard";
import Link from "next/link";
import { ClientAIInsightsDialog } from "./ClientAIInsightsDialog";
import { ClientEmailDialog } from "./ClientEmailDialog";
import { NoteComposerPopover } from "./NoteComposerPopover";
import {
  useAskAIAboutOmniClient,
  useGenerateOmniClientEmailSuggestion,
  useCreateOmniClientNote,
  useDeleteOmniClient,
} from "@/hooks/use-omni-clients-bridge";
import type { ClientWithNotes, ClientAIInsightsResponse, ClientEmailSuggestion } from "./types";
import { toast } from "sonner";

// Helper function to generate initials from display name
function getInitials(displayName: string): string {
  if (!displayName) return "?";
  const names = displayName.trim().split(/\s+/).filter(Boolean);
  if (names.length === 0) return "?";
  if (names.length === 1) {
    return names[0]!.charAt(0).toUpperCase();
  }
  return `${names[0]!.charAt(0)}${names[names.length - 1]!.charAt(0)}`.toUpperCase();
}

// AI Action Icons Component
function ClientAIActions({ client }: { client: ClientWithNotes }): JSX.Element {
  const [aiInsightsOpen, setAiInsightsOpen] = useState(false);
  const [emailDialogOpen, setEmailDialogOpen] = useState(false);
  const [addNoteDialogOpen, setAddNoteDialogOpen] = useState(false);
  const [newNoteContent, setNewNoteContent] = useState("");

  const [aiInsights, setAiInsights] = useState<ClientAIInsightsResponse | null>(null);
  const [emailSuggestion, setEmailSuggestion] = useState<ClientEmailSuggestion | null>(null);

  const askAIMutation = useAskAIAboutOmniClient();
  const generateEmailMutation = useGenerateOmniClientEmailSuggestion();
  const createNoteMutation = useCreateOmniClientNote();

  const handleAskAI = async (): Promise<void> => {
    try {
      setAiInsightsOpen(true);
      const insights = await askAIMutation.mutateAsync(client.id);
      setAiInsights(insights);
    } catch {
      // Error handled by mutation
      setAiInsightsOpen(false);
    }
  };

  const handleSendEmail = async (): Promise<void> => {
    if (!client.primaryEmail) {
      toast.error("This client has no email address");
      return;
    }

    try {
      setEmailDialogOpen(true);
      const suggestion = await generateEmailMutation.mutateAsync({
        contactId: client.id,
      });
      setEmailSuggestion(suggestion);
    } catch {
      // Error handled by mutation
      setEmailDialogOpen(false);
    }
  };

  const handleAddNote = async (): Promise<void> => {
    if (!newNoteContent.trim()) {
      toast.error("Please enter a note");
      return;
    }

    try {
      await createNoteMutation.mutateAsync({
        contactId: client.id,
        content: newNoteContent.trim(),
      });
      setAddNoteDialogOpen(false);
      setNewNoteContent("");
    } catch {
      // Error handled by mutation
    }
  };

  return (
    <div className="flex items-center gap-1">
      <Tooltip>
        <TooltipTrigger asChild>
          <Button
            variant="ghost"
            size="sm"
            className="h-7 w-7 p-0 hover:bg-violet-50 hover:text-violet-600 dark:hover:bg-violet-950 dark:hover:text-violet-300"
            onClick={handleAskAI}
            data-testid={`ask-ai-${client.id}`}
          >
            <Sparkles className="h-3.5 w-3.5 text-violet-600 dark:text-violet-400" />
            <span className="sr-only">Ask AI</span>
          </Button>
        </TooltipTrigger>
        <TooltipContent>
          <p>Ask AI about this client</p>
        </TooltipContent>
      </Tooltip>

      <Tooltip>
        <TooltipTrigger asChild>
          <Button
            variant="ghost"
            size="sm"
            className="h-7 w-7 p-0 hover:bg-sky-50 hover:text-sky-600 dark:hover:bg-sky-950 dark:hover:text-sky-300"
            onClick={handleSendEmail}
            data-testid={`send-email-${client.id}`}
            disabled={!client.primaryEmail}
          >
            <Mail className="h-3.5 w-3.5 text-sky-600 dark:text-sky-400" />
            <span className="sr-only">Send Email</span>
          </Button>
        </TooltipTrigger>
        <TooltipContent>
          <p>{client.primaryEmail ? "Send email" : "No email address"}</p>
        </TooltipContent>
      </Tooltip>

      <NoteComposerPopover clientId={client.id} clientName={client.displayName}>
        <Tooltip>
          <TooltipTrigger asChild>
            <Button
              variant="ghost"
              size="sm"
              className="h-7 w-7 p-0 hover:bg-teal-50 hover:text-teal-600 dark:hover:bg-teal-950 dark:hover:text-teal-300"
              data-testid={`take-note-${client.id}`}
            >
              <NotebookPen className="h-3.5 w-3.5 text-teal-600 dark:text-teal-400" />
              <span className="sr-only">Take Note</span>
            </Button>
          </TooltipTrigger>
          <TooltipContent>
            <p>Take a note</p>
          </TooltipContent>
        </Tooltip>
      </NoteComposerPopover>

      {/* AI Dialogs */}
      <ClientAIInsightsDialog
        open={aiInsightsOpen}
        onOpenChange={setAiInsightsOpen}
        insights={aiInsights}
        isLoading={askAIMutation.isPending}
        clientName={client.displayName}
      />

      <ClientEmailDialog
        open={emailDialogOpen}
        onOpenChange={setEmailDialogOpen}
        emailSuggestion={emailSuggestion}
        isLoading={generateEmailMutation.isPending}
        clientName={client.displayName}
        clientEmail={client.primaryEmail ?? undefined}
      />

      {/* Add Note Dialog */}
      <Dialog open={addNoteDialogOpen} onOpenChange={setAddNoteDialogOpen}>
        <DialogContent className="sm:max-w-[425px]">
          <DialogHeader>
            <DialogTitle>Add Note to {client.displayName}</DialogTitle>
            <DialogDescription>
              Add a new note to track interactions or observations about this client.
            </DialogDescription>
          </DialogHeader>
          <div className="grid gap-4 py-4">
            <div className="grid gap-2">
              <Label htmlFor="note">Note Content</Label>
              <Textarea
                id="note"
                value={newNoteContent}
                onChange={(e) => setNewNoteContent(e.target.value)}
                placeholder="Enter your note here..."
                className="min-h-[100px]"
              />
            </div>
          </div>
          <DialogFooter>
            <Button
              variant="outline"
              onClick={() => {
                setAddNoteDialogOpen(false);
                setNewNoteContent("");
              }}
            >
              Cancel
            </Button>
            <Button
              onClick={handleAddNote}
              disabled={createNoteMutation.isPending || !newNoteContent.trim()}
            >
              {createNoteMutation.isPending ? "Adding..." : "Add Note"}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
}

export const omniClientsColumns: ColumnDef<ClientWithNotes>[] = [
  {
    id: "select",
    header: ({ table }) => (
      <Checkbox
        checked={table.getIsAllPageRowsSelected()}
        onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}
        aria-label="Select all clients"
      />
    ),
    cell: ({ row }) => (
      <Checkbox
        checked={row.getIsSelected()}
        onCheckedChange={(value) => row.toggleSelected(!!value)}
        aria-label="Select client"
      />
    ),
    enableSorting: false,
    enableHiding: false,
    size: 50,
  },
  {
    id: "avatar",
    header: "",
    cell: ({ row }) => {
      const client = row.original;
      const initials = getInitials(client.displayName);

      return (
        <Avatar className="size-8" data-testid={`client-avatar-${client.id}`}>
          <AvatarImage
            src={`/api/omni-clients/${client.id}/avatar`}
            alt={`${client.displayName} avatar`}
          />
          <AvatarFallback className="text-sm font-medium bg-gradient-to-br from-blue-100 to-purple-100 text-blue-700 dark:from-blue-900 dark:to-purple-900 dark:text-blue-300">
            {initials}
          </AvatarFallback>
        </Avatar>
      );
    },
    size: 60,
  },
  {
    accessorKey: "displayName",
    header: ({ column }) => {
      return (
        <Button
          variant="ghost"
          onClick={() => column.toggleSorting(column.getIsSorted() === "asc")}
          className="h-8 px-2 lg:px-3"
        >
          Name
          {column.getIsSorted() === "desc" ? (
            <ArrowDown className="ml-2 h-4 w-4" />
          ) : column.getIsSorted() === "asc" ? (
            <ArrowUp className="ml-2 h-4 w-4" />
          ) : (
            <ArrowUpDown className="ml-2 h-4 w-4" />
          )}
        </Button>
      );
    },
    cell: ({ row }) => {
      const client = row.original;
      const name = row.getValue("displayName") as string;
      const href = client.slug ? `/omni-clients/${client.slug}` : `/omni-clients/${client.id}`;
      return (
        <Link
          href={href}
          className="font-medium text-blue-600 hover:text-blue-800 hover:underline cursor-pointer"
        >
          {name ?? "Unknown"}
        </Link>
      );
    },
  },
  {
    id: "aiActions",
    header: "Actions",
    cell: ({ row }) => {
      const client = row.original;
      return <ClientAIActions client={client} />;
    },
    size: 140,
  },
  {
    accessorKey: "primaryEmail",
    header: "Email",
    cell: ({ row }) => {
      const email = row.getValue("primaryEmail") as string | null;
      return email ? (
        <span className="text-muted-foreground">{email}</span>
      ) : (
        <span className="text-muted-foreground italic">No email</span>
      );
    },
  },
  {
    accessorKey: "primaryPhone",
    header: "Phone",
    cell: ({ row }) => {
      const phone = row.getValue("primaryPhone") as string | null;
      return phone ? (
        <span className="text-muted-foreground">{phone}</span>
      ) : (
        <span className="text-muted-foreground italic">No phone</span>
      );
    },
  },
  {
    accessorKey: "lastNote",
    header: "Notes",
    cell: ({ row }) => {
      const lastNote = row.original.lastNote;
      const client = row.original;

      return (
        <div className="max-w-[48ch] min-w-0">
          <NotesHoverCard
            clientId={client.id}
            clientName={client.displayName ?? "Unknown"}
            data-testid={`notes-hover-card-${client.id}`}
          >
            <div className="line-clamp-2 text-sm text-muted-foreground leading-tight overflow-hidden text-ellipsis">
              {lastNote ? (
                <span className="whitespace-pre-wrap">{lastNote}</span>
              ) : (
                <span className="italic text-muted-foreground/60">No notes yet</span>
              )}
            </div>
          </NotesHoverCard>
        </div>
      );
    },
  },
  {
    accessorKey: "tags",
    header: "Tags",
    cell: ({ row }) => {
      const tagsData = row.getValue("tags") as string[] | string | null;
      let tags: string[] = [];

      // Tags come as array from API, not string
      if (Array.isArray(tagsData)) {
        tags = tagsData;
      } else if (typeof tagsData === "string" && tagsData) {
        try {
          tags = JSON.parse(tagsData) as string[];
        } catch {
          tags = [];
        }
      }

      const getTagColor = (tag: string): string => {
        // Service types - Blue
        if (
          [
            "Yoga",
            "Massage",
            "Meditation",
            "Pilates",
            "Reiki",
            "Acupuncture",
            "Personal Training",
            "Nutrition Coaching",
            "Life Coaching",
            "Therapy",
          ].includes(tag)
        ) {
          return "bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300";
        }
        // Class/Session types - Purple
        if (["Workshops", "Retreats", "Group Classes", "Private Sessions"].includes(tag)) {
          return "bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-300";
        }
        // Demographics - Green
        if (
          [
            "Senior",
            "Young Adult",
            "Professional",
            "Parent",
            "Student",
            "Beginner",
            "Intermediate",
            "Advanced",
            "VIP",
            "Local",
            "Traveler",
          ].includes(tag)
        ) {
          return "bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300";
        }
        // Goals & Health - Orange
        if (
          [
            "Stress Relief",
            "Weight Loss",
            "Flexibility",
            "Strength Building",
            "Pain Management",
            "Mental Health",
            "Spiritual Growth",
            "Mindfulness",
            "Athletic Performance",
            "Injury Recovery",
            "Prenatal",
            "Postnatal",
          ].includes(tag)
        ) {
          return "bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-300";
        }
        // Engagement patterns - Teal
        if (
          [
            "Regular Attendee",
            "Weekend Warrior",
            "Early Bird",
            "Evening Preferred",
            "Seasonal Client",
            "Frequent Visitor",
            "Occasional Visitor",
            "High Spender",
            "Referral Source",
            "Social Media Active",
          ].includes(tag)
        ) {
          return "bg-teal-100 text-teal-800 dark:bg-teal-900 dark:text-teal-300";
        }
        // Default - Gray
        return "bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-300";
      };

      return (
        <div className="flex gap-1 flex-wrap">
          {tags.length > 0 ? (
            tags.slice(0, 4).map((tag: string, index: number) => (
              <Badge key={index} className={`text-xs ${getTagColor(tag)}`}>
                {tag}
              </Badge>
            ))
          ) : (
            <span className="text-muted-foreground italic text-sm">No tags</span>
          )}
          {tags.length > 4 && (
            <Badge variant="outline" className="text-xs">
              +{tags.length - 4}
            </Badge>
          )}
        </div>
      );
    },
  },
  {
    accessorKey: "stage",
    header: "Wellness Stage",
    cell: ({ row }) => {
      const stage = row.getValue("stage") as string | null;
      const getStageColor = (stage: string | null): string => {
        switch (stage) {
          case "VIP Client":
            return "bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-300";
          case "Core Client":
            return "bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300";
          case "New Client":
            return "bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300";
          case "Prospect":
            return "bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300";
          case "At Risk Client":
            return "bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-300";
          case "Lost Client":
            return "bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300";
          default:
            return "bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-300";
        }
      };

      return stage ? (
        <Badge className={`text-xs ${getStageColor(stage)}`}>{stage}</Badge>
      ) : (
        <span className="text-muted-foreground italic text-sm">No stage</span>
      );
    },
  },
  {
    accessorKey: "interactions",
    header: "Interactions",
    cell: ({ row }) => {
      const count = (row.getValue("interactions") as number) || 0;
      return (
        <Badge variant="outline" className="text-xs">
          {count}
        </Badge>
      );
    },
  },
  {
    accessorKey: "updatedAt",
    header: ({ column }) => {
      return (
        <Button
          variant="ghost"
          onClick={() => column.toggleSorting(column.getIsSorted() === "asc")}
          className="h-8 px-2 lg:px-3"
        >
          Last Updated
          {column.getIsSorted() === "desc" ? (
            <ArrowDown className="ml-2 h-4 w-4" />
          ) : column.getIsSorted() === "asc" ? (
            <ArrowUp className="ml-2 h-4 w-4" />
          ) : (
            <ArrowUpDown className="ml-2 h-4 w-4" />
          )}
        </Button>
      );
    },
    cell: ({ row }) => {
      const date = new Date(row.getValue("updatedAt"));
      return (
        <span className="text-sm text-muted-foreground">
          {formatDistanceToNow(date, { addSuffix: true })}
        </span>
      );
    },
  },
  {
    id: "actions",
    cell: ({ row }) => {
      const client = row.original;
      return <ClientActionsCell client={client} />;
    },
  },
];

function ClientActionsCell({ client }: { client: ClientWithNotes }): JSX.Element {
  const deleteClient = useDeleteOmniClient();

  const handleEditClient = (client: ClientWithNotes): void => {
    toast.info(`Edit client functionality for ${client.displayName ?? "Unknown"} - Coming soon!`);
    // TODO: Open edit client dialog/form
  };

  const handleDeleteClient = (client: ClientWithNotes): void => {
    if (
      confirm(
        `Are you sure you want to delete ${client.displayName ?? "Unknown"}? This action cannot be undone.`,
      )
    ) {
      deleteClient.mutate(client.id);
    }
  };

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="ghost" className="h-8 w-8 p-0" data-testid={`client-actions-${client.id}`}>
          <MoreHorizontal className="h-4 w-4" />
          <span className="sr-only">Open menu</span>
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end">
        <DropdownMenuItem
          data-testid={`edit-client-${client.id}`}
          onClick={() => handleEditClient(client)}
        >
          <Edit className="h-4 w-4 mr-2 text-green-600 dark:text-green-400" />
          Edit Client
        </DropdownMenuItem>
        <DropdownMenuItem
          data-testid={`add-note-${client.id}`}
          onClick={() => {
            // This should open the add note dialog for this specific client
            // Since this is outside the ClientAIActions component, we'll need to implement this differently
            toast.info(
              `Add note for ${client.displayName ?? "Unknown"} - Use the note icon in the Actions column`,
            );
          }}
        >
          <Plus className="h-4 w-4 mr-2" />
          Add Note
        </DropdownMenuItem>
        <DropdownMenuItem data-testid={`view-notes-${client.id}`}>
          <MessageSquare className="h-4 w-4 mr-2" />
          View Notes
        </DropdownMenuItem>
        <DropdownMenuItem
          className="text-destructive focus:text-destructive"
          data-testid={`delete-client-${client.id}`}
          onClick={() => handleDeleteClient(client)}
        >
          <Trash2 className="h-4 w-4 mr-2 text-red-600 dark:text-red-400" />
          Delete
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  );
}


/* ===== src/app/(authorisedRoute)/omni-clients/_components/omni-clients-table.tsx ===== */

"use client";

import { useState } from "react";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Button } from "@/components/ui/button";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import {
  ColumnDef,
  flexRender,
  getCoreRowModel,
  getSortedRowModel,
  getPaginationRowModel,
  getFilteredRowModel,
  VisibilityState,
  SortingState,
  RowSelectionState,
  useReactTable,
  Updater,
} from "@tanstack/react-table";
import {
  ChevronLeft,
  ChevronRight,
  ChevronsLeft,
  ChevronsRight,
  Settings2,
  Brain,
  Tag,
  Download,
} from "lucide-react";
import { useBulkDeleteOmniClients } from "@/hooks/use-client-delete";
import { useBulkEnrichOmniClients } from "@/hooks/use-omni-clients-bridge";
import type { ExportableClientData, DataTableProps } from "./types";
import { toast } from "sonner";

export function OmniClientsTable<TData, TValue>({
  columns,
  data,
}: DataTableProps<TData, TValue>): JSX.Element {
  const bulkDeleteOmniClients = useBulkDeleteOmniClients();
  const bulkEnrichOmniClients = useBulkEnrichOmniClients();
  const [sorting, setSorting] = useState<SortingState>([]);

  // Initialize column visibility from localStorage
  const [columnVisibility, setColumnVisibility] = useState<VisibilityState>(() => {
    if (typeof window !== "undefined") {
      const saved = localStorage.getItem("omni-clients-column-visibility");
      if (saved) {
        try {
          return JSON.parse(saved) as VisibilityState;
        } catch {
          // Failed to parse saved column visibility, use default
        }
      }
    }
    return {};
  });

  // Save column visibility to localStorage when it changes
  const handleColumnVisibilityChange = (updater: Updater<VisibilityState>): void => {
    const newVisibility = typeof updater === "function" ? updater(columnVisibility) : updater;
    setColumnVisibility(newVisibility);
    if (typeof window !== "undefined") {
      localStorage.setItem("omni-clients-column-visibility", JSON.stringify(newVisibility));
    }
  };

  const [rowSelection, setRowSelection] = useState<RowSelectionState>({});

  const handleExportClients = (): void => {
    try {
      if (data.length === 0) {
        toast.error("No data to export");
        return;
      }

      const headers = ["Name", "Email", "Phone", "Stage", "Tags", "AI Insights", "Last Updated"];
      const rows = data.map((item) => {
        const client = item as unknown as ExportableClientData;
        return [
          client.displayName ?? "",
          client.primaryEmail ?? "",
          client.primaryPhone ?? "",
          client.stage ?? "",
          Array.isArray(client.tags) ? client.tags.join(", ") : "",
          "", // Notes are stored separately
          new Date(client.updatedAt).toLocaleDateString(),
        ];
      });

      const escapeCsv = (val: string): string => {
        const needsQuotes = /[",\n]/.test(val);
        const escaped = val.replace(/"/g, '""');
        return needsQuotes ? `"${escaped}"` : escaped;
      };

      const csv = [headers, ...rows]
        .map((r) => r.map((v) => escapeCsv(String(v ?? ""))).join(","))
        .join("\n");

      const blob = new Blob(["\uFEFF" + csv], { type: "text/csv;charset=utf-8;" });
      const url = URL.createObjectURL(blob);
      const a = document.createElement("a");
      a.href = url;
      a.download = `omni-clients-${new Date().toISOString().split("T")[0]}.csv`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);

      toast.success(`Exported ${data.length} clients to CSV`);
    } catch {
      toast.error("Failed to export clients");
    }
  };

  const table = useReactTable({
    data,
    columns: columns as ColumnDef<TData, unknown>[],
    getCoreRowModel: getCoreRowModel(),
    getSortedRowModel: getSortedRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
    getFilteredRowModel: getFilteredRowModel(),
    onSortingChange: setSorting,
    onColumnVisibilityChange: handleColumnVisibilityChange,
    onRowSelectionChange: setRowSelection,
    enableRowSelection: true,
    state: {
      sorting,
      columnVisibility,
      rowSelection,
    },
    initialState: {
      pagination: {
        pageSize: 25,
      },
      columnVisibility: {
        // Hide phone and email by default as requested
        primaryPhone: false,
        primaryEmail: false,
        // Ensure notes column is always visible
        lastNote: true,
      },
    },
  });

  return (
    <div className="space-y-4">
      {/* Bulk Actions */}
      {Object.keys(rowSelection).length > 0 && (
        <div className="flex items-center justify-between p-4 bg-muted/50 border rounded-lg">
          <div className="text-sm font-medium">
            {Object.keys(rowSelection).length} OmniClient(s) selected
          </div>
          <div className="flex items-center space-x-2">
            <Button variant="outline" size="sm" onClick={() => setRowSelection({})}>
              Clear Selection
            </Button>
            <Button
              variant="destructive"
              size="sm"
              disabled={bulkDeleteOmniClients.isPending}
              onClick={() => {
                const selectedIds = Object.keys(rowSelection).filter((id) => rowSelection[id]);
                const selectedRows = table.getSelectedRowModel().rows;
                const omniClientNames = selectedRows
                  .map((row) => (row.original as { displayName: string }).displayName)
                  .join(", ");

                if (
                  confirm(
                    `Are you sure you want to delete ${selectedIds.length} OmniClient(s)?\n\nOmniClients: ${omniClientNames}\n\nThis action cannot be undone.`,
                  )
                ) {
                  bulkDeleteOmniClients.mutate(selectedIds, {
                    onSuccess: () => {
                      setRowSelection({}); // Clear selection after successful delete
                    },
                  });
                }
              }}
            >
              {bulkDeleteOmniClients.isPending ? "Deleting..." : "Delete Selected"}
            </Button>
            <Button
              variant="default"
              size="sm"
              disabled={bulkEnrichOmniClients.isPending}
              onClick={() => {
                const selectedIds = Object.keys(rowSelection).filter((id) => rowSelection[id]);
                const selectedRows = table.getSelectedRowModel().rows;
                const omniClientNames = selectedRows
                  .map((row) => (row.original as { displayName: string }).displayName)
                  .join(", ");

                if (
                  confirm(
                    `Are you sure you want to enrich ${selectedIds.length} OmniClient(s) with AI insights?\n\nOmniClients: ${omniClientNames}\n\nThis may take a few minutes.`,
                  )
                ) {
                  bulkEnrichOmniClients.mutate(selectedIds, {
                    onSuccess: () => {
                      setRowSelection({}); // Clear selection after successful enrich
                    },
                  });
                }
              }}
            >
              <Brain className="mr-2 h-4 w-4" />
              {bulkEnrichOmniClients.isPending ? "Enriching..." : "Bulk Enrich"}
            </Button>
          </div>
        </div>
      )}

      {/* Column Visibility Controls */}
      <div className="flex items-center justify-between">
        <div className="text-sm text-muted-foreground">
          {table.getFilteredRowModel().rows.length} OmniClient(s) found
        </div>
        <div className="flex items-center space-x-2">
          <Button variant="outline" size="sm">
            <Tag className="h-4 w-4 mr-2" />
            Filter
          </Button>
          <Button variant="outline" size="sm" onClick={handleExportClients}>
            <Download className="h-4 w-4 mr-2" />
            Export
          </Button>
          <Popover>
            <PopoverTrigger asChild>
              <Button variant="outline" size="sm">
                <Settings2 className="mr-2 h-4 w-4" />
                Columns ({table.getVisibleLeafColumns().length})
              </Button>
            </PopoverTrigger>
            <PopoverContent className="w-[240px] p-0" align="end">
              <div className="px-4 py-3 border-b">
                <h4 className="font-semibold text-sm">Toggle Columns</h4>
                <p className="text-xs text-muted-foreground">Choose which columns to display</p>
              </div>
              <div className="p-2 space-y-1 max-h-[300px] overflow-y-auto">
                {table
                  .getAllColumns()
                  .filter((column) => column.getCanHide())
                  .map((column) => {
                    const columnName =
                      column.id === "primaryEmail"
                        ? "Email"
                        : column.id === "primaryPhone"
                          ? "Phone"
                          : column.id === "displayName"
                            ? "Name"
                            : column.id === "lastNote"
                              ? "Notes"
                              : column.id === "updatedAt"
                                ? "Last Updated"
                                : column.id === "aiActions"
                                  ? "AI Actions"
                                  : column.id === "stage"
                                    ? "Stage"
                                    : column.id === "tags"
                                      ? "Tags"
                                      : column.id === "notes"
                                        ? "AI Insights"
                                        : column.id === "interactions"
                                          ? "Interactions"
                                          : column.id;

                    return (
                      <div
                        key={column.id}
                        className="flex items-center space-x-2 p-2 hover:bg-muted/50 rounded-sm cursor-pointer"
                        onClick={() => column.toggleVisibility()}
                      >
                        <div
                          className={`w-4 h-4 border border-primary rounded-sm flex items-center justify-center ${
                            column.getIsVisible() ? "bg-primary" : "bg-transparent"
                          }`}
                        >
                          {column.getIsVisible() && (
                            <div className="w-2 h-2 bg-primary-foreground rounded-[1px]" />
                          )}
                        </div>
                        <span className="text-sm flex-1">{columnName}</span>
                      </div>
                    );
                  })}
              </div>
              <div className="px-4 py-3 border-t">
                <div className="flex justify-between">
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => table.toggleAllColumnsVisible(false)}
                  >
                    Hide All
                  </Button>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => table.toggleAllColumnsVisible(true)}
                  >
                    Show All
                  </Button>
                </div>
              </div>
            </PopoverContent>
          </Popover>
        </div>
      </div>

      <div className="rounded-md border">
        <Table>
          <TableHeader>
            {table.getHeaderGroups().map((headerGroup) => (
              <TableRow key={headerGroup.id}>
                {headerGroup.headers.map((header) => {
                  return (
                    <TableHead key={header.id}>
                      {header.isPlaceholder
                        ? null
                        : flexRender(header.column.columnDef.header, header.getContext())}
                    </TableHead>
                  );
                })}
              </TableRow>
            ))}
          </TableHeader>
          <TableBody>
            {table.getRowModel().rows?.length ? (
              table.getRowModel().rows.map((row) => (
                <TableRow
                  key={row.id}
                  data-state={row.getIsSelected() && "selected"}
                  data-testid={`client-row-${(row.original as { id: string }).id}`}
                >
                  {row.getVisibleCells().map((cell) => (
                    <TableCell key={cell.id}>
                      {flexRender(cell.column.columnDef.cell, cell.getContext())}
                    </TableCell>
                  ))}
                </TableRow>
              ))
            ) : (
              <TableRow>
                <TableCell colSpan={columns.length} className="h-24 text-center">
                  No clients found.
                </TableCell>
              </TableRow>
            )}
          </TableBody>
        </Table>
      </div>

      {/* Pagination Controls */}
      <div className="flex items-center justify-between space-x-2 py-4 px-4 border-t">
        <div className="flex items-center space-x-2">
          <p className="text-sm text-muted-foreground">
            Showing{" "}
            {table.getState().pagination.pageIndex * table.getState().pagination.pageSize + 1} to{" "}
            {Math.min(
              (table.getState().pagination.pageIndex + 1) * table.getState().pagination.pageSize,
              data.length,
            )}{" "}
            of {data.length} clients
          </p>
        </div>

        <div className="flex items-center space-x-2">
          <div className="flex items-center space-x-2">
            <p className="text-sm font-medium">Rows per page</p>
            <Select
              value={`${table.getState().pagination.pageSize}`}
              onValueChange={(value) => {
                table.setPageSize(Number(value));
              }}
            >
              <SelectTrigger className="h-8 w-[70px]">
                <SelectValue placeholder={table.getState().pagination.pageSize} />
              </SelectTrigger>
              <SelectContent side="top">
                {[10, 25, 50, 100].map((pageSize) => (
                  <SelectItem key={pageSize} value={`${pageSize}`}>
                    {pageSize}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>

          <div className="flex w-[120px] items-center justify-center text-sm font-medium">
            Page {table.getState().pagination.pageIndex + 1} of {table.getPageCount()}
          </div>

          <div className="flex items-center space-x-2">
            <Button
              variant="outline"
              className="h-8 w-8 p-0"
              onClick={() => table.setPageIndex(0)}
              disabled={!table.getCanPreviousPage()}
            >
              <span className="sr-only">Go to first page</span>
              <ChevronsLeft className="h-4 w-4" />
            </Button>
            <Button
              variant="outline"
              className="h-8 w-8 p-0"
              onClick={() => table.previousPage()}
              disabled={!table.getCanPreviousPage()}
            >
              <span className="sr-only">Go to previous page</span>
              <ChevronLeft className="h-4 w-4" />
            </Button>
            <Button
              variant="outline"
              className="h-8 w-8 p-0"
              onClick={() => table.nextPage()}
              disabled={!table.getCanNextPage()}
            >
              <span className="sr-only">Go to next page</span>
              <ChevronRight className="h-4 w-4" />
            </Button>
            <Button
              variant="outline"
              className="h-8 w-8 p-0"
              onClick={() => table.setPageIndex(table.getPageCount() - 1)}
              disabled={!table.getCanNextPage()}
            >
              <span className="sr-only">Go to last page</span>
              <ChevronsRight className="h-4 w-4" />
            </Button>
          </div>
        </div>
      </div>
    </div>
  );
}


/* ===== src/app/(authorisedRoute)/omni-clients/_components/OmniClientsPage.tsx ===== */

"use client";

import { useState, useMemo, useEffect } from "react";
import { useMutation } from "@tanstack/react-query";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
  Button,
  Input,
  Badge,
  Checkbox,
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
  Label,
} from "@/components/ui";
import { Users, Brain, Sparkles, Search, Plus, Calendar, Mail, X } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { useStreamingEnrichment } from "@/hooks/use-streaming-enrichment";

// Enhanced components
import { OmniClientsTable } from "./omni-clients-table";
import { omniClientsColumns } from "./omni-clients-columns";

import { useQueryClient } from "@tanstack/react-query";
import { apiClient } from "@/lib/api/client";
import { useEnhancedOmniClients, useOmniClientSuggestions } from "@/hooks/use-omni-clients";
import type { ClientWithNotes, ClientSuggestion, ClientQuickAddData } from "./types";
import { validationHelpers } from "./types";

/**
 * OmniClientsPage - Main Client Component
 * Handles all interactive functionality for client management
 * Replaces the old contacts page with wellness-focused terminology
 */
export function OmniClientsPage(): JSX.Element {
  // Enhanced System State
  const [showSuggestions, setShowSuggestions] = useState(false);
  const [selectedSuggestions, setSelectedSuggestions] = useState<string[]>([]);
  const [isDismissed, setIsDismissed] = useState(false);
  const [isFadingOut, setIsFadingOut] = useState(false);
  const [isAddingClient, setIsAddingClient] = useState(false);
  const [searchQuery, setSearchQuery] = useState("");
  const [newClient, setNewClient] = useState<ClientQuickAddData>({
    displayName: "",
    primaryEmail: "",
    primaryPhone: "",
  });
  const [formErrors, setFormErrors] = useState<Record<string, string[]>>({});

  const { toast } = useToast();
  const queryClient = useQueryClient();

  // Enhanced System Queries using OmniClient endpoints
  const { data: enhancedClientsData, isLoading: enhancedLoading } =
    useEnhancedOmniClients(searchQuery);

  const enhancedClients: ClientWithNotes[] = useMemo(
    () => enhancedClientsData?.items ?? [],
    [enhancedClientsData?.items],
  );

  const filteredClients = useMemo((): ClientWithNotes[] => {
    if (!searchQuery.trim()) return enhancedClients;
    const query = searchQuery.toLowerCase();
    return enhancedClients.filter(
      (client) =>
        (client.displayName?.toLowerCase().includes(query) ?? false) ||
        (client.primaryEmail?.toLowerCase().includes(query) ?? false) ||
        (client.primaryPhone?.toLowerCase().includes(query) ?? false),
    );
  }, [enhancedClients, searchQuery]);

  // OmniClient suggestions query using OmniClient endpoints
  const { data: suggestionsData, isLoading: suggestionsLoading } =
    useOmniClientSuggestions(showSuggestions);

  const suggestions: ClientSuggestion[] = suggestionsData?.suggestions ?? [];

  // Auto-fade effect when no suggestions found
  useEffect(() => {
    if (!suggestionsLoading && suggestions.length === 0 && showSuggestions && !isDismissed) {
      // Start fade animation after 3 seconds
      const fadeTimer = setTimeout(() => {
        setIsFadingOut(true);
      }, 3000);

      // Remove component after fade animation completes (3s + 4s = 7s total)
      const removeTimer = setTimeout(() => {
        setShowSuggestions(false);
        setIsFadingOut(false);
        setIsDismissed(false); // Reset for next time
      }, 7000);

      return () => {
        clearTimeout(fadeTimer);
        clearTimeout(removeTimer);
      };
    }
    return undefined;
  }, [suggestionsLoading, suggestions.length, showSuggestions, isDismissed]);

  // Streaming enrichment hook
  const streamingEnrichment = useStreamingEnrichment();

  const createClientsMutation = useMutation({
    mutationFn: async (
      suggestionIds: string[],
    ): Promise<{
      success: boolean;
      createdCount: number;
      errors: string[];
    }> => {
      return await apiClient.post<{
        success: boolean;
        createdCount: number;
        errors: string[];
      }>("/api/omni-clients/suggestions", { suggestionIds });
    },
    onSuccess: (data) => {
      void queryClient.invalidateQueries({ queryKey: ["/api/omni-clients"] });
      void queryClient.invalidateQueries({ queryKey: ["/api/omni-clients/suggestions"] });
      setSelectedSuggestions([]);
      toast({
        title: "Success",
        description: `Created ${data.createdCount} OmniClient${data.createdCount === 1 ? "" : "s"} from calendar data`,
      });
      // Log errors for debugging but don't show to user
      if (data.errors?.length > 0) {
        // Errors already shown via toast, no console output needed
      }
    },
    onError: () => {
      toast({
        title: "Error",
        description: "Failed to create OmniClients from suggestions",
        variant: "destructive",
      });
    },
  });

  // Enhanced System Handlers
  const handleAddClient = async (): Promise<void> => {
    // Validate form data using the validation schema
    const validation = validationHelpers.validateClientQuickAdd(newClient);

    if (!validation.success) {
      // Convert custom error objects to ZodIssue format for getErrorsByField
      const zodErrors = (validation.errors ?? []).map((error) => ({
        code: "custom" as const,
        message: error.message,
        path: [],
      }));
      const errorsByField = validationHelpers.getErrorsByField(zodErrors);
      setFormErrors(errorsByField);

      // Show first error message
      const firstError = validation.errors?.[0];
      if (firstError && "message" in firstError) {
        toast({
          title: "Validation Error",
          description: firstError.message,
          variant: "destructive",
        });
      }
      return;
    }

    // Clear any previous errors
    setFormErrors({});

    try {
      await apiClient.post("/api/omni-clients", validation.data);

      await queryClient.invalidateQueries({ queryKey: ["/api/omni-clients"] });
      setIsAddingClient(false);
      setNewClient({ displayName: "", primaryEmail: "", primaryPhone: "" });
      toast({
        title: "Success",
        description: "Client created successfully",
      });
    } catch {
      toast({
        title: "Error",
        description: "Failed to create client",
        variant: "destructive",
      });
    }
  };

  const handleCreateSuggested = (): void => {
    if (selectedSuggestions.length === 0) {
      toast({
        title: "No Selection",
        description: "Please select clients to create",
        variant: "destructive",
      });
      return;
    }

    createClientsMutation.mutate(selectedSuggestions);
  };

  const getConfidenceBadge = (confidence: string): string => {
    const variants = {
      high: "bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300",
      medium: "bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300",
      low: "bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300",
    };
    return variants[confidence as keyof typeof variants] || variants.low;
  };

  return (
    <div className="space-y-6" data-testid="omni-clients-page">
      {/* Enhanced Header */}
      <div className="flex items-center justify-between">
        <div className="space-y-1">
          <h1 className="text-3xl font-bold tracking-tight flex items-center gap-2">
            <Users className="h-7 w-7" />
            OmniClients Intelligence
          </h1>
          <p className="text-muted-foreground">
            AI-powered client relationship management with wellness insights and smart automation
          </p>
        </div>

        <div className="flex items-center gap-4">
          {/* Search Bar */}
          <div className="relative">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
            <Input
              placeholder="Search clients..."
              className="pl-10 w-64"
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              data-testid="search-clients"
            />
          </div>

          <Button
            variant="outline"
            onClick={() => streamingEnrichment.startEnrichment()}
            disabled={streamingEnrichment.isRunning}
            data-testid="enrich-clients-button"
          >
            <Brain className="h-4 w-4 mr-2" />
            {streamingEnrichment.isRunning
              ? `Enriching... ${streamingEnrichment.enrichedCount}/${streamingEnrichment.totalContacts}`
              : "AI Enrich All"}
          </Button>

          <Button
            variant="outline"
            onClick={() => setShowSuggestions(!showSuggestions)}
            data-testid="smart-suggestions-button"
          >
            <Sparkles className="h-4 w-4 mr-2" />
            Smart Suggestions
          </Button>
        </div>

        {/* Enrichment Progress */}
        {streamingEnrichment.isRunning && (
          <div className="bg-blue-50 dark:bg-blue-950 border border-blue-200 dark:border-blue-800 rounded-lg p-4">
            <div className="flex items-center justify-between mb-2">
              <span className="text-sm font-medium text-blue-900 dark:text-blue-100">
                Enriching Clients with AI
              </span>
              <span className="text-sm text-blue-700 dark:text-blue-300">
                {Math.round(streamingEnrichment.progress)}%
              </span>
            </div>
            <div className="w-full bg-blue-200 dark:bg-blue-800 rounded-full h-2 mb-2">
              <div
                className="bg-blue-600 dark:bg-blue-400 h-2 rounded-full transition-all duration-300"
                style={{ width: `${streamingEnrichment.progress}%` }}
              />
            </div>
            {streamingEnrichment.currentContact && (
              <p className="text-xs text-blue-600 dark:text-blue-400">
                Currently enriching: {streamingEnrichment.currentContact}
              </p>
            )}
          </div>
        )}

        <Dialog open={isAddingClient} onOpenChange={setIsAddingClient}>
          <DialogTrigger asChild>
            <Button data-testid="add-client-button">
              <Plus className="h-4 w-4 mr-2" />
              Add Client
            </Button>
          </DialogTrigger>
          <DialogContent>
            <DialogHeader>
              <DialogTitle>Add New Client</DialogTitle>
            </DialogHeader>
            <div className="space-y-4">
              <div className="space-y-2">
                <Label htmlFor="name">Name *</Label>
                <Input
                  id="name"
                  placeholder="Enter client name"
                  value={newClient.displayName}
                  onChange={(e) => {
                    setNewClient((prev) => ({ ...prev, displayName: e.target.value }));
                    // Clear field error when user starts typing
                    if (formErrors["displayName"]) {
                      setFormErrors((prev) => {
                        const newErrors = { ...prev };
                        delete newErrors["displayName"];
                        return newErrors;
                      });
                    }
                  }}
                  data-testid="client-name-input"
                  className={formErrors["displayName"] ? "border-red-500" : ""}
                />
                {formErrors["displayName"] && (
                  <p className="text-sm text-red-500">{formErrors["displayName"][0]}</p>
                )}
              </div>
              <div className="space-y-2">
                <Label htmlFor="email">Email</Label>
                <Input
                  id="email"
                  type="email"
                  placeholder="Enter email address"
                  value={newClient.primaryEmail}
                  onChange={(e) => {
                    setNewClient((prev) => ({ ...prev, primaryEmail: e.target.value }));
                    // Clear field error when user starts typing
                    if (formErrors["primaryEmail"]) {
                      setFormErrors((prev) => {
                        const newErrors = { ...prev };
                        delete newErrors["primaryEmail"];
                        return newErrors;
                      });
                    }
                  }}
                  data-testid="client-email-input"
                  className={formErrors["primaryEmail"] ? "border-red-500" : ""}
                />
                {formErrors["primaryEmail"] && (
                  <p className="text-sm text-red-500">{formErrors["primaryEmail"][0]}</p>
                )}
              </div>
              <div className="space-y-2">
                <Label htmlFor="phone">Phone</Label>
                <Input
                  id="phone"
                  placeholder="Enter phone number"
                  value={newClient.primaryPhone}
                  onChange={(e) => {
                    setNewClient((prev) => ({ ...prev, primaryPhone: e.target.value }));
                    // Clear field error when user starts typing
                    if (formErrors["primaryPhone"]) {
                      setFormErrors((prev) => {
                        const newErrors = { ...prev };
                        delete newErrors["primaryPhone"];
                        return newErrors;
                      });
                    }
                  }}
                  data-testid="client-phone-input"
                  className={formErrors["primaryPhone"] ? "border-red-500" : ""}
                />
                {formErrors["primaryPhone"] && (
                  <p className="text-sm text-red-500">{formErrors["primaryPhone"][0]}</p>
                )}
              </div>
              <div className="flex justify-end gap-2">
                <Button
                  variant="outline"
                  onClick={() => setIsAddingClient(false)}
                  data-testid="cancel-add-client"
                >
                  Cancel
                </Button>
                <Button onClick={handleAddClient} data-testid="save-client">
                  Add Client
                </Button>
              </div>
            </div>
          </DialogContent>
        </Dialog>
      </div>

      {/* Smart Suggestions Section */}
      {showSuggestions && (
        <Card
          data-testid="client-suggestions-section"
          className={`transition-opacity duration-[4000ms] ${isFadingOut ? "opacity-0" : "opacity-100"}`}
        >
          <CardHeader>
            <CardTitle className="flex items-center justify-between">
              <div className="flex items-center gap-2">
                <Sparkles className="h-5 w-5" />
                Smart Client Suggestions
              </div>
              <Button
                variant="ghost"
                size="sm"
                onClick={() => {
                  setShowSuggestions(false);
                  setIsDismissed(true);
                }}
                className="h-8 w-8 p-0"
              >
                <X className="h-4 w-4" />
              </Button>
            </CardTitle>
            <CardDescription>
              We found people from your calendar events who could be added as clients
            </CardDescription>
          </CardHeader>
          <CardContent>
            {suggestionsLoading ? (
              <div className="flex items-center justify-center h-32">
                <div className="text-muted-foreground">Analyzing calendar data...</div>
              </div>
            ) : suggestions.length === 0 ? (
              <div className="text-center text-muted-foreground py-8">
                <Users className="h-12 w-12 mx-auto mb-4 opacity-50" />
                <p>No new clients found in your calendar events</p>
                <p className="text-sm">All attendees may already be in your client list</p>
              </div>
            ) : (
              <div className="space-y-4">
                {/* Select All / Actions */}
                <div className="flex items-center justify-between bg-muted/50 p-3 rounded-lg">
                  <div className="flex items-center gap-2">
                    <Checkbox
                      checked={selectedSuggestions.length === suggestions.length}
                      onCheckedChange={(checked) => {
                        if (checked) {
                          setSelectedSuggestions(suggestions.map((s) => s.id));
                        } else {
                          setSelectedSuggestions([]);
                        }
                      }}
                      data-testid="select-all-suggestions"
                    />
                    <span className="font-medium">
                      Select All ({suggestions.length} suggestions)
                    </span>
                  </div>

                  {selectedSuggestions.length > 0 && (
                    <Button
                      onClick={handleCreateSuggested}
                      disabled={createClientsMutation.isPending}
                      data-testid="create-selected-clients"
                    >
                      {createClientsMutation.isPending
                        ? "Creating..."
                        : `Create ${selectedSuggestions.length} Clients`}
                    </Button>
                  )}
                </div>

                {/* Suggestion Cards */}
                <div className="grid gap-3 max-h-96 overflow-y-auto">
                  {suggestions.map((suggestion) => (
                    <div
                      key={suggestion.id}
                      className="flex items-start gap-3 p-3 border rounded-lg hover:bg-muted/50 transition-colors"
                      data-testid={`suggestion-${suggestion.id}`}
                    >
                      <Checkbox
                        checked={selectedSuggestions.includes(suggestion.id)}
                        onCheckedChange={(checked) => {
                          if (checked) {
                            setSelectedSuggestions((prev) => [...prev, suggestion.id]);
                          } else {
                            setSelectedSuggestions((prev) =>
                              prev.filter((id) => id !== suggestion.id),
                            );
                          }
                        }}
                        data-testid={`checkbox-${suggestion.id}`}
                      />

                      <div className="flex-1 min-w-0">
                        <div className="flex items-center gap-2 mb-1">
                          <h4 className="font-medium truncate">{suggestion.displayName}</h4>
                          <Badge
                            variant="secondary"
                            className={getConfidenceBadge(suggestion.confidence)}
                          >
                            {suggestion.confidence} confidence
                          </Badge>
                        </div>

                        <div className="flex items-center gap-4 text-sm text-muted-foreground mb-2">
                          <div className="flex items-center gap-1">
                            <Mail className="h-4 w-4" />
                            <span className="truncate">{suggestion.email}</span>
                          </div>
                          <div className="flex items-center gap-1">
                            <Calendar className="h-4 w-4" />
                            <span>{suggestion.eventCount} events</span>
                          </div>
                        </div>

                        {suggestion.eventTitles.length > 0 && (
                          <div className="text-xs text-muted-foreground">
                            <span>Recent events: </span>
                            <span>{suggestion.eventTitles.slice(0, 2).join(", ")}</span>
                            {suggestion.eventTitles.length > 2 && (
                              <span> +{suggestion.eventTitles.length - 2} more</span>
                            )}
                          </div>
                        )}
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </CardContent>
        </Card>
      )}

      {/* Enhanced Clients Table */}
      <Card className="transition-all duration-700 ease-in-out">
        <CardContent>
          <div className="space-y-4">
            {/* Toolbar - now empty since buttons moved to table header */}
            <div className="hidden"></div>

            {/* Enhanced Table */}
            {enhancedLoading ? (
              <div className="flex items-center justify-center h-32">
                <div className="text-muted-foreground">Loading client intelligence...</div>
              </div>
            ) : filteredClients.length === 0 ? (
              <div className="text-center text-muted-foreground py-8">
                <Users className="h-12 w-12 mx-auto mb-4 opacity-50" />
                <p>No clients found</p>
                <p className="text-sm">
                  {searchQuery
                    ? "Try adjusting your search terms"
                    : "Add clients or sync from your calendar to get started"}
                </p>
              </div>
            ) : (
              <OmniClientsTable columns={omniClientsColumns} data={filteredClients} />
            )}

            {/* Stats */}
            {enhancedClients.length > 0 && (
              <div className="flex items-center justify-between text-sm text-muted-foreground">
                <span></span>
                <div className="flex items-center gap-4"></div>
              </div>
            )}
          </div>
        </CardContent>
      </Card>
    </div>
  );
}


/* ===== src/app/(authorisedRoute)/omni-clients/_components/types.ts ===== */

/**
 * Unified Types for Omni-Clients Components
 *
 * This file consolidates all types used across the omni-clients module components.
 * It serves as the single source of truth to prevent type drift and reduce complexity.
 *
 * All omni-clients components should import types from this file instead of
 * directly from validation schemas or defining local interfaces.
 */

// Import and re-export core types from validation schemas
import type {
  OmniClientDTO,
  OmniClientWithNotesDTO,
  CreateOmniClientInput,
  UpdateOmniClientInput,
  GetOmniClientsQuery,
  OmniClientsListResponseDTO,
  OmniClientResponseDTO,
  ClientSuggestion,
  ClientSuggestionsResponse,
  ClientAIInsightsResponse,
  ClientEmailSuggestion,
  ClientNoteSuggestion,
  ClientNoteSuggestionsResponse,
  CreateNoteInput,
  UpdateNoteInput,
  CreatedAtFilter,
  BulkDeleteBody,
  // Legacy Contact types for backward compatibility
  ContactDTO,
  ContactListResponse,
  CreateContactBody,
  UpdateContactBody,
  GetContactsQuery,
  CreateContactInput,
  UpdateContactInput,
  FetchContactsParams,
} from "@/lib/validation/schemas/omniClients";

// Import additional types needed
import type { ColumnDef } from "@tanstack/react-table";

// Re-export the imported types
export type {
  OmniClientDTO,
  OmniClientWithNotesDTO,
  CreateOmniClientInput,
  UpdateOmniClientInput,
  GetOmniClientsQuery,
  OmniClientsListResponseDTO,
  OmniClientResponseDTO,
  ClientSuggestion,
  ClientSuggestionsResponse,
  ClientAIInsightsResponse,
  ClientEmailSuggestion,
  ClientNoteSuggestion,
  ClientNoteSuggestionsResponse,
  CreateNoteInput,
  UpdateNoteInput,
  CreatedAtFilter,
  BulkDeleteBody,
  // Legacy Contact types for backward compatibility
  ContactDTO,
  ContactListResponse,
  CreateContactBody,
  UpdateContactBody,
  GetContactsQuery,
  CreateContactInput,
  UpdateContactInput,
  FetchContactsParams,
};

// Re-export utility function
export { toDateRange } from "@/lib/validation/schemas/omniClients";

// Re-export Zod schemas for validation
export {
  OmniClientSchema,
  OmniClientWithNotesSchema,
  CreateOmniClientSchema,
  UpdateOmniClientSchema,
  GetOmniClientsQuerySchema,
  OmniClientsListResponseSchema,
  OmniClientResponseSchema,
  ClientSuggestionSchema,
  ClientSuggestionsResponseSchema,
  ClientAIInsightsResponseSchema,
  ClientEmailSuggestionSchema,
  ClientNoteSuggestionSchema,
  ClientNoteSuggestionsResponseSchema,
  CreateNoteSchema,
  UpdateNoteSchema,
  CreatedAtFilterSchema,
  BulkDeleteBodySchema,
  ContactDTOSchema,
  ContactListResponseSchema,
  CreateContactBodySchema,
  UpdateContactBodySchema,
  GetContactsQuerySchema,
} from "@/lib/validation/schemas/omniClients";

// --- Additional Validation Schemas for Components ---

import { z } from "zod";

/**
 * Client form validation schemas for UI components
 */
export const ClientFormSchema = z.object({
  displayName: z.string().min(1, "Name is required").max(200, "Name too long").trim(),
  primaryEmail: z.string().email("Invalid email format").nullable().optional().or(z.literal("")),
  primaryPhone: z.string().max(50, "Phone number too long").nullable().optional().or(z.literal("")),
  source: z.enum(["manual", "gmail_import", "upload", "calendar_import"]).optional(),
  stage: z.string().max(100, "Stage too long").nullable().optional().or(z.literal("")),
  tags: z.array(z.string().max(50, "Tag too long")).max(20, "Too many tags").nullable().optional(),
});

export const ClientQuickAddSchema = z.object({
  displayName: z.string().min(1, "Name is required").max(200, "Name too long").trim(),
  primaryEmail: z.string().email("Invalid email format").optional().or(z.literal("")),
  primaryPhone: z.string().max(50, "Phone number too long").optional().or(z.literal("")),
});

export const ClientSearchSchema = z.object({
  query: z.string().max(200, "Search query too long").optional(),
  sortBy: z.enum(["displayName", "createdAt", "updatedAt", "lastInteraction"]).optional(),
  sortOrder: z.enum(["asc", "desc"]).optional(),
  page: z.number().int().min(1).max(1000).optional(),
  pageSize: z.number().int().min(1).max(200).optional(),
  tags: z.array(z.string()).optional(),
  stage: z.array(z.string()).optional(),
  source: z.array(z.string()).optional(),
  hasNotes: z.boolean().optional(),
  hasInteractions: z.boolean().optional(),
  dateRange: z
    .object({
      field: z.enum(["createdAt", "updatedAt", "lastInteraction"]),
      from: z.string().datetime().optional(),
      to: z.string().datetime().optional(),
    })
    .optional(),
});

export const ClientBulkOperationSchema = z.object({
  operation: z.enum(["delete", "enrich", "tag", "stage", "export"]),
  clientIds: z.array(z.string().uuid()).min(1, "At least one client must be selected"),
  options: z.record(z.unknown()).optional(),
});

export const ClientTagUpdateSchema = z.object({
  clientIds: z.array(z.string().uuid()).min(1, "At least one client must be selected"),
  action: z.enum(["add", "remove", "replace"]),
  tags: z.array(z.string().max(50, "Tag too long")).max(20, "Too many tags"),
});

export const ClientStageUpdateSchema = z.object({
  clientIds: z.array(z.string().uuid()).min(1, "At least one client must be selected"),
  stage: z.string().max(100, "Stage too long"),
});

export const ClientExportSchema = z.object({
  format: z.enum(["csv", "excel", "json"]),
  fields: z.array(z.string()).min(1, "At least one field must be selected"),
  includeNotes: z.boolean().optional(),
  includeInteractions: z.boolean().optional(),
  dateRange: z
    .object({
      from: z.string().datetime().optional(),
      to: z.string().datetime().optional(),
    })
    .optional(),
  filters: z
    .object({
      tags: z.array(z.string()).optional(),
      stage: z.array(z.string()).optional(),
      source: z.array(z.string()).optional(),
    })
    .optional(),
});

export const ClientImportSchema = z.object({
  source: z.enum(["csv", "excel", "google_contacts", "calendar"]),
  mapping: z.record(z.string()).optional(),
  skipDuplicates: z.boolean().optional(),
  updateExisting: z.boolean().optional(),
  defaultTags: z.array(z.string().max(50, "Tag too long")).max(20, "Too many tags").optional(),
  defaultStage: z.string().max(100, "Stage too long").optional(),
});

export const ClientNoteFormSchema = z.object({
  title: z.string().max(200, "Title too long").optional(),
  content: z.string().min(1, "Note content is required").max(5000, "Note too long").trim(),
  category: z
    .enum([
      "session_notes",
      "wellness_goals",
      "preferences",
      "concerns",
      "treatment_plan",
      "follow_up",
      "general",
    ])
    .optional(),
  priority: z.enum(["low", "medium", "high"]).optional(),
  isPrivate: z.boolean().optional(),
  tags: z.array(z.string().max(50, "Tag too long")).max(10, "Too many tags").optional(),
});

export const ClientEmailFormSchema = z.object({
  to: z.string().email("Invalid email address"),
  subject: z.string().min(1, "Subject is required").max(200, "Subject too long").trim(),
  content: z.string().min(1, "Email content is required").max(10000, "Email too long").trim(),
  tone: z.enum(["professional", "friendly", "caring", "urgent"]).optional(),
  category: z.enum(["follow-up", "appointment", "wellness", "general"]).optional(),
  isTemplate: z.boolean().optional(),
  templateName: z.string().max(100, "Template name too long").optional(),
});

export const ClientSuggestionActionSchema = z.object({
  suggestionIds: z.array(z.string()).min(1, "At least one suggestion must be selected"),
  action: z.enum(["accept", "reject", "ignore"]),
  customTags: z.array(z.string().max(50, "Tag too long")).max(10, "Too many tags").optional(),
  customStage: z.string().max(100, "Stage too long").optional(),
});

export const ClientWellnessProfileSchema = z.object({
  clientId: z.string().uuid(),
  goals: z.array(z.string().max(200, "Goal too long")).max(10, "Too many goals").optional(),
  preferences: z
    .array(z.string().max(200, "Preference too long"))
    .max(15, "Too many preferences")
    .optional(),
  concerns: z
    .array(z.string().max(200, "Concern too long"))
    .max(10, "Too many concerns")
    .optional(),
  treatmentHistory: z
    .array(z.string().max(500, "History entry too long"))
    .max(20, "Too many history entries")
    .optional(),
  nextSteps: z
    .array(z.string().max(200, "Next step too long"))
    .max(10, "Too many next steps")
    .optional(),
  lastAssessment: z.string().datetime().optional(),
  confidence: z.number().min(0).max(1).optional(),
});

export const ClientNotificationPreferencesSchema = z.object({
  emailUpdates: z.boolean().optional(),
  smsUpdates: z.boolean().optional(),
  appointmentReminders: z.boolean().optional(),
  wellnessTips: z.boolean().optional(),
  followUpReminders: z.boolean().optional(),
  marketingEmails: z.boolean().optional(),
  frequency: z.enum(["immediate", "daily", "weekly", "monthly"]).optional(),
});

export const ClientRelationshipSchema = z.object({
  clientId: z.string().uuid(),
  relatedClientId: z.string().uuid(),
  relationshipType: z.enum(["family", "friend", "colleague", "referral", "other"]),
  notes: z.string().max(500, "Notes too long").optional(),
});

// --- TypeScript Types for Validation Schemas ---

export type ClientFormData = z.infer<typeof ClientFormSchema>;
export type ClientQuickAddData = z.infer<typeof ClientQuickAddSchema>;
export type ClientSearchData = z.infer<typeof ClientSearchSchema>;
export type ClientBulkOperationData = z.infer<typeof ClientBulkOperationSchema>;
export type ClientTagUpdateData = z.infer<typeof ClientTagUpdateSchema>;
export type ClientStageUpdateData = z.infer<typeof ClientStageUpdateSchema>;
export type ClientExportData = z.infer<typeof ClientExportSchema>;
export type ClientImportData = z.infer<typeof ClientImportSchema>;
export type ClientNoteFormData = z.infer<typeof ClientNoteFormSchema>;
export type ClientEmailFormData = z.infer<typeof ClientEmailFormSchema>;
export type ClientSuggestionActionData = z.infer<typeof ClientSuggestionActionSchema>;
export type ClientWellnessProfileData = z.infer<typeof ClientWellnessProfileSchema>;
export type ClientNotificationPreferencesData = z.infer<typeof ClientNotificationPreferencesSchema>;
export type ClientRelationshipData = z.infer<typeof ClientRelationshipSchema>;

// --- Validation Utility Functions ---

/**
 * Validation helper functions for components
 */
export const validationHelpers = {
  /**
   * Validate client form data
   */
  validateClientForm: (data: unknown) => {
    try {
      return { success: true, data: ClientFormSchema.parse(data) };
    } catch (error) {
      if (error instanceof z.ZodError) {
        return { success: false, errors: error.errors };
      }
      return { success: false, errors: [{ message: "Validation failed" }] };
    }
  },

  /**
   * Validate client quick add data
   */
  validateClientQuickAdd: (data: unknown) => {
    try {
      return { success: true, data: ClientQuickAddSchema.parse(data) };
    } catch (error) {
      if (error instanceof z.ZodError) {
        return { success: false, errors: error.errors };
      }
      return { success: false, errors: [{ message: "Validation failed" }] };
    }
  },

  /**
   * Validate search parameters
   */
  validateSearchParams: (data: unknown) => {
    try {
      return { success: true, data: ClientSearchSchema.parse(data) };
    } catch (error) {
      if (error instanceof z.ZodError) {
        return { success: false, errors: error.errors };
      }
      return { success: false, errors: [{ message: "Validation failed" }] };
    }
  },

  /**
   * Validate note form data
   */
  validateNoteForm: (data: unknown) => {
    try {
      return { success: true, data: ClientNoteFormSchema.parse(data) };
    } catch (error) {
      if (error instanceof z.ZodError) {
        return { success: false, errors: error.errors };
      }
      return { success: false, errors: [{ message: "Validation failed" }] };
    }
  },

  /**
   * Validate email form data
   */
  validateEmailForm: (data: unknown) => {
    try {
      return { success: true, data: ClientEmailFormSchema.parse(data) };
    } catch (error) {
      if (error instanceof z.ZodError) {
        return { success: false, errors: error.errors };
      }
      return { success: false, errors: [{ message: "Validation failed" }] };
    }
  },

  /**
   * Validate bulk operation data
   */
  validateBulkOperation: (data: unknown) => {
    try {
      return { success: true, data: ClientBulkOperationSchema.parse(data) };
    } catch (error) {
      if (error instanceof z.ZodError) {
        return { success: false, errors: error.errors };
      }
      return { success: false, errors: [{ message: "Validation failed" }] };
    }
  },

  /**
   * Get field-specific error message
   */
  getFieldError: (errors: z.ZodIssue[], fieldPath: string): string | undefined => {
    const fieldError = errors.find((error) => {
      const errorPath = error.path?.join(".");
      return errorPath === fieldPath;
    });
    return fieldError?.message;
  },

  /**
   * Check if form has any errors
   */
  hasErrors: (errors: z.ZodError[]): boolean => {
    return errors.length > 0;
  },

  /**
   * Get all error messages as a flat array
   */
  getAllErrors: (errors: z.ZodError[]): string[] => {
    return errors.map((error) => error.message);
  },

  /**
   * Get errors grouped by field
   */
  getErrorsByField: (errors: z.ZodIssue[]): Record<string, string[]> => {
    const grouped: Record<string, string[]> = {};
    errors.forEach((error) => {
      const fieldPath = error.path?.join(".") ?? "unknown";
      grouped[fieldPath] ??= [];
      grouped[fieldPath]?.push(error.message);
    });
    return grouped;
  },
};

// --- Component-Specific Types ---

/**
 * Alias for backward compatibility - components can use either name
 */
export type ClientWithNotes = OmniClientWithNotesDTO;

/**
 * Exportable client data for CSV/Excel export functionality
 */
export interface ExportableClientData {
  id: string;
  displayName: string;
  primaryEmail: string | null;
  primaryPhone: string | null;
  source: string | null;
  stage: string | null;
  tags: string[] | null;
  confidenceScore: string | null;
  notesCount: number;
  lastNote: string | null;
  interactions: number | undefined;
  createdAt: string;
  updatedAt: string;
}

/**
 * Dialog component props
 */
export interface ClientAIInsightsDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  insights: ClientAIInsightsResponse | null;
  isLoading: boolean;
  clientName: string;
}

export interface ClientEmailDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  emailSuggestion: ClientEmailSuggestion | null;
  isLoading: boolean;
  clientName: string;
  clientEmail: string | undefined;
}

export interface ClientNoteSuggestionsDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  suggestions: ClientNoteSuggestion[] | null;
  isLoading: boolean;
  clientName: string;
}

/**
 * Table component props
 */
export interface DataTableProps<TData, TValue> {
  columns: ColumnDef<TData, TValue>[];
  data: TData[];
}

/**
 * Client action handlers
 */
export interface ClientActionHandlers {
  onEdit: (client: ClientWithNotes) => void;
  onDelete: (client: ClientWithNotes) => void;
  onViewNotes: (client: ClientWithNotes) => void;
  onSendEmail: (client: ClientWithNotes) => void;
  onAskAI: (client: ClientWithNotes) => void;
  onGenerateEmail: (client: ClientWithNotes) => void;
  onCreateNote: (client: ClientWithNotes) => void;
}

/**
 * Bulk action handlers
 */
export interface BulkActionHandlers {
  onBulkDelete: (clientIds: string[]) => void;
  onBulkEnrich: (clientIds: string[]) => void;
  onSelectAll: () => void;
  onClearSelection: () => void;
}

/**
 * Search and filter state
 */
export interface SearchFilterState {
  searchQuery: string;
  sortBy: "displayName" | "createdAt";
  sortOrder: "asc" | "desc";
  page: number;
  pageSize: number;
  showSuggestions: boolean;
}

/**
 * Client statistics for dashboard cards
 */
export interface ClientStats {
  totalClients: number;
  activeClients: number;
  newThisWeek: number;
  totalInteractions: number;
  averageSatisfaction: number;
}

/**
 * Client enrichment status
 */
export interface ClientEnrichmentStatus {
  clientId: string;
  status: "pending" | "processing" | "completed" | "failed";
  progress: number; // 0-100
  error?: string;
  lastUpdated: string;
}

/**
 * Client interaction history
 */
export interface ClientInteraction {
  id: string;
  type: "email" | "note" | "call" | "meeting" | "other";
  title: string;
  content: string;
  timestamp: string;
  userId: string;
  metadata?: Record<string, unknown>;
}

/**
 * Client wellness profile
 */
export interface ClientWellnessProfile {
  clientId: string;
  goals: string[];
  preferences: string[];
  concerns: string[];
  treatmentHistory: string[];
  nextSteps: string[];
  lastAssessment: string;
  confidence: number; // 0-1
}

/**
 * AI-generated insights for a client
 */
export interface ClientInsights {
  wellnessGoals: string[];
  preferences: string[];
  engagementLevel: string;
  risks: string[];
  opportunities: string[];
  nextSteps: string[];
  confidence: number;
  generatedAt: string;
}

/**
 * Email template for client communication
 */
export interface ClientEmailTemplate {
  id: string;
  name: string;
  subject: string;
  content: string;
  tone: "professional" | "friendly" | "caring" | "urgent";
  category: "follow-up" | "appointment" | "wellness" | "general";
  isDefault: boolean;
  createdAt: string;
  updatedAt: string;
}

/**
 * Client note categories
 */
export type NoteCategory =
  | "session_notes"
  | "wellness_goals"
  | "preferences"
  | "concerns"
  | "treatment_plan"
  | "follow_up"
  | "general";

/**
 * Client note with enhanced metadata
 */
export interface ClientNote {
  id: string;
  clientId: string;
  title: string;
  content: string;
  category: NoteCategory;
  priority: "low" | "medium" | "high";
  isPrivate: boolean;
  tags: string[];
  createdAt: string;
  updatedAt: string;
  createdBy: string;
  lastModifiedBy: string;
}

/**
 * Client suggestion with enhanced metadata
 */
export interface EnhancedClientSuggestion {
  id: string;
  displayName: string;
  email: string;
  eventCount: number;
  lastEventDate: string;
  eventTitles: string[];
  confidence: "low" | "medium" | "high";
  source: "calendar_attendee" | "email_contact" | "referral" | "import";
  suggestedTags: string[];
  suggestedStage: string;
  confidenceBreakdown: {
    email: number;
    name: number;
    frequency: number;
    recency: number;
  };
  metadata: {
    sourceEventIds: string[];
    sourceEmailIds: string[];
    lastInteraction: string;
  };
}

/**
 * Client import/export options
 */
export interface ClientImportOptions {
  source: "csv" | "excel" | "google_contacts" | "calendar";
  mapping: Record<string, string>;
  skipDuplicates: boolean;
  updateExisting: boolean;
  defaultTags: string[];
  defaultStage: string;
}

export interface ClientExportOptions {
  format: "csv" | "excel" | "json";
  fields: string[];
  includeNotes: boolean;
  includeInteractions: boolean;
  dateRange?: {
    from: string;
    to: string;
  };
  filters?: {
    tags?: string[];
    stage?: string[];
    source?: string[];
  };
}

/**
 * Client search and filtering
 */
export interface ClientSearchFilters {
  query?: string;
  tags?: string[];
  stage?: string[];
  source?: string[];
  dateRange?: {
    field: "createdAt" | "updatedAt" | "lastInteraction";
    from: string;
    to: string;
  };
  hasNotes?: boolean;
  hasInteractions?: boolean;
  confidenceScore?: {
    min: number;
    max: number;
  };
}

/**
 * Client table column configuration
 */
export interface ClientColumnConfig {
  id: string;
  label: string;
  sortable: boolean;
  filterable: boolean;
  visible: boolean;
  width?: number;
  align?: "left" | "center" | "right";
}

/**
 * Client bulk operations
 */
export interface ClientBulkOperation {
  type: "delete" | "enrich" | "tag" | "stage" | "export";
  clientIds: string[];
  options?: Record<string, unknown>;
  status: "pending" | "processing" | "completed" | "failed";
  progress: number;
  results?: {
    successful: string[];
    failed: string[];
    errors: Record<string, string>;
  };
  createdAt: string;
  completedAt?: string;
}

/**
 * Client notification preferences
 */
export interface ClientNotificationPreferences {
  emailUpdates: boolean;
  smsUpdates: boolean;
  appointmentReminders: boolean;
  wellnessTips: boolean;
  followUpReminders: boolean;
  marketingEmails: boolean;
  frequency: "immediate" | "daily" | "weekly" | "monthly";
}

/**
 * Client relationship mapping
 */
export interface ClientRelationship {
  id: string;
  clientId: string;
  relatedClientId: string;
  relationshipType: "family" | "friend" | "colleague" | "referral" | "other";
  notes?: string;
  createdAt: string;
  createdBy: string;
}

/**
 * Client activity timeline
 */
export interface ClientActivity {
  id: string;
  clientId: string;
  type: "created" | "updated" | "note_added" | "email_sent" | "appointment_scheduled" | "enriched";
  title: string;
  description: string;
  timestamp: string;
  userId: string;
  metadata?: Record<string, unknown>;
}

/**
 * Client dashboard summary
 */
export interface ClientDashboardSummary {
  totalClients: number;
  activeClients: number;
  newThisWeek: number;
  newThisMonth: number;
  totalInteractions: number;
  averageSatisfaction: number;
  topTags: Array<{ tag: string; count: number }>;
  recentActivity: ClientActivity[];
  upcomingAppointments: number;
  pendingFollowUps: number;
  wellnessGoals: Array<{ goal: string; clients: number }>;
  riskFactors: Array<{ factor: string; clients: number }>;
}


/* ===== src/app/(authorisedRoute)/omni-clients/[slug]/_components/ClientDetailPage.tsx ===== */

"use client";

import { useState } from "react";
import { useQuery, useQueryClient } from "@tanstack/react-query";
import { useRouter } from "next/navigation";
import { formatDistanceToNow } from "date-fns";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Avatar, AvatarImage, AvatarFallback } from "@/components/ui/avatar";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Textarea } from "@/components/ui/textarea";
import { Label } from "@/components/ui/label";
import {
  ArrowLeft,
  Mail,
  Phone,
  Edit,
  Trash2,
  Plus,
  Sparkles,
  NotebookPen,
  User,
  Activity,
  MessageSquare,
  Clock,
} from "lucide-react";
import { apiClient } from "@/lib/api/client";
import { toast } from "sonner";
import { ClientAIInsightsDialog } from "../../_components/ClientAIInsightsDialog";
import { ClientEmailDialog } from "../../_components/ClientEmailDialog";
import {
  useAskAIAboutOmniClient,
  useGenerateOmniClientEmailSuggestion,
  useCreateOmniClientNote,
  useDeleteOmniClient,
} from "@/hooks/use-omni-clients-bridge";
import {
  type ClientAIInsightsResponse,
  type ClientEmailSuggestion,
  type OmniClientWithNotesDTO,
} from "@/lib/validation/schemas/omniClients";

interface ClientDetailPageProps {
  clientId: string;
}

interface ClientNote {
  id: string;
  content: string;
  createdAt: string;
  updatedAt: string;
}

// Helper function to generate initials from display name
function getInitials(displayName: string): string {
  if (!displayName) return "?";
  const names = displayName.trim().split(/\s+/).filter(Boolean);
  if (names.length === 0) return "?";
  if (names.length === 1) {
    return names[0]!.charAt(0).toUpperCase();
  }
  return `${names[0]!.charAt(0)}${names[names.length - 1]!.charAt(0)}`.toUpperCase();
}

/**
 * Comprehensive Client Detail Page Component
 * Full client profile with notes, interactions, and AI features
 */
export function ClientDetailPage({ clientId }: ClientDetailPageProps): JSX.Element {
  // All hooks must be called at the top of the component before any conditional logic
  const router = useRouter();
  const queryClient = useQueryClient();

  // State management
  const [activeTab, setActiveTab] = useState("overview");
  const [isAddingNote, setIsAddingNote] = useState(false);
  const [newNoteContent, setNewNoteContent] = useState("");
  const [aiInsightsOpen, setAiInsightsOpen] = useState(false);
  const [emailDialogOpen, setEmailDialogOpen] = useState(false);
  const [aiInsights, setAiInsights] = useState<ClientAIInsightsResponse | null>(null);
  const [emailSuggestion, setEmailSuggestion] = useState<ClientEmailSuggestion | null>(null);

  // Fetch client data
  const {
    data: client,
    isLoading: clientLoading,
    error: clientError,
  } = useQuery({
    queryKey: [`/api/omni-clients/${clientId}`],
    queryFn: async (): Promise<OmniClientWithNotesDTO> => {
      const response = await apiClient.get<{ item: OmniClientWithNotesDTO }>(
        `/api/omni-clients/${clientId}`,
      );
      return response.item;
    },
  });

  // Fetch client notes
  const { data: notes, isLoading: notesLoading } = useQuery({
    queryKey: [`/api/omni-clients/${clientId}/notes`],
    queryFn: async (): Promise<ClientNote[]> => {
      const response = await apiClient.get<{ notes: ClientNote[] }>(
        `/api/omni-clients/${clientId}/notes`,
      );
      return response.notes;
    },
  });

  // Mutations - moved before conditional returns to comply with Rules of Hooks
  const askAIMutation = useAskAIAboutOmniClient();
  const generateEmailMutation = useGenerateOmniClientEmailSuggestion();
  const createNoteMutation = useCreateOmniClientNote();
  const deleteClientMutation = useDeleteOmniClient();

  // Loading state
  if (clientLoading) {
    return (
      <div className="container mx-auto py-6">
        <div className="flex items-center justify-center h-64">
          <div className="text-muted-foreground">Loading client details...</div>
        </div>
      </div>
    );
  }

  // Error state
  if (clientError || !client) {
    return (
      <div className="container mx-auto py-6">
        <div className="text-center">
          <h1 className="text-2xl font-semibold">Client Not Found</h1>
          <p className="text-muted-foreground mt-2">
            The client you&apos;re looking for doesn&apos;t exist or you don&apos;t have access to
            it.
          </p>
          <Button onClick={() => router.push("/omni-clients")} className="mt-4">
            <ArrowLeft className="h-4 w-4 mr-2" />
            Back to Clients
          </Button>
        </div>
      </div>
    );
  }

  // Type assertion after null check - we know client exists here
  const safeClient = client as OmniClientWithNotesDTO;
  const initials = getInitials(safeClient.displayName);

  // Handlers
  const handleAskAI = async (): Promise<void> => {
    try {
      setAiInsightsOpen(true);
      const insights = await askAIMutation.mutateAsync(clientId);
      setAiInsights(insights);
    } catch {
      setAiInsightsOpen(false);
    }
  };

  const handleSendEmail = async (): Promise<void> => {
    if (!safeClient.primaryEmail) {
      toast.error("This client has no email address");
      return;
    }

    try {
      setEmailDialogOpen(true);
      const suggestion = await generateEmailMutation.mutateAsync({
        contactId: clientId,
      });
      setEmailSuggestion(suggestion);
    } catch {
      setEmailDialogOpen(false);
    }
  };

  const handleAddNote = async (): Promise<void> => {
    if (!newNoteContent.trim()) {
      toast.error("Please enter a note");
      return;
    }

    try {
      await createNoteMutation.mutateAsync({
        contactId: clientId,
        content: newNoteContent.trim(),
      });
      setIsAddingNote(false);
      setNewNoteContent("");
      await queryClient.invalidateQueries({ queryKey: [`/api/omni-clients/${clientId}/notes`] });
    } catch {
      // Error handled by mutation
    }
  };

  const handleDeleteClient = (): void => {
    if (
      confirm(
        `Are you sure you want to delete ${safeClient.displayName}? This action cannot be undone.`,
      )
    ) {
      deleteClientMutation.mutate(clientId, {
        onSuccess: () => {
          router.push("/omni-clients");
        },
      });
    }
  };

  return (
    <div className="container mx-auto py-6 space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-4">
          <Button
            variant="ghost"
            onClick={() => router.push("/omni-clients")}
            className="h-8 w-8 p-0"
          >
            <ArrowLeft className="h-4 w-4" />
          </Button>
          <div className="flex items-center space-x-4">
            <Avatar className="h-16 w-16">
              <AvatarImage
                src={`/api/omni-clients/${safeClient.id}/avatar`}
                alt={`${safeClient.displayName} avatar`}
              />
              <AvatarFallback className="text-lg font-medium bg-gradient-to-br from-blue-100 to-purple-100 text-blue-700 dark:from-blue-900 dark:to-purple-900 dark:text-blue-300">
                {initials}
              </AvatarFallback>
            </Avatar>
            <div>
              <h1 className="text-3xl font-bold tracking-tight">{safeClient.displayName}</h1>
              <p className="text-muted-foreground">
                Client since {new Date(safeClient.createdAt).toLocaleDateString()}
              </p>
            </div>
          </div>
        </div>

        {/* Action Buttons */}
        <div className="flex items-center space-x-2">
          <Button variant="outline" onClick={handleAskAI}>
            <Sparkles className="h-4 w-4 mr-2" />
            Ask AI
          </Button>
          <Button variant="outline" onClick={handleSendEmail} disabled={!safeClient.primaryEmail}>
            <Mail className="h-4 w-4 mr-2" />
            Send Email
          </Button>
          <Button variant="outline" onClick={() => setIsAddingNote(true)}>
            <NotebookPen className="h-4 w-4 mr-2" />
            Add Note
          </Button>
          <Button variant="outline">
            <Edit className="h-4 w-4 mr-2" />
            Edit
          </Button>
          <Button variant="destructive" onClick={handleDeleteClient}>
            <Trash2 className="h-4 w-4 mr-2" />
            Delete
          </Button>
        </div>
      </div>

      {/* Main Content */}
      <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-6">
        <TabsList className="grid w-full grid-cols-4">
          <TabsTrigger value="overview">Overview</TabsTrigger>
          <TabsTrigger value="notes">Notes ({notes?.length ?? 0})</TabsTrigger>
          <TabsTrigger value="interactions">Interactions</TabsTrigger>
          <TabsTrigger value="insights">AI Insights</TabsTrigger>
        </TabsList>

        {/* Overview Tab */}
        <TabsContent value="overview" className="space-y-6">
          <div className="grid gap-6 md:grid-cols-2">
            {/* Contact Information */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center">
                  <User className="h-5 w-5 mr-2" />
                  Contact Information
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                {safeClient.primaryEmail && (
                  <div className="flex items-center space-x-3">
                    <Mail className="h-4 w-4 text-muted-foreground" />
                    <span>{safeClient.primaryEmail}</span>
                  </div>
                )}
                {safeClient.primaryPhone && (
                  <div className="flex items-center space-x-3">
                    <Phone className="h-4 w-4 text-muted-foreground" />
                    <span>{safeClient.primaryPhone}</span>
                  </div>
                )}
                <div className="flex items-center space-x-3">
                  <Clock className="h-4 w-4 text-muted-foreground" />
                  <span>
                    Last updated{" "}
                    {formatDistanceToNow(new Date(safeClient.updatedAt), { addSuffix: true })}
                  </span>
                </div>
              </CardContent>
            </Card>

            {/* Wellness Profile */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center">
                  <Activity className="h-5 w-5 mr-2" />
                  Wellness Profile
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                {safeClient.stage && (
                  <div>
                    <Label className="text-sm font-medium">Stage</Label>
                    <div className="mt-1">
                      <Badge variant="secondary">{safeClient.stage}</Badge>
                    </div>
                  </div>
                )}
                {safeClient.tags && safeClient.tags.length > 0 && (
                  <div>
                    <Label className="text-sm font-medium">Tags</Label>
                    <div className="mt-1 flex flex-wrap gap-1">
                      {safeClient.tags.map((tag: string, index: number) => (
                        <Badge key={index} variant="outline" className="text-xs">
                          {tag}
                        </Badge>
                      ))}
                    </div>
                  </div>
                )}
              </CardContent>
            </Card>
          </div>

          {/* Recent Notes */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center justify-between">
                <div className="flex items-center">
                  <MessageSquare className="h-5 w-5 mr-2" />
                  Recent Notes
                </div>
                <Button variant="outline" size="sm" onClick={() => setActiveTab("notes")}>
                  View All
                </Button>
              </CardTitle>
            </CardHeader>
            <CardContent>
              {notesLoading ? (
                <div className="text-muted-foreground">Loading notes...</div>
              ) : notes && notes.length > 0 ? (
                <div className="space-y-3">
                  {notes.slice(0, 3).map((note) => (
                    <div key={note.id} className="border-l-2 border-blue-200 pl-4">
                      <p className="text-sm">{note.content}</p>
                      <p className="text-xs text-muted-foreground mt-1">
                        {formatDistanceToNow(new Date(note.createdAt), { addSuffix: true })}
                      </p>
                    </div>
                  ))}
                </div>
              ) : (
                <p className="text-muted-foreground">
                  No notes yet. Add your first note to track interactions.
                </p>
              )}
            </CardContent>
          </Card>
        </TabsContent>

        {/* Notes Tab */}
        <TabsContent value="notes" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center justify-between">
                <div className="flex items-center">
                  <MessageSquare className="h-5 w-5 mr-2" />
                  All Notes
                </div>
                <Button onClick={() => setIsAddingNote(true)}>
                  <Plus className="h-4 w-4 mr-2" />
                  Add Note
                </Button>
              </CardTitle>
            </CardHeader>
            <CardContent>
              {notesLoading ? (
                <div className="text-muted-foreground">Loading notes...</div>
              ) : notes && notes.length > 0 ? (
                <div className="space-y-4">
                  {notes.map((note) => (
                    <div key={note.id} className="border rounded-lg p-4">
                      <p className="whitespace-pre-wrap">{note.content}</p>
                      <div className="flex items-center justify-between mt-3 text-xs text-muted-foreground">
                        <span>
                          {formatDistanceToNow(new Date(note.createdAt), { addSuffix: true })}
                        </span>
                        {note.updatedAt !== note.createdAt && (
                          <span>
                            Edited{" "}
                            {formatDistanceToNow(new Date(note.updatedAt), { addSuffix: true })}
                          </span>
                        )}
                      </div>
                    </div>
                  ))}
                </div>
              ) : (
                <div className="text-center py-8">
                  <MessageSquare className="h-12 w-12 mx-auto mb-4 opacity-50" />
                  <p className="text-muted-foreground">No notes yet</p>
                  <p className="text-sm text-muted-foreground">
                    Add your first note to track interactions with this client
                  </p>
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>

        {/* Interactions Tab */}
        <TabsContent value="interactions">
          <Card>
            <CardHeader>
              <CardTitle>Interaction History</CardTitle>
              <CardDescription>
                Track all interactions and touchpoints with this client
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="text-center py-8">
                <Activity className="h-12 w-12 mx-auto mb-4 opacity-50" />
                <p className="text-muted-foreground">Interaction tracking coming soon</p>
                <p className="text-sm text-muted-foreground">
                  This will show emails, appointments, and other interactions
                </p>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        {/* AI Insights Tab */}
        <TabsContent value="insights">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center">
                <Sparkles className="h-5 w-5 mr-2" />
                AI Insights
              </CardTitle>
              <CardDescription>
                AI-powered insights and recommendations for this client
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="text-center py-8">
                <Button onClick={handleAskAI} disabled={askAIMutation.isPending}>
                  <Sparkles className="h-4 w-4 mr-2" />
                  {askAIMutation.isPending ? "Generating Insights..." : "Generate AI Insights"}
                </Button>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>

      {/* Add Note Dialog */}
      <Dialog open={isAddingNote} onOpenChange={setIsAddingNote}>
        <DialogContent className="sm:max-w-[425px]">
          <DialogHeader>
            <DialogTitle>Add Note for {safeClient.displayName}</DialogTitle>
            <DialogDescription>
              Add a new note to track interactions or observations about this client.
            </DialogDescription>
          </DialogHeader>
          <div className="grid gap-4 py-4">
            <div className="grid gap-2">
              <Label htmlFor="note">Note Content</Label>
              <Textarea
                id="note"
                value={newNoteContent}
                onChange={(e) => setNewNoteContent(e.target.value)}
                placeholder="Enter your note here..."
                className="min-h-[100px]"
              />
            </div>
          </div>
          <DialogFooter>
            <Button
              variant="outline"
              onClick={() => {
                setIsAddingNote(false);
                setNewNoteContent("");
              }}
            >
              Cancel
            </Button>
            <Button
              onClick={handleAddNote}
              disabled={createNoteMutation.isPending || !newNoteContent.trim()}
            >
              {createNoteMutation.isPending ? "Adding..." : "Add Note"}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* AI Dialogs */}
      <ClientAIInsightsDialog
        open={aiInsightsOpen}
        onOpenChange={setAiInsightsOpen}
        insights={aiInsights}
        isLoading={askAIMutation.isPending}
        clientName={safeClient.displayName}
      />

      <ClientEmailDialog
        open={emailDialogOpen}
        onOpenChange={setEmailDialogOpen}
        emailSuggestion={emailSuggestion}
        isLoading={generateEmailMutation.isPending}
        clientName={safeClient.displayName}
        clientEmail={safeClient.primaryEmail ?? undefined}
      />
    </div>
  );
}


/* ===== src/app/(authorisedRoute)/omni-clients/[slug]/page.tsx ===== */

import type { Metadata } from "next";
import { redirect, notFound } from "next/navigation";
import { getServerUserId } from "@/server/auth/user";
import { getDb } from "@/server/db/client";
import { contacts, type Contact } from "@/server/db/schema";
import { eq, and } from "drizzle-orm";
import { ClientDetailPage } from "./_components/ClientDetailPage";

interface ClientDetailProps {
  params: Promise<{ slug: string }>;
}

/**
 * Fetch client data by slug
 */
async function getClientBySlug(userId: string, slug: string): Promise<Contact | never> {
  const db = await getDb();

  const clientData = await db
    .select()
    .from(contacts)
    .where(and(eq(contacts.userId, userId), eq(contacts.slug, slug)))
    .limit(1);

  if (clientData.length === 0) {
    notFound();
  }

  return clientData[0]!;
}

/**
 * Server Component for OmniClient Detail with Slug-based URLs
 * Handles server-side authentication and fetches client data by slug
 * Renders the ClientDetailPage component with clean URLs like /omni-clients/sarah-johnson
 */
export default async function Page({ params }: ClientDetailProps): Promise<React.ReactNode> {
  // Server-side authentication check
  let userId: string;
  try {
    userId = await getServerUserId();
  } catch {
    const { slug } = await params;
    redirect(`/login?next=/omni-clients/${slug}`);
  }

  // Await params and validate slug
  const { slug } = await params;
  if (!slug || typeof slug !== "string") {
    notFound();
  }

  // Fetch client data by slug
  const client = await getClientBySlug(userId, slug);

  // TypeScript doesn't understand that getClientBySlug throws via notFound()
  // so we add an explicit check even though it's technically unreachable
  if (!client) {
    notFound();
  }

  // Server component renders ClientDetailPage component
  // All interactive functionality is handled by ClientDetailPage
  return <ClientDetailPage clientId={client.id} />;
}

/**
 * Generate dynamic metadata for better SEO
 */
export async function generateMetadata({ params }: ClientDetailProps): Promise<Metadata> {
  try {
    const userId = await getServerUserId();
    const { slug } = await params;

    if (!slug) {
      return { title: "Client Not Found · OmniCRM" };
    }

    const client = await getClientBySlug(userId, slug);

    // TypeScript doesn't understand that getClientBySlug throws via notFound()
    // so we add an explicit check even though it's technically unreachable
    if (!client) {
      return { title: "Client Not Found · OmniCRM" };
    }

    return {
      title: `${client.displayName} | OmniClients · OmniCRM`,
      description: `Contact details and wellness insights for ${client.displayName}. Manage interactions, notes, and client relationship data.`,
      openGraph: {
        title: `${client.displayName} | OmniClients`,
        description: `Contact details for ${client.displayName}`,
      },
    };
  } catch {
    return {
      title: "Client Detail · OmniCRM",
      description: "Client details and wellness insights",
    };
  }
}


/* ===== src/app/(authorisedRoute)/omni-clients/layout.tsx ===== */

import type { Metadata } from "next";
import { redirect } from "next/navigation";
import { getServerUserId } from "@/server/auth/user";

export const metadata: Metadata = {
  title: "OmniClients · OmniCRM",
};

export default async function OmniClientsLayout({
  children,
}: {
  children: React.ReactNode;
}): Promise<React.ReactNode> {
  try {
    await getServerUserId();
  } catch {
    redirect("/login?next=/omni-clients");
  }
  return children;
}


/* ===== src/app/(authorisedRoute)/omni-clients/page.tsx ===== */

import type { Metadata } from "next";
import { redirect } from "next/navigation";
import { getServerUserId } from "@/server/auth/user";
import { OmniClientsPage } from "./_components/OmniClientsPage";

export const metadata: Metadata = {
  title: "OmniClients · OmniCRM",
  description:
    "AI-powered OmniClient management with calendar integration and smart insights for wellness practitioners",
};

/**
 * Server Component for OmniClients
 * Handles server-side authentication and initial data setup
 * Renders the OmniClientsPage component
 */
export default async function Page(): Promise<React.ReactNode> {
  // Server-side authentication check
  try {
    await getServerUserId();
  } catch {
    redirect("/login?next=/omni-clients");
  }

  // Server component renders OmniClientsPage component
  // All interactive functionality is handled by OmniClientsPage
  return <OmniClientsPage />;
}


/* ===== src/app/(authorisedRoute)/omni-connect/_components/analytics/AIInsightsCard.tsx ===== */

"use client";

import type { JSX } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";

export function AIInsightsCard(): JSX.Element {
  return (
    <Card>
      <CardHeader>
        <CardTitle>💡 AI Insights</CardTitle>
      </CardHeader>
      <CardContent className="text-sm space-y-2">
        <p>
          Actionable observations based on this week&apos;s communications, prioritized by impact on
          business goals.
        </p>
        <ul className="list-disc pl-4 space-y-1">
          <li>Follow up on 5 high‑value leads with no reply in 3 days.</li>
          <li>Clients mention “evening availability” 12× — consider adding later classes.</li>
          <li>Recurring billing questions up 18% — add a short FAQ to onboarding.</li>
        </ul>
      </CardContent>
    </Card>
  );
}


/* ===== src/app/(authorisedRoute)/omni-connect/_components/analytics/CategorizationStatusCard.tsx ===== */

"use client";

import type { JSX } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";

export function CategorizationStatusCard(): JSX.Element {
  return (
    <Card>
      <CardHeader>
        <CardTitle>🤖 Email Categorization Status</CardTitle>
      </CardHeader>
      <CardContent className="space-y-2 text-sm">
        <div className="flex justify-between border rounded p-2">
          <span>✅ Client Communications</span>
          <span>23 emails • 94% conf</span>
        </div>
        <div className="flex justify-between border rounded p-2">
          <span>✅ Business Intelligence</span>
          <span>15 emails • 91% conf</span>
        </div>
        <div className="flex justify-between border rounded p-2">
          <span>✅ Educational Content</span>
          <span>31 emails • 87% conf</span>
        </div>
        <div className="flex justify-between border rounded p-2">
          <span>⏳ Pending Review</span>
          <span>7 emails • 65% conf</span>
        </div>
        <div className="flex gap-2 pt-2">
          <Button size="sm" variant="outline">
            🔍 Review Pending
          </Button>
          <Button size="sm" variant="secondary">
            📈 View Trends
          </Button>
        </div>
      </CardContent>
    </Card>
  );
}


/* ===== src/app/(authorisedRoute)/omni-connect/_components/analytics/WeeklyIntelligenceSummaryCard.tsx ===== */

"use client";

import type { JSX } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";

export function WeeklyIntelligenceSummaryCard(): JSX.Element {
  return (
    <Card>
      <CardHeader>
        <CardTitle>📊 This Week&apos;s Intelligence Summary</CardTitle>
      </CardHeader>
      <CardContent className="text-sm space-y-2">
        <ul className="list-disc pl-4 space-y-1">
          <li>47 emails processed and categorized</li>
          <li>12 client communications auto-organized</li>
          <li>3 new marketing insights saved to wiki</li>
          <li>2 email sequences running smoothly</li>
        </ul>
        <div className="pt-2">
          <Button size="sm" variant="outline">
            View More
          </Button>
        </div>
      </CardContent>
    </Card>
  );
}


/* ===== src/app/(authorisedRoute)/omni-connect/_components/ConnectConnectionStatusCard.tsx ===== */

"use client";

import type { JSX } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { LucideCircleCheckBig, AlertCircle, RefreshCw } from "lucide-react";
import { format } from "date-fns";

interface GmailConnectionStatus {
  isConnected: boolean;
  lastSync?: string | undefined;
  emailCount?: number | undefined;
  contactCount?: number | undefined;
  error?: string | undefined;
}

interface ConnectConnectionStatusCardProps {
  status: GmailConnectionStatus;
  isSyncing?: boolean;
  onSyncNow?: () => void;
  lastSyncStats?: { inserted: number; processed: number } | null;
}

export function ConnectConnectionStatusCard({
  status,
  isSyncing = false,
  onSyncNow,
  lastSyncStats,
}: ConnectConnectionStatusCardProps): JSX.Element {
  return (
    <Card>
      <CardHeader className="pb-1">
        <div className="flex items-center justify-between">
          <CardTitle className="text-sm font-medium flex items-center gap-2 text-green-600">
            <LucideCircleCheckBig className="h-4 w-4" />
            Gmail Connected
          </CardTitle>
          {onSyncNow && status.isConnected && (
            <Badge
              variant="outline"
              className="cursor-pointer hover:bg-accent transition-colors px-2 py-1"
              onClick={onSyncNow}
            >
              <RefreshCw className={`h-3 w-3 mr-1 ${isSyncing ? "animate-spin" : ""}`} />
              {isSyncing ? "Syncing..." : "Sync Now"}
            </Badge>
          )}
        </div>
      </CardHeader>

      <CardContent className="space-y-3">
        {status.isConnected ? (
          <>
            {/* Current Sync Results */}
            {lastSyncStats && (
              <div className="space-y-2">
                <div className="flex items-center justify-between">
                  <span className="text-sm text-muted-foreground">
                    Emails Processed (This Sync)
                  </span>
                  <Badge variant="secondary">{lastSyncStats.processed.toLocaleString()}</Badge>
                </div>
              </div>
            )}

            {/* Total Emails Imported */}
            <div className="flex items-center justify-between">
              <span className="text-sm text-muted-foreground">Total Emails Imported</span>
              <Badge variant="outline">{status.emailCount?.toLocaleString() ?? "0"}</Badge>
            </div>

            {/* Last Sync */}
            {status.lastSync && (
              <div className="flex items-center justify-between">
                <span className="text-sm text-muted-foreground">Last Sync</span>
                <Badge variant="outline">
                  {format(new Date(status.lastSync), "MMM d, yyyy HH:mm")}
                </Badge>
              </div>
            )}

            {/* Error Display */}
            {status.error && (
              <div className="bg-red-50 border border-red-200 rounded-lg p-3 flex items-center gap-2">
                <AlertCircle className="h-4 w-4 text-red-600" />
                <span className="text-sm text-red-700">{status.error}</span>
              </div>
            )}
          </>
        ) : (
          <div className="py-4">
            <div className="flex items-center gap-2 text-muted-foreground">
              <AlertCircle className="h-4 w-4" />
              <span className="text-sm">Gmail not connected</span>
            </div>
          </div>
        )}
      </CardContent>
    </Card>
  );
}


/* ===== src/app/(authorisedRoute)/omni-connect/_components/ConnectDashboardOverview.tsx ===== */

"use client";

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import {
  Mail,
  Users,
  Calendar,
  TrendingUp,
  MessageSquare,
  Clock,
  ArrowRight,
  Zap,
} from "lucide-react";
import Link from "next/link";
import { GmailEmailPreview } from "./GmailEmailPreview";
import { useOmniConnect } from "@/hooks/use-omni-connect";

export function DashboardOverview(): JSX.Element {
  const { emails } = useOmniConnect();

  // Mock activity data - replace with real data later
  const recentActivity = [
    {
      type: "email",
      text: "New inquiry from Sarah Johnson about yoga classes",
      time: "2 hours ago",
    },
    { type: "contact", text: "Mike Chen attended Beginner Yoga session", time: "4 hours ago" },
    { type: "automation", text: "Welcome sequence sent to 3 new subscribers", time: "6 hours ago" },
    { type: "calendar", text: "5 new bookings for this weekend's workshop", time: "1 day ago" },
  ];

  const getActivityIcon = (type: string): JSX.Element => {
    switch (type) {
      case "email":
        return <Mail className="h-4 w-4 text-blue-500" />;
      case "contact":
        return <Users className="h-4 w-4 text-green-500" />;
      case "automation":
        return <Zap className="h-4 w-4 text-purple-500" />;
      case "calendar":
        return <Calendar className="h-4 w-4 text-orange-500" />;
      default:
        return <MessageSquare className="h-4 w-4 text-gray-500" />;
    }
  };

  return (
    <div className="space-y-6">
      {/* Quick Stats Row */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-muted-foreground">Today&apos;s Emails</p>
                <p className="text-2xl font-bold">12</p>
              </div>
              <Mail className="h-8 w-8 text-blue-500" />
            </div>
            <div className="flex items-center text-xs text-muted-foreground mt-2">
              <TrendingUp className="h-3 w-3 mr-1" />
              +15% from yesterday
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-muted-foreground">Active Contacts</p>
                <p className="text-2xl font-bold">247</p>
              </div>
              <Users className="h-8 w-8 text-green-500" />
            </div>
            <div className="flex items-center text-xs text-muted-foreground mt-2">
              <TrendingUp className="h-3 w-3 mr-1" />
              +8 new this week
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-muted-foreground">Upcoming Events</p>
                <p className="text-2xl font-bold">9</p>
              </div>
              <Calendar className="h-8 w-8 text-orange-500" />
            </div>
            <div className="flex items-center text-xs text-muted-foreground mt-2">
              <Clock className="h-3 w-3 mr-1" />
              Next in 2 hours
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-muted-foreground">Automations</p>
                <p className="text-2xl font-bold">4</p>
              </div>
              <Zap className="h-8 w-8 text-purple-500" />
            </div>
            <div className="flex items-center text-xs text-muted-foreground mt-2">
              <Badge variant="secondary" className="text-xs px-1 py-0">
                Active
              </Badge>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Main Content Grid */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Left Column - Recent Activity */}
        <div className="lg:col-span-1">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center justify-between">
                <span className="flex items-center gap-2">
                  <Clock className="h-5 w-5" />
                  Recent Activity
                </span>
                <Button variant="ghost" size="sm" asChild>
                  <Link href="/activity">
                    View All
                    <ArrowRight className="h-4 w-4 ml-1" />
                  </Link>
                </Button>
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              {recentActivity.map((activity, idx) => (
                <div
                  key={idx}
                  className="flex items-start gap-3 pb-3 border-b border-border/50 last:border-0"
                >
                  <div className="mt-0.5">{getActivityIcon(activity.type)}</div>
                  <div className="flex-1 min-w-0">
                    <p className="text-sm text-foreground leading-relaxed">{activity.text}</p>
                    <p className="text-xs text-muted-foreground mt-1">{activity.time}</p>
                  </div>
                </div>
              ))}
            </CardContent>
          </Card>
        </div>

        {/* Right Column - Email Preview */}
        <div className="lg:col-span-2">
          <GmailEmailPreview
            emails={emails.emails}
            isLoading={emails.isLoading}
            previewRange={emails.previewRange}
            error={emails.error}
          />
        </div>
      </div>
    </div>
  );
}


/* ===== src/app/(authorisedRoute)/omni-connect/_components/ConnectErrorBanner.tsx ===== */

"use client";

import { AlertCircle } from "lucide-react";

interface ConnectErrorBannerProps {
  error: string | null;
}

export function ConnectErrorBanner({ error }: ConnectErrorBannerProps): JSX.Element | null {
  if (!error) return null;

  return (
    <div className="bg-red-50 border border-red-200 rounded-lg p-4 flex items-center gap-2">
      <AlertCircle className="h-5 w-5 text-red-600" />
      <span className="text-red-700">{error}</span>
    </div>
  );
}


/* ===== src/app/(authorisedRoute)/omni-connect/_components/ConnectHeader.tsx ===== */

"use client";

import { Search, Zap } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { useState } from "react";

interface ConnectHeaderProps {
  onLoadInsights: () => void;
  onSearch?: (query: string) => void;
}

export function ConnectHeader({ onLoadInsights, onSearch }: ConnectHeaderProps): JSX.Element {
  const [searchQuery, setSearchQuery] = useState("");

  const handleSearchSubmit = (e: React.FormEvent): void => {
    e.preventDefault();
    onSearch?.(searchQuery);
  };

  return (
    <div className="flex items-center justify-between">
      <div>
        <h1 className="text-3xl font-bold tracking-tight">OmniConnect</h1>
        <p className="text-muted-foreground">
          Gmail intelligencea and smart email digests for intelligent client your wellness practice
        </p>
      </div>
      <div className="flex items-center gap-3">
        {/* Search Bar */}
        <form onSubmit={handleSearchSubmit} className="relative">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
          <Input
            type="text"
            placeholder="Search themes, emails, topics..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="pl-10 w-64"
          />
        </form>

        {/* Insights Button */}
        {onLoadInsights && (
          <Button onClick={onLoadInsights} variant="outline">
            <Zap className="h-4 w-4 mr-2" />
            Insights
          </Button>
        )}
      </div>
    </div>
  );
}


/* ===== src/app/(authorisedRoute)/omni-connect/_components/ConnectIntelligenceDashboardCard.tsx ===== */

"use client";

import { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import {
  Sheet,
  SheetContent,
  SheetHeader,
  SheetTitle,
  SheetDescription,
} from "@/components/ui/sheet";
import { HoverCard, HoverCardTrigger, HoverCardContent } from "@/components/ui/hover-card";
import {
  Brain,
  FileText,
  BookOpen,
  Calendar,
  TrendingUp,
  Lightbulb,
  ArrowRight,
  Sparkles,
} from "lucide-react";
import { useGmailAI } from "@/hooks/use-gmail-ai";
import { Input } from "@/components/ui/input";
import { Search } from "lucide-react";
import type { WeeklyDigest, MarketingWikiItem } from "./types";

interface IntelligenceDashboardCardProps {
  weeklyDigests?: WeeklyDigest[];
  marketingWikiCount?: number;
  onDigestOpen?: (digest: WeeklyDigest) => void;
  onWikiOpen?: () => void;
  onViewAllDigests?: () => void;
  onGenerateNewDigest?: () => void;
}

// TODO: Replace with real data from AI insights processing
// These should come from actual LLM analysis of email data
const mockDigests: WeeklyDigest[] = [];
const mockWikiItems: MarketingWikiItem[] = [];

export function IntelligenceDashboardCard({
  weeklyDigests = mockDigests,
  marketingWikiCount = mockWikiItems.length,
  onDigestOpen,
  onWikiOpen,
  onViewAllDigests,
  onGenerateNewDigest,
}: IntelligenceDashboardCardProps): JSX.Element {
  const [selectedDigest, setSelectedDigest] = useState<WeeklyDigest | null>(null);
  const [isDigestSheetOpen, setIsDigestSheetOpen] = useState(false);

  // TODO: Get real data from useOmniConnect hook when insights are available

  // Get semantic search functionality
  const { searchQuery, setSearchQuery, searchGmail, isSearching, searchResults } = useGmailAI();

  // Use real data if available, fallback to mock data
  const realDigests = weeklyDigests; // TODO: Hook up to real insights data when available

  const handleDigestClick = (digest: WeeklyDigest): void => {
    setSelectedDigest(digest);
    setIsDigestSheetOpen(true);
    onDigestOpen?.(digest);
  };

  const handleSearchSubmit = (e: React.FormEvent): void => {
    e.preventDefault();
    if (searchQuery.trim()) {
      searchGmail();
    }
  };

  const getCategoryColor = (category: MarketingWikiItem["category"]): string => {
    switch (category) {
      case "strategy":
        return "bg-blue-100 text-blue-800";
      case "content":
        return "bg-green-100 text-green-800";
      case "automation":
        return "bg-purple-100 text-purple-800";
      case "analytics":
        return "bg-orange-100 text-orange-800";
      default:
        return "bg-gray-100 text-gray-800";
    }
  };

  const getCategoryIcon = (category: MarketingWikiItem["category"]): string => {
    switch (category) {
      case "strategy":
        return "🎯";
      case "content":
        return "✍️";
      case "automation":
        return "⚡";
      case "analytics":
        return "📊";
      default:
        return "📝";
    }
  };

  return (
    <>
      <Card>
        <CardHeader className="pb-3">
          <CardTitle className="flex items-center gap-2 text-lg">
            <Brain className="h-5 w-5 text-purple-600" />
            Email Intelligence Hub
          </CardTitle>
        </CardHeader>
        <CardContent>
          {weeklyDigests.length === 0 && mockWikiItems.length === 0 ? (
            // Empty state when no AI insights are available
            <div className="text-center py-8">
              <Brain className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
              <h3 className="font-semibold mb-2">AI Intelligence Not Available</h3>
              <p className="text-sm text-muted-foreground mb-4">
                Email intelligence requires LLM processing of your Gmail data. Start by syncing
                emails to generate insights.
              </p>
              <Button variant="outline" size="sm" onClick={onGenerateNewDigest}>
                <Sparkles className="h-4 w-4 mr-2" />
                Process Emails for Insights
              </Button>
            </div>
          ) : (
            <>
              {/* Semantic Search Section */}
              <div className="mb-6">
                <div className="flex items-center justify-between mb-3">
                  <h3 className="text-sm font-medium text-gray-900 flex items-center gap-2">
                    <Search className="h-4 w-4" />
                    Semantic Search
                  </h3>
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={() => (window.location.href = "/omni-connect?view=semantic-search")}
                    className="text-xs"
                  >
                    Advanced
                  </Button>
                </div>
                <form onSubmit={handleSearchSubmit} className="flex gap-2">
                  <div className="relative flex-1">
                    <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4" />
                    <Input
                      placeholder="Search emails naturally..."
                      value={searchQuery}
                      onChange={(e) => setSearchQuery(e.target.value)}
                      className="pl-10 text-sm"
                      disabled={isSearching}
                    />
                  </div>
                  <Button type="submit" size="sm" disabled={isSearching || !searchQuery.trim()}>
                    {isSearching ? <Sparkles className="h-4 w-4 animate-pulse" /> : "Search"}
                  </Button>
                </form>
                {searchResults && searchResults.length > 0 && (
                  <div className="mt-3 p-3 border rounded-lg bg-muted/30">
                    <div className="text-xs text-muted-foreground mb-1">
                      Found {searchResults.length} results
                    </div>
                    <Button
                      variant="outline"
                      size="sm"
                      className="text-xs h-7"
                      onClick={() => (window.location.href = "/omni-connect?view=semantic-search")}
                    >
                      View All Results
                    </Button>
                  </div>
                )}
              </div>

              {/* Weekly Digest Section */}
              <div className="mb-6">
                <div className="flex items-center justify-between mb-3">
                  <h3 className="text-sm font-medium text-gray-900 flex items-center gap-2">
                    <Calendar className="h-4 w-4" />
                    Weekly Digests
                  </h3>
                  <Button
                    size="sm"
                    variant="ghost"
                    onClick={onGenerateNewDigest}
                    className="text-xs"
                  >
                    Generate New
                  </Button>
                </div>
                {realDigests.length > 0 ? (
                  <div className="space-y-2">
                    {realDigests.slice(0, 3).map((digest) => (
                      <div
                        key={digest.id}
                        className="flex items-center justify-between p-3 border rounded-lg hover:bg-gray-50 transition-colors cursor-pointer"
                        onClick={() => handleDigestClick(digest)}
                      >
                        <div className="flex items-start gap-3 flex-1">
                          <span className="text-lg">📊</span>
                          <div className="flex-1 min-w-0">
                            <div className="flex items-center gap-2 mb-1">
                              <span className="text-sm font-medium text-gray-900 truncate">
                                {digest.title}
                              </span>
                              <Badge variant="secondary" className="text-xs shrink-0">
                                {digest.date}
                              </Badge>
                            </div>
                            <p className="text-xs text-gray-600 line-clamp-2">{digest.summary}</p>
                          </div>
                        </div>
                        <ArrowRight className="h-4 w-4 text-gray-400 shrink-0 ml-2" />
                      </div>
                    ))}
                  </div>
                ) : (
                  <div className="text-center py-4">
                    <div className="text-sm text-muted-foreground">
                      No weekly digests generated yet
                    </div>
                  </div>
                )}
              </div>

              {/* Marketing Wiki Section */}
              <div className="mb-4">
                <div className="flex items-center justify-between mb-3">
                  <h3 className="text-sm font-medium text-gray-900 flex items-center gap-2">
                    <BookOpen className="h-4 w-4" />
                    Marketing Insights
                  </h3>
                  <Badge variant="outline" className="text-xs">
                    {marketingWikiCount} insights
                  </Badge>
                </div>
                {mockWikiItems.length > 0 ? (
                  <div className="space-y-2">
                    {mockWikiItems.slice(0, 2).map((item) => (
                      <HoverCard key={item.id}>
                        <HoverCardTrigger asChild>
                          <div className="flex items-center justify-between p-3 border rounded-lg hover:bg-gray-50 transition-colors cursor-pointer">
                            <div className="flex items-start gap-3 flex-1">
                              <span className="text-lg">{getCategoryIcon(item.category)}</span>
                              <div className="flex-1 min-w-0">
                                <div className="flex items-center gap-2 mb-1">
                                  <span className="text-sm font-medium text-gray-900 truncate">
                                    {item.title}
                                  </span>
                                  <Badge
                                    variant="secondary"
                                    className={`text-xs ${getCategoryColor(item.category)}`}
                                  >
                                    {item.category}
                                  </Badge>
                                </div>
                                <p className="text-xs text-gray-600 line-clamp-1">{item.summary}</p>
                              </div>
                            </div>
                            <Lightbulb className="h-4 w-4 text-yellow-500 shrink-0 ml-2" />
                          </div>
                        </HoverCardTrigger>
                        <HoverCardContent className="w-80">
                          <div className="space-y-2">
                            <h4 className="font-semibold">{item.title}</h4>
                            <p className="text-sm text-gray-600">{item.summary}</p>
                            <div className="flex flex-wrap gap-1">
                              {item.tags.map((tag) => (
                                <Badge key={tag} variant="outline" className="text-xs">
                                  {tag}
                                </Badge>
                              ))}
                            </div>
                            <p className="text-xs text-gray-500">
                              Added {new Date(item.dateAdded).toLocaleDateString()}
                            </p>
                          </div>
                        </HoverCardContent>
                      </HoverCard>
                    ))}
                  </div>
                ) : (
                  <div className="text-center py-4">
                    <div className="text-sm text-muted-foreground">
                      No marketing insights available yet
                    </div>
                  </div>
                )}
              </div>

              {/* Action Buttons */}
              <div className="flex gap-2">
                <Button
                  variant="default"
                  size="sm"
                  className="flex-1"
                  onClick={onViewAllDigests}
                  disabled={weeklyDigests.length === 0}
                >
                  <FileText className="h-4 w-4 mr-1" />
                  View All Digests
                </Button>
                <Button
                  variant="outline"
                  size="sm"
                  className="flex-1"
                  onClick={onWikiOpen}
                  disabled={mockWikiItems.length === 0}
                >
                  <TrendingUp className="h-4 w-4 mr-1" />
                  Browse Insights
                </Button>
              </div>
            </>
          )}
        </CardContent>
      </Card>

      {/* Weekly Digest Detail Sheet */}
      <Sheet
        open={isDigestSheetOpen}
        onOpenChange={(open) => {
          setIsDigestSheetOpen(open);
          if (!open) {
            setSelectedDigest(null);
          }
        }}
      >
        <SheetContent className="w-[400px] sm:w-[540px]">
          <SheetHeader>
            <SheetTitle className="flex items-center gap-2">
              <Brain className="h-5 w-5 text-purple-600" />
              {selectedDigest?.title}
            </SheetTitle>
            <SheetDescription>
              Weekly intelligence digest for {selectedDigest?.date}
            </SheetDescription>
          </SheetHeader>

          {selectedDigest && (
            <div className="space-y-6 mt-6">
              {/* Summary */}
              <div>
                <h4 className="font-semibold mb-2 flex items-center gap-2">
                  <FileText className="h-4 w-4" />
                  Summary
                </h4>
                <p className="text-sm text-gray-600">{selectedDigest.summary}</p>
              </div>

              {/* Key Insights */}
              <div>
                <h4 className="font-semibold mb-2 flex items-center gap-2">
                  <Lightbulb className="h-4 w-4 text-yellow-500" />
                  Key Insights
                </h4>
                <ul className="space-y-1">
                  {selectedDigest.keyInsights.map((insight, index) => (
                    <li key={index} className="text-sm text-gray-600 flex items-start gap-2">
                      <span className="text-green-500 mt-1">•</span>
                      {insight}
                    </li>
                  ))}
                </ul>
              </div>

              {/* Action Items */}
              <div>
                <h4 className="font-semibold mb-2 flex items-center gap-2">
                  <TrendingUp className="h-4 w-4 text-blue-500" />
                  Action Items
                </h4>
                <ul className="space-y-1">
                  {selectedDigest.actionItems.map((action, index) => (
                    <li key={index} className="text-sm text-gray-600 flex items-start gap-2">
                      <span className="text-blue-500 mt-1">→</span>
                      {action}
                    </li>
                  ))}
                </ul>
              </div>

              {/* Top Contacts */}
              <div>
                <h4 className="font-semibold mb-2">Top Contacts This Week</h4>
                <div className="flex flex-wrap gap-2">
                  {selectedDigest.topContacts.map((contact, index) => (
                    <Badge key={index} variant="secondary">
                      {contact}
                    </Badge>
                  ))}
                </div>
              </div>

              {/* Stats */}
              <div className="border-t pt-4">
                <div className="flex justify-between items-center">
                  <span className="text-sm text-gray-600">Email Volume</span>
                  <Badge variant="outline">{selectedDigest.emailVolume} emails</Badge>
                </div>
              </div>
            </div>
          )}
        </SheetContent>
      </Sheet>
    </>
  );
}


/* ===== src/app/(authorisedRoute)/omni-connect/_components/ConnectPage.tsx ===== */

"use client";

import { useState, useEffect } from "react";
import { useSearchParams } from "next/navigation";
import { toast } from "sonner";
import { Tabs, TabsContent } from "@/components/ui/tabs";
import { Skeleton } from "@/components/ui/skeleton";
import { useOmniConnect } from "@/hooks/use-omni-connect";
import { useGmailSync } from "@/hooks/use-gmail-sync";
import { useGmailAI } from "@/hooks/use-gmail-ai";
import { post } from "@/lib/api/client";

import { GmailConnectionPrompt } from "@/app/(authorisedRoute)/omni-connect/_components/GmailConnectionPrompt";
import { GmailSyncSetup } from "@/app/(authorisedRoute)/omni-connect/_components/GmailSyncSetup";
import { ConnectHeader } from "@/app/(authorisedRoute)/omni-connect/_components/ConnectHeader";
import { ConnectErrorBanner } from "@/app/(authorisedRoute)/omni-connect/_components/ConnectErrorBanner";
import { ConnectConnectionStatusCard } from "@/app/(authorisedRoute)/omni-connect/_components/ConnectConnectionStatusCard";
import { TemplateAutomationCard } from "@/app/(authorisedRoute)/omni-connect/_components/TemplateAutomationCard";
import { IntelligenceDashboardCard } from "./ConnectIntelligenceDashboardCard";
import { SemanticSearchView } from "./ConnectSemanticSearchView";

// New tab views
import { EmailsView } from "./EmailsView";
import { IntelligenceView } from "./IntelligenceView";

export function ConnectPage(): JSX.Element {
  const searchParams = useSearchParams();
  const [refreshTrigger, setRefreshTrigger] = useState(0);
  const [error] = useState<string | null>(null);
  const [lastSyncStats, setLastSyncStats] = useState<{
    inserted: number;
    processed: number;
  } | null>(null);

  // Unified dashboard data
  const { isLoading, connection, emails } = useOmniConnect(refreshTrigger);

  // Gmail sync + AI actions
  const { isSyncing } = useGmailSync();
  const { loadInsights } = useGmailAI();

  useEffect(() => {
    // Handle success message from OAuth callback
    const connected = searchParams.get("connected");
    if (connected === "gmail") {
      toast.success("Gmail connected successfully!", {
        description: "Your email sync has started automatically. This may take a few minutes.",
      });
      setRefreshTrigger((prev) => prev + 1);
    }

    // Handle new sync step
    const step = searchParams.get("step");
    if (step === "gmail-sync") {
      toast.success("Gmail connected successfully!", {
        description: "Now you need to start your initial sync to import your emails.",
      });
      setRefreshTrigger((prev) => prev + 1);
    }
  }, [searchParams]);

  const handleLoadInsights = (): void => {
    void loadInsights();
  };

  const handleSyncNow = async (): Promise<void> => {
    try {
      toast.info("Starting incremental sync...", {
        description: "Importing new emails since last sync",
      });

      // Incremental sync from last successful Gmail raw_event by default
      const response = await post<{
        message: string;
        stats: { inserted: number; processed: number };
      }>("/api/google/gmail/sync-direct", { incremental: true });

      // Store the sync stats for display
      setLastSyncStats(response.stats);

      toast.success("Sync completed!", {
        description: `Processed ${response.stats.processed} emails, imported ${response.stats.inserted} new`,
      });
      setRefreshTrigger((prev) => prev + 1);
    } catch (error) {
      toast.error("Sync failed", {
        description: error instanceof Error ? error.message : "Unknown error",
      });
    }
  };

  // Determine active tab from URL param
  const rawView = searchParams.get("view");
  const activeTab = (() => {
    if (rawView === "semantic-search" || rawView === "search") return "search";
    if (rawView === "intelligence") return "intelligence";
    return "emails"; // default
  })();

  if (isLoading) {
    return (
      <div className="container mx-auto p-6 space-y-6">
        <div className="space-y-2">
          <Skeleton className="h-8 w-48" />
          <Skeleton className="h-4 w-96" />
        </div>
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          <Skeleton className="h-32" />
          <Skeleton className="h-32" />
          <Skeleton className="h-32" />
        </div>
        <Skeleton className="h-64" />
      </div>
    );
  }

  // Check for sync step first, before connection status
  const step = searchParams.get("step");
  if (step === "gmail-sync") {
    return <GmailSyncSetup />;
  }

  // If not connected, show the connection prompt
  if (!connection.status.isConnected) {
    return (
      <GmailConnectionPrompt
        onConnect={connection.connect}
        isConnecting={connection.isConnecting}
      />
    );
  }

  // Settings are no longer needed - sync starts automatically on connection

  return (
    <div className="container mx-auto p-6 space-y-6">
      <ConnectHeader onLoadInsights={handleLoadInsights} />

      <ConnectErrorBanner error={error} />

      {/* === Top Cards Grid (New Order) === */}
      <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
        <div className="lg:col-span-2">
          <IntelligenceDashboardCard />
        </div>
        <TemplateAutomationCard />
        <ConnectConnectionStatusCard
          status={connection.status}
          isSyncing={isSyncing}
          onSyncNow={handleSyncNow}
          lastSyncStats={lastSyncStats}
        />
      </div>

      {/* === Main Content Area (Tabbed) === */}
      <Tabs value={activeTab} className="w-full">
        {/* Tab triggers are controlled via sidebar links (?view=...) */}
        <TabsContent value="emails">
          <EmailsView emails={emails} />
        </TabsContent>
        <TabsContent value="search">
          <SemanticSearchView />
        </TabsContent>
        <TabsContent value="intelligence">
          <IntelligenceView />
        </TabsContent>
      </Tabs>

      {/* Settings panel removed - sync happens automatically */}
    </div>
  );
}


/* ===== src/app/(authorisedRoute)/omni-connect/_components/ConnectSemanticSearchView.tsx ===== */

"use client";

import { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { Textarea } from "@/components/ui/textarea";
import { Search, Brain, Calendar, User, Mail, Sparkles, Filter, FileText } from "lucide-react";
import { useGmailAI } from "@/hooks/use-gmail-ai";

// Enhanced interfaces for semantic search results
interface SemanticSearchResult {
  from: string;
  isImportant?: boolean;
  date: string;
  subject: string;
  preview: string;
  tags?: string[];
}

// Type guards for runtime validation
function isSemanticSearchResult(obj: unknown): obj is SemanticSearchResult {
  return (
    typeof obj === "object" &&
    obj !== null &&
    typeof (obj as SemanticSearchResult).from === "string" &&
    typeof (obj as SemanticSearchResult).date === "string" &&
    typeof (obj as SemanticSearchResult).subject === "string" &&
    typeof (obj as SemanticSearchResult).preview === "string"
  );
}

export function SemanticSearchView(): JSX.Element {
  const [searchMode, setSearchMode] = useState<"simple" | "advanced">("simple");
  const [filters, setFilters] = useState({
    dateRange: "30d",
    contactType: "all",
    contentType: "all",
  });

  const { searchQuery, setSearchQuery, searchResults, isSearching, searchGmail, insights } =
    useGmailAI();

  // Mock advanced search suggestions
  const searchSuggestions = [
    "Find emails about yoga class bookings this month",
    "Show conversations with clients who mentioned stress relief",
    "Search for follow-up emails after workshop sessions",
    "Find emails from new clients asking about pricing",
    "Show messages containing schedule changes or cancellations",
  ];

  const handleAdvancedSearch = (): void => {
    // Implementation for advanced search with filters
    searchGmail();
  };

  const formatDate = (dateString: string): string => {
    return new Date(dateString).toLocaleDateString("en-US", {
      month: "short",
      day: "numeric",
      year: "numeric",
    });
  };

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <CardTitle className="flex items-center gap-2">
              <Brain className="h-5 w-5 text-purple-600" />
              Semantic Email Search
            </CardTitle>
            <div className="flex gap-2">
              <Button
                variant={searchMode === "simple" ? "default" : "outline"}
                size="sm"
                onClick={() => setSearchMode("simple")}
              >
                Simple
              </Button>
              <Button
                variant={searchMode === "advanced" ? "default" : "outline"}
                size="sm"
                onClick={() => setSearchMode("advanced")}
              >
                Advanced
              </Button>
            </div>
          </div>
        </CardHeader>
        <CardContent className="space-y-4">
          {searchMode === "simple" ? (
            <div className="space-y-4">
              <div className="flex gap-2">
                <div className="relative flex-1">
                  <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4" />
                  <Input
                    placeholder="Search emails naturally... e.g. 'clients who want stress relief classes'"
                    value={searchQuery}
                    onChange={(e) => setSearchQuery(e.target.value)}
                    className="pl-10"
                    onKeyDown={(e) => e.key === "Enter" && searchGmail()}
                  />
                </div>
                <Button onClick={searchGmail} disabled={isSearching}>
                  {isSearching ? (
                    <>
                      <Sparkles className="h-4 w-4 mr-2 animate-pulse" />
                      Searching...
                    </>
                  ) : (
                    <>
                      <Search className="h-4 w-4 mr-2" />
                      Search
                    </>
                  )}
                </Button>
              </div>

              <div className="space-y-2">
                <p className="text-sm text-muted-foreground">Try these example searches:</p>
                <div className="flex flex-wrap gap-2">
                  {searchSuggestions.slice(0, 3).map((suggestion, idx) => (
                    <Button
                      key={idx}
                      variant="outline"
                      size="sm"
                      className="text-xs"
                      onClick={() => {
                        setSearchQuery(suggestion);
                        searchGmail();
                      }}
                    >
                      {suggestion}
                    </Button>
                  ))}
                </div>
              </div>
            </div>
          ) : (
            <div className="space-y-4">
              <Textarea
                placeholder="Describe what you're looking for in detail..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                rows={3}
              />

              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div>
                  <label className="text-sm font-medium">Time Range</label>
                  <select
                    className="w-full mt-1 p-2 border rounded-md"
                    value={filters.dateRange}
                    onChange={(e) => setFilters({ ...filters, dateRange: e.target.value })}
                  >
                    <option value="7d">Last 7 days</option>
                    <option value="30d">Last 30 days</option>
                    <option value="90d">Last 3 months</option>
                    <option value="1y">Last year</option>
                  </select>
                </div>

                <div>
                  <label className="text-sm font-medium">Contact Type</label>
                  <select
                    className="w-full mt-1 p-2 border rounded-md"
                    value={filters.contactType}
                    onChange={(e) => setFilters({ ...filters, contactType: e.target.value })}
                  >
                    <option value="all">All contacts</option>
                    <option value="new">New clients</option>
                    <option value="existing">Existing clients</option>
                    <option value="prospects">Prospects</option>
                  </select>
                </div>

                <div>
                  <label className="text-sm font-medium">Content Type</label>
                  <select
                    className="w-full mt-1 p-2 border rounded-md"
                    value={filters.contentType}
                    onChange={(e) => setFilters({ ...filters, contentType: e.target.value })}
                  >
                    <option value="all">All content</option>
                    <option value="bookings">Bookings</option>
                    <option value="inquiries">Inquiries</option>
                    <option value="feedback">Feedback</option>
                  </select>
                </div>
              </div>

              <Button onClick={handleAdvancedSearch} disabled={isSearching} className="w-full">
                <Filter className="h-4 w-4 mr-2" />
                Search with Filters
              </Button>
            </div>
          )}
        </CardContent>
      </Card>

      {/* Search Results */}
      {searchResults && searchResults.length > 0 && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Mail className="h-5 w-5" />
              Search Results ({searchResults.length})
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {searchResults
                .map((rawResult, idx: number) => {
                  // Type guard to ensure safe access
                  if (!isSemanticSearchResult(rawResult)) {
                    console.warn("Invalid search result format:", rawResult);
                    return null;
                  }

                  const result = rawResult as SemanticSearchResult;

                  return (
                    <div
                      key={idx}
                      className="border rounded-lg p-4 hover:bg-muted/50 transition-colors"
                    >
                      <div className="flex items-start justify-between mb-2">
                        <div className="flex items-center gap-2">
                          <User className="h-4 w-4 text-muted-foreground" />
                          <span className="font-medium">{result.from}</span>
                          {result.isImportant && (
                            <Badge variant="secondary" className="text-xs">
                              Important
                            </Badge>
                          )}
                        </div>
                        <div className="flex items-center gap-2 text-sm text-muted-foreground">
                          <Calendar className="h-4 w-4" />
                          {formatDate(result.date)}
                        </div>
                      </div>

                      <h4 className="font-medium mb-2">{result.subject}</h4>
                      <p className="text-sm text-muted-foreground line-clamp-2 mb-3">
                        {result.preview}
                      </p>

                      {result.tags && Array.isArray(result.tags) && result.tags.length > 0 && (
                        <div className="flex flex-wrap gap-1">
                          {result.tags.map((tag, tagIdx) => (
                            <Badge key={tagIdx} variant="outline" className="text-xs">
                              {tag}
                            </Badge>
                          ))}
                        </div>
                      )}
                    </div>
                  );
                })
                .filter(Boolean)}
            </div>
          </CardContent>
        </Card>
      )}

      {/* AI Insights */}
      {insights && typeof insights === "object" && "patterns" in insights && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Sparkles className="h-5 w-5 text-purple-600" />
              AI Insights from Search
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-3">
              {insights.patterns &&
                Array.isArray(insights.patterns) &&
                insights.patterns.map((pattern, idx) => (
                  <div key={idx} className="flex items-start gap-3 p-3 bg-muted/30 rounded-lg">
                    <FileText className="h-4 w-4 text-purple-600 mt-0.5" />
                    <div>
                      <p className="text-sm">{pattern}</p>
                    </div>
                  </div>
                ))}
            </div>
          </CardContent>
        </Card>
      )}

      {/* Loading States */}
      {isSearching && !searchResults && (
        <Card>
          <CardContent className="py-8 text-center">
            <Sparkles className="h-8 w-8 text-purple-600 animate-pulse mx-auto mb-3" />
            <p className="text-sm text-muted-foreground">
              AI is analyzing your emails and finding relevant matches...
            </p>
          </CardContent>
        </Card>
      )}
    </div>
  );
}


/* ===== src/app/(authorisedRoute)/omni-connect/_components/ConnectSettingsPanel.tsx ===== */

"use client";

import { useState, useEffect, useCallback } from "react";
import { toast } from "@/hooks/use-toast";
import { logger } from "@/lib/observability";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Badge } from "@/components/ui/badge";
import { Separator } from "@/components/ui/separator";
import { Settings, Save, X, Plus, Info } from "lucide-react";
import { ensureError } from "@/lib/utils/error-handler";
import { get, post, put } from "@/lib/api/client";

interface GmailSettings {
  gmailQuery: string;
  gmailLabelIncludes: string[];
  gmailLabelExcludes: string[];
  maxEmailsPerSync: number;
  dateRangeDays: number;
}

interface GmailSettingsPanelProps {
  isOpen: boolean;
  onClose: () => void;
  isInitialSetup?: boolean;
  onInitialSyncStarted?: () => void;
}

export function GmailSettingsPanel({
  isOpen,
  onClose,
  isInitialSetup = false,
  onInitialSyncStarted,
}: GmailSettingsPanelProps): JSX.Element | null {
  const [settings, setSettings] = useState<GmailSettings>({
    gmailQuery: "category:primary -in:chats -in:drafts newer_than:30d",
    gmailLabelIncludes: [],
    gmailLabelExcludes: ["Promotions", "Social", "Forums", "Updates"],
    maxEmailsPerSync: 1000,
    dateRangeDays: 90,
  });
  const [isSaving, setIsSaving] = useState(false);
  const [newLabelInclude, setNewLabelInclude] = useState("");
  const [newLabelExclude, setNewLabelExclude] = useState("");

  const loadSettings = useCallback(async (): Promise<void> => {
    try {
      const data = await get<{
        gmailQuery?: string;
        gmailLabelIncludes?: unknown;
        gmailLabelExcludes?: unknown;
      }>("/api/settings/sync/prefs");

      if (data.gmailQuery || data.gmailLabelIncludes || data.gmailLabelExcludes) {
        setSettings({
          gmailQuery: data.gmailQuery ?? settings.gmailQuery,
          gmailLabelIncludes:
            Array.isArray(data.gmailLabelIncludes) &&
            data.gmailLabelIncludes.every(
              (item: unknown): item is string => typeof item === "string",
            )
              ? data.gmailLabelIncludes
              : [],
          gmailLabelExcludes:
            Array.isArray(data.gmailLabelExcludes) &&
            data.gmailLabelExcludes.every(
              (item: unknown): item is string => typeof item === "string",
            )
              ? data.gmailLabelExcludes
              : settings.gmailLabelExcludes,
          maxEmailsPerSync: settings.maxEmailsPerSync,
          dateRangeDays: settings.dateRangeDays,
        });
      }
    } catch (error) {
      await logger.error(
        "gmail_settings_load_failed",
        {
          operation: "load_gmail_settings",
          additionalData: { component: "GmailSettingsPanel" },
        },
        ensureError(error),
      );
    }
  }, [settings, setSettings]);

  useEffect(() => {
    if (isOpen) {
      loadSettings().catch((error) => {
        logger
          .error(
            "gmail_settings_load_failed_on_open",
            {
              operation: "load_gmail_settings_on_open",
              additionalData: { component: "GmailSettingsPanel" },
            },
            ensureError(error),
          )
          .catch(() => {
            // Failed to log error - ignore silently to avoid cascading errors
          });
      });
    }
  }, [isOpen, loadSettings]);

  const saveSettings = async (): Promise<void> => {
    setIsSaving(true);
    try {
      const payload = {
        gmailQuery: settings.gmailQuery,
        gmailLabelIncludes: settings.gmailLabelIncludes,
        gmailLabelExcludes: settings.gmailLabelExcludes,
      };

      if (isInitialSetup) {
        // Call the initial sync API endpoint
        const data = await post<{ message?: string }>("/api/sync/initial/gmail", payload);
        toast({
          title: "Success",
          description: data.message ?? "Settings saved and initial sync started!",
        });
        onInitialSyncStarted?.();
      } else {
        // Call the regular settings API endpoint
        await put("/api/settings/sync/prefs", payload);
        toast({
          title: "Success",
          description: "Gmail settings saved successfully",
        });
        onClose();
      }
    } catch (error) {
      await logger.error(
        "gmail_settings_save_failed",
        {
          operation: isInitialSetup ? "save_initial_gmail_settings" : "save_gmail_settings",
          additionalData: { component: "GmailSettingsPanel", isInitialSetup },
        },
        ensureError(error),
      );
      toast({
        title: "Error",
        description: isInitialSetup
          ? "Failed to save settings and start initial sync"
          : "Failed to save Gmail settings",
        variant: "destructive",
      });
    } finally {
      setIsSaving(false);
    }
  };

  const addLabelInclude = (): void => {
    if (newLabelInclude.trim() && !settings.gmailLabelIncludes.includes(newLabelInclude.trim())) {
      setSettings((prev) => ({
        ...prev,
        gmailLabelIncludes: [...prev.gmailLabelIncludes, newLabelInclude.trim()],
      }));
      setNewLabelInclude("");
    }
  };

  const removeLabelInclude = (label: string): void => {
    setSettings((prev) => ({
      ...prev,
      gmailLabelIncludes: prev.gmailLabelIncludes.filter((l) => l !== label),
    }));
  };

  const addLabelExclude = (): void => {
    if (newLabelExclude.trim() && !settings.gmailLabelExcludes.includes(newLabelExclude.trim())) {
      setSettings((prev) => ({
        ...prev,
        gmailLabelExcludes: [...prev.gmailLabelExcludes, newLabelExclude.trim()],
      }));
      setNewLabelExclude("");
    }
  };

  const removeLabelExclude = (label: string): void => {
    setSettings((prev) => ({
      ...prev,
      gmailLabelExcludes: prev.gmailLabelExcludes.filter((l) => l !== label),
    }));
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg shadow-xl max-w-2xl w-full mx-4 max-h-[90vh] overflow-hidden">
        <div className="flex flex-col h-full max-h-[90vh]">
          {/* Header */}
          <div className="flex items-center justify-between p-6 border-b">
            <div className="flex items-center gap-2">
              <Settings className="h-5 w-5" />
              <h2 className="text-xl font-semibold">
                {isInitialSetup ? "Configure Gmail Sync" : "Gmail Sync Settings"}
              </h2>
            </div>
            <Button variant="outline" size="sm" onClick={onClose}>
              <X className="h-4 w-4" />
            </Button>
          </div>

          {/* Content */}
          <div className="flex-1 overflow-y-auto p-6">
            <div className="space-y-6">
              {/* Gmail Query */}
              <div className="space-y-2">
                <Label htmlFor="gmail-query" className="text-sm font-medium">
                  Gmail Search Query
                </Label>
                <Textarea
                  id="gmail-query"
                  value={settings.gmailQuery}
                  onChange={(e) => setSettings((prev) => ({ ...prev, gmailQuery: e.target.value }))}
                  placeholder="e.g., category:primary -in:chats -in:drafts newer_than:30d"
                  className="min-h-[80px]"
                />
                <p className="text-xs text-muted-foreground">
                  Use Gmail search operators to filter which emails to sync.{" "}
                  <a
                    href="https://support.google.com/mail/answer/7190"
                    target="_blank"
                    rel="noopener noreferrer"
                    className="text-blue-600 hover:underline"
                  >
                    Learn more about Gmail search
                  </a>
                </p>
              </div>

              <Separator />

              {/* Label Filters */}
              <div className="space-y-4">
                <div>
                  <Label className="text-sm font-medium mb-2 block">
                    Include Only These Labels
                  </Label>
                  <p className="text-xs text-muted-foreground mb-3">
                    Only sync emails with these labels (leave empty to include all)
                  </p>

                  <div className="flex gap-2 mb-3">
                    <Input
                      value={newLabelInclude}
                      onChange={(e) => setNewLabelInclude(e.target.value)}
                      placeholder="Enter label name"
                      onKeyPress={(e) => e.key === "Enter" && addLabelInclude()}
                    />
                    <Button onClick={addLabelInclude} size="sm" variant="outline">
                      <Plus className="h-4 w-4" />
                    </Button>
                  </div>

                  <div className="flex flex-wrap gap-2">
                    {settings.gmailLabelIncludes.map((label) => (
                      <Badge key={label} variant="secondary" className="flex items-center gap-1">
                        {label}
                        <button
                          onClick={() => removeLabelInclude(label)}
                          className="ml-1 hover:bg-destructive/20 rounded-full p-0.5"
                        >
                          <X className="h-3 w-3" />
                        </button>
                      </Badge>
                    ))}
                  </div>
                </div>

                <div>
                  <Label className="text-sm font-medium mb-2 block">Exclude These Labels</Label>
                  <p className="text-xs text-muted-foreground mb-3">
                    Skip emails with these labels (common exclusions: Promotions, Social, Forums,
                    Updates)
                  </p>

                  <div className="flex gap-2 mb-3">
                    <Input
                      value={newLabelExclude}
                      onChange={(e) => setNewLabelExclude(e.target.value)}
                      placeholder="Enter label name"
                      onKeyPress={(e) => e.key === "Enter" && addLabelExclude()}
                    />
                    <Button onClick={addLabelExclude} size="sm" variant="outline">
                      <Plus className="h-4 w-4" />
                    </Button>
                  </div>

                  <div className="flex flex-wrap gap-2">
                    {settings.gmailLabelExcludes.map((label) => (
                      <Badge key={label} variant="default" className="flex items-center gap-1">
                        {label}
                        <button
                          onClick={() => removeLabelExclude(label)}
                          className="ml-1 hover:bg-destructive/20 rounded-full p-0.5"
                        >
                          <X className="h-3 w-3" />
                        </button>
                      </Badge>
                    ))}
                  </div>
                </div>
              </div>

              <Separator />

              {/* Advanced Settings */}
              <div className="space-y-4">
                <h3 className="text-sm font-medium">Advanced Settings</h3>

                <div className="grid grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="max-emails" className="text-sm">
                      Max Emails Per Sync
                    </Label>
                    <Input
                      id="max-emails"
                      type="number"
                      value={settings.maxEmailsPerSync}
                      onChange={(e) =>
                        setSettings((prev) => ({
                          ...prev,
                          maxEmailsPerSync: parseInt(e.target.value) || 1000,
                        }))
                      }
                      min="100"
                      max="10000"
                    />
                    <p className="text-xs text-muted-foreground">
                      Limit to prevent timeouts (100-10000)
                    </p>
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="date-range" className="text-sm">
                      Default Date Range (days)
                    </Label>
                    <Input
                      id="date-range"
                      type="number"
                      value={settings.dateRangeDays}
                      onChange={(e) =>
                        setSettings((prev) => ({
                          ...prev,
                          dateRangeDays: parseInt(e.target.value) || 30,
                        }))
                      }
                      min="7"
                      max="365"
                    />
                    <p className="text-xs text-muted-foreground">
                      How far back to sync by default (7-365 days)
                    </p>
                  </div>
                </div>
              </div>

              {/* Info Box */}
              <Card className="bg-blue-50 border-blue-200">
                <CardContent className="p-4">
                  <div className="flex items-start gap-2">
                    <Info className="h-4 w-4 text-blue-600 mt-0.5" />
                    <div className="text-sm">
                      <p className="font-medium text-blue-900 mb-1">Sync Behavior</p>
                      <ul className="text-blue-800 space-y-1 text-xs">
                        <li>• Emails are processed in batches to avoid timeouts</li>
                        <li>• Duplicate contacts are automatically merged</li>
                        <li>• Only new emails since last sync are processed</li>
                        <li>• Large attachments are skipped for performance</li>
                      </ul>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          </div>

          {/* Footer */}
          <div className="flex items-center justify-between p-6 border-t bg-gray-50">
            <div className="text-sm text-muted-foreground">
              {isInitialSetup
                ? "Your first Gmail sync will start after saving"
                : "Changes will apply to your next Gmail sync"}
            </div>
            <div className="flex gap-2">
              <Button variant="outline" onClick={onClose}>
                Cancel
              </Button>
              <Button onClick={saveSettings} disabled={isSaving}>
                {isSaving ? (
                  <>
                    <Save className="h-4 w-4 mr-2 animate-spin" />
                    {isInitialSetup ? "Starting Sync..." : "Saving..."}
                  </>
                ) : (
                  <>
                    <Save className="h-4 w-4 mr-2" />
                    {isInitialSetup ? "Save & Start Initial Sync" : "Save Settings"}
                  </>
                )}
              </Button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}


/* ===== src/app/(authorisedRoute)/omni-connect/_components/ConnectSidebar.tsx ===== */

"use client";

import Link from "next/link";
import { useSearchParams } from "next/navigation";
import {
  SidebarContent,
  SidebarGroup,
  SidebarGroupLabel,
  SidebarMenu,
  SidebarMenuItem,
  SidebarMenuButton,
  SidebarSeparator,
} from "@/components/ui/sidebar";
import { Search, Users, Briefcase, Megaphone, Settings } from "lucide-react";

function NavLink({
  href,
  isActive,
  children,
}: {
  href: string;
  isActive: boolean;
  children: React.ReactNode;
}): JSX.Element {
  return (
    <SidebarMenuItem>
      <SidebarMenuButton asChild isActive={isActive} size="sm">
        <Link href={href} className="flex items-center w-full">
          {children}
        </Link>
      </SidebarMenuButton>
    </SidebarMenuItem>
  );
}

export function ConnectSidebar(): JSX.Element {
  const searchParams = useSearchParams();
  const view = searchParams.get("view") ?? "emails";
  const section = searchParams.get("section");
  const filter = searchParams.get("filter");

  return (
    <SidebarContent>
      <SidebarSeparator />

      {/* Smart Emails (filters for Emails tab) */}
      <SidebarGroup>
        <SidebarGroupLabel>Smart Emails</SidebarGroupLabel>
        <SidebarMenu>
          <NavLink
            href="/omni-connect?view=emails&filter=client"
            isActive={view === "emails" && filter === "client"}
          >
            <Users className="h-4 w-4 mr-2" />
            <span>Client Emails</span>
          </NavLink>
          <NavLink
            href="/omni-connect?view=emails&filter=business"
            isActive={view === "emails" && filter === "business"}
          >
            <Briefcase className="h-4 w-4 mr-2" />
            <span>Business Emails</span>
          </NavLink>
          <NavLink
            href="/omni-connect?view=emails&filter=marketing"
            isActive={view === "emails" && filter === "marketing"}
          >
            <Megaphone className="h-4 w-4 mr-2" />
            <span>Marketing & Reach</span>
          </NavLink>
          <NavLink
            href="/omni-connect?view=emails&filter=admin"
            isActive={view === "emails" && filter === "admin"}
          >
            <Settings className="h-4 w-4 mr-2" />
            <span>Admin</span>
          </NavLink>
        </SidebarMenu>
      </SidebarGroup>

      {/* Semantic Search */}
      <SidebarGroup>
        <SidebarGroupLabel>Semantic Search</SidebarGroupLabel>
        <SidebarMenu>
          <NavLink href="/omni-connect?view=search" isActive={view === "search"}>
            <Search className="h-4 w-4 mr-2" />
            <span>Search</span>
          </NavLink>
        </SidebarMenu>
      </SidebarGroup>

      {/* Business Analytics */}
      <SidebarGroup>
        <SidebarGroupLabel>Business Analytics</SidebarGroupLabel>
        <SidebarMenu>
          <NavLink
            href="/omni-connect?view=intelligence&section=categorization"
            isActive={view === "intelligence" && section === "categorization"}
          >
            <span className="ml-6">Categorization Status</span>
          </NavLink>
          <NavLink
            href="/omni-connect?view=intelligence&section=summary"
            isActive={view === "intelligence" && section === "summary"}
          >
            <span className="ml-6">Weekly Summary</span>
          </NavLink>
          <NavLink
            href="/omni-connect?view=intelligence&section=insights"
            isActive={view === "intelligence" && section === "insights"}
          >
            <span className="ml-6">AI Insights</span>
          </NavLink>
        </SidebarMenu>
      </SidebarGroup>
    </SidebarContent>
  );
}


/* ===== src/app/(authorisedRoute)/omni-connect/_components/EmailsView.tsx ===== */

"use client";

import type { JSX } from "react";
import { GmailEmailPreview } from "./GmailEmailPreview";
import type { EmailPreview, PreviewRange } from "./types";

interface EmailsSliceProps {
  emails: {
    emails: EmailPreview[];
    previewRange: PreviewRange | null;
    isLoading: boolean;
    error: Error | null;
  };
}

export function EmailsView({ emails }: EmailsSliceProps): JSX.Element {
  return (
    <div className="space-y-6">
      <GmailEmailPreview
        emails={emails.emails}
        isLoading={emails.isLoading}
        previewRange={emails.previewRange}
        error={emails.error}
      />
    </div>
  );
}


/* ===== src/app/(authorisedRoute)/omni-connect/_components/GmailConnectionPrompt.tsx ===== */

import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Mail, Link, BarChart3, Clock } from "lucide-react";

interface GmailConnectionPromptProps {
  onConnect: () => void;
  isConnecting: boolean;
}

export function GmailConnectionPrompt({
  onConnect,
  isConnecting,
}: GmailConnectionPromptProps): JSX.Element {
  return (
    <Card>
      <CardHeader className="text-center">
        <div className="mx-auto w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center mb-4">
          <Mail className="h-6 w-6 text-blue-600" />
        </div>
        <CardTitle>Connect Your Gmail</CardTitle>
        <CardDescription>
          Sync your email communications to automatically extract client interactions and build
          comprehensive contact timelines.
        </CardDescription>
      </CardHeader>
      <CardContent className="text-center">
        <div className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
            <div className="flex flex-col items-center p-4 bg-gray-50 rounded-lg">
              <Mail className="h-8 w-8 text-blue-600 mb-2" />
              <h3 className="font-medium">Email History</h3>
              <p className="text-muted-foreground text-center">
                Import past conversations and client communications
              </p>
            </div>
            <div className="flex flex-col items-center p-4 bg-gray-50 rounded-lg">
              <BarChart3 className="h-8 w-8 text-green-600 mb-2" />
              <h3 className="font-medium">Contact Intelligence</h3>
              <p className="text-muted-foreground text-center">
                Extract client information and engagement patterns
              </p>
            </div>
            <div className="flex flex-col items-center p-4 bg-gray-50 rounded-lg">
              <Clock className="h-8 w-8 text-purple-600 mb-2" />
              <h3 className="font-medium">Timeline Building</h3>
              <p className="text-muted-foreground text-center">
                Automatically create comprehensive client histories
              </p>
            </div>
          </div>
          <Button onClick={onConnect} disabled={isConnecting} size="lg">
            <Link className="h-4 w-4 mr-2" />
            {isConnecting ? "Connecting..." : "Connect Gmail"}
          </Button>
        </div>
      </CardContent>
    </Card>
  );
}


/* ===== src/app/(authorisedRoute)/omni-connect/_components/GmailEmailPreview.tsx ===== */

import type { JSX } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Mail, RefreshCw, Paperclip } from "lucide-react";
import { format } from "date-fns";
import { EmailPreview } from "./types";

interface GmailEmailPreviewProps {
  emails: EmailPreview[];
  isLoading: boolean;
  previewRange: { from: string; to: string } | null;
  error?: Error | null;
}

export function GmailEmailPreview({
  emails,
  isLoading,
  previewRange,
  error,
}: GmailEmailPreviewProps): JSX.Element {
  return (
    <Card>
      <CardHeader>
        <CardTitle>Recent Emails</CardTitle>
        <CardDescription>
          {previewRange
            ? `Preview range: ${format(new Date(previewRange.from), "MMM d, yyyy")} - ${format(
                new Date(previewRange.to),
                "MMM d, yyyy",
              )}`
            : "Your most recent email communications"}
        </CardDescription>
      </CardHeader>
      <CardContent>
        <div className="space-y-3">
          {isLoading ? (
            <div className="text-center py-8 text-muted-foreground">
              <RefreshCw className="h-8 w-8 mx-auto mb-4 opacity-50 animate-spin" />
              <p className="text-sm">Loading recent emails...</p>
            </div>
          ) : emails.length > 0 ? (
            emails.map((email, index) => (
              <div key={email.id ?? index} className="border rounded-lg p-3 space-y-2">
                <div className="flex items-start justify-between gap-3">
                  <div className="flex-1 min-w-0">
                    <div className="flex items-center gap-1">
                      <p className="font-medium text-sm truncate">{email.subject}</p>
                      {email.hasAttachments && (
                        <Paperclip className="h-3 w-3 text-muted-foreground flex-shrink-0" />
                      )}
                    </div>
                    <div className="flex items-center gap-2">
                      <p className="text-xs text-muted-foreground truncate flex-1">{email.from}</p>
                      {Array.isArray(email.labels) && email.labels.length > 0 && (
                        <div className="flex flex-wrap gap-1">
                          {email.labels.slice(0, 2).map((label: string, i: number) => (
                            <Badge key={i} variant="outline" className="text-[10px] px-1 py-0">
                              {label}
                            </Badge>
                          ))}
                          {email.labels.length > 2 && (
                            <Badge variant="outline" className="text-[10px] px-1 py-0">
                              +{email.labels.length - 2}
                            </Badge>
                          )}
                        </div>
                      )}
                    </div>
                  </div>
                  <span className="text-xs text-muted-foreground whitespace-nowrap">
                    {(() => {
                      try {
                        const date = new Date(email.date);
                        return isNaN(date.getTime()) ? "Invalid date" : format(date, "MMM d");
                      } catch {
                        return "Invalid date";
                      }
                    })()}
                  </span>
                </div>
                <p className="text-xs text-muted-foreground line-clamp-2">{email.snippet}</p>
              </div>
            ))
          ) : error ? (
            <div className="text-center py-8 text-muted-foreground">
              <Mail className="h-12 w-12 mx-auto mb-4 opacity-50 text-red-400" />
              <p className="text-sm text-red-600">Unable to load emails</p>
              <p className="text-xs mb-4">
                Your Gmail token may have expired. Please reconnect your account.
              </p>
              <button
                onClick={() => window.open("/api/google/gmail/oauth", "_self")}
                className="px-4 py-2 bg-blue-600 text-white text-sm rounded hover:bg-blue-700 transition-colors"
              >
                Reconnect Gmail
              </button>
            </div>
          ) : (
            <div className="text-center py-8 text-muted-foreground">
              <Mail className="h-12 w-12 mx-auto mb-4 opacity-50" />
              <p className="text-sm">No emails available</p>
              <p className="text-xs">Click &quot;Sync Now&quot; to preview your recent emails</p>
            </div>
          )}
        </div>
      </CardContent>
    </Card>
  );
}


/* ===== src/app/(authorisedRoute)/omni-connect/_components/GmailSyncPreview.tsx ===== */

"use client";

import { useCallback, useEffect, useState } from "react";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { Mail, Calendar, Paperclip, CheckCircle, Eye, Users, Clock } from "lucide-react";
import { format } from "date-fns";
import { toast } from "sonner";
import { apiClient } from "@/lib/api/client";
import { logger } from "@/lib/observability";

interface EmailPreview {
  id: string;
  subject: string;
  from: string;
  to: string[];
  date: string;
  snippet: string;
  hasAttachments: boolean;
  labels: string[];
}

interface SampleEmailData {
  id?: string;
  subject?: string;
  from?: string;
  date?: string;
}

interface SyncPreview {
  totalEmails: number;
  estimatedContacts: number;
  dateRange: {
    from: string;
    to: string;
  };
  sampleEmails: EmailPreview[];
  potentialContacts: Array<{
    email: string;
    name?: string;
    frequency: number;
  }>;
}

interface GmailSyncPreviewProps {
  isOpen: boolean;
  onClose: () => void;
  onApprove: () => void;
  isLoading?: boolean;
}

export function GmailSyncPreview({
  isOpen,
  onClose,
  onApprove,
  isLoading,
}: GmailSyncPreviewProps): JSX.Element | null {
  const [preview, setPreview] = useState<SyncPreview | null>(null);
  const [isApproving, setIsApproving] = useState(false);

  const loadPreview = useCallback(async (): Promise<void> => {
    try {
      const data = await apiClient.post<{
        countByLabel?: Record<string, number>;
        sampleEmails?: unknown[];
        sampleSubjects?: unknown[];
        dateRange?: { from: string; to: string };
      }>("/api/sync/preview/gmail", {});
      // console.log("GmailSyncPreview data:", data);
      // Prefer richer preview data when available; fallback to subjects
      if (
        (Array.isArray(data?.sampleEmails) && data.sampleEmails.length > 0) ||
        (Array.isArray(data?.sampleSubjects) && data.sampleSubjects.length > 0)
      ) {
        const totalEmails = Object.values(data.countByLabel ?? {}).reduce(
          (sum: number, count: unknown) => sum + (typeof count === "number" ? count : 0),
          0,
        );

        const richEmails = Array.isArray(data.sampleEmails) ? data.sampleEmails : [];
        let sampleEmails: EmailPreview[] = richEmails
          .slice(0, 5)
          .map((e: unknown, index: number) => {
            const email = e as {
              id?: string;
              subject?: string;
              from?: string;
              date?: string;
              snippet?: string;
              hasAttachments?: boolean;
              labels?: unknown;
            };
            return {
              id: email.id ?? `email-${index}`,
              subject: email.subject ?? `Email ${index + 1}`,
              from: email.from ?? "Unknown Sender",
              to: [],
              date: email.date ?? new Date(Date.now() - index * 86400000).toISOString(),
              snippet: email.snippet ?? "",
              hasAttachments: Boolean(email.hasAttachments),
              labels: Array.isArray(email.labels) ? email.labels : [],
            };
          });

        if (sampleEmails.length === 0 && Array.isArray(data.sampleSubjects)) {
          sampleEmails = data.sampleSubjects.slice(0, 5).map((emailObj: unknown, index: number) => {
            const email = emailObj as SampleEmailData;
            return {
              id: email.id ?? `email-${index}`,
              subject: email.subject ?? `Email ${index + 1}`,
              from: email.from ?? "Unknown Sender",
              to: [],
              date: email.date ?? new Date(Date.now() - index * 86400000).toISOString(),
              snippet: `Preview of email ${index + 1}...`,
              hasAttachments: false,
              labels: ["INBOX"],
            };
          });
        }

        const rangeFrom =
          data?.dateRange?.from ??
          (sampleEmails.length > 0
            ? new Date(
                Math.min(...sampleEmails.map((e) => new Date(e.date).getTime() || Date.now())),
              ).toISOString()
            : new Date(Date.now() - 30 * 86400000).toISOString());

        const rangeTo =
          data?.dateRange?.to ??
          (sampleEmails.length > 0
            ? new Date(
                Math.max(...sampleEmails.map((e) => new Date(e.date).getTime() || Date.now())),
              ).toISOString()
            : new Date().toISOString());

        const previewData: SyncPreview = {
          totalEmails,
          estimatedContacts: Math.floor(sampleEmails.length * 0.3),
          dateRange: { from: rangeFrom, to: rangeTo },
          sampleEmails,
          potentialContacts: [],
        };

        setPreview(previewData);
        toast.success(`Preview loaded`, {
          description: `Total ${totalEmails} emails • Showing ${sampleEmails.length} samples`,
        });
      } else {
        logger.userError("Failed to load Gmail preview", new Error("Invalid Gmail preview data"), {
          operation: "gmail_sync.preview_load",
        });
      }
    } catch (error) {
      logger.userError(
        "Error loading Gmail preview",
        error instanceof Error ? error : new Error("Gmail preview load failed"),
        { operation: "gmail_sync.preview_load" },
      );
    }
  }, []);

  // Auto-load preview when the modal opens
  useEffect((): void => {
    if (isOpen && !preview) {
      void loadPreview();
    }
  }, [isOpen, preview, loadPreview]);

  const handleApprove = async (): Promise<void> => {
    setIsApproving(true);
    try {
      await onApprove();
      onClose();
    } finally {
      setIsApproving(false);
    }
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full mx-4 max-h-[90vh] overflow-hidden">
        <div className="flex flex-col h-full max-h-[90vh]">
          {/* Header */}
          <div className="flex items-center justify-between p-6 border-b">
            <div>
              <h2 className="text-xl font-semibold">Gmail Sync Preview</h2>
              <p className="text-sm text-muted-foreground">
                Review what will be imported before proceeding
              </p>
            </div>
            <Button variant="outline" onClick={onClose}>
              Close
            </Button>
          </div>

          {/* Content */}
          <div className="flex-1 overflow-y-auto p-6">
            {!preview ? (
              <div className="text-center py-8">
                <Eye className="h-12 w-12 mx-auto mb-4 text-muted-foreground" />
                <h3 className="text-lg font-medium mb-2">Load Preview</h3>
                <p className="text-muted-foreground mb-4">
                  Click below to see what emails will be processed
                </p>
                <Button onClick={loadPreview} disabled={isLoading}>
                  {isLoading ? "Loading..." : "Load Preview"}
                </Button>
              </div>
            ) : (
              <div className="space-y-6">
                {/* Summary Stats */}
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  <Card>
                    <CardContent className="p-4">
                      <div className="flex items-center gap-2">
                        <Mail className="h-5 w-5 text-blue-600" />
                        <div>
                          <p className="text-2xl font-bold">{preview.totalEmails}</p>
                          <p className="text-sm text-muted-foreground">Total Emails</p>
                        </div>
                      </div>
                    </CardContent>
                  </Card>

                  <Card>
                    <CardContent className="p-4">
                      <div className="flex items-center gap-2">
                        <Users className="h-5 w-5 text-green-600" />
                        <div>
                          <p className="text-2xl font-bold">{preview.estimatedContacts}</p>
                          <p className="text-sm text-muted-foreground">Potential Contacts</p>
                        </div>
                      </div>
                    </CardContent>
                  </Card>

                  <Card>
                    <CardContent className="p-4">
                      <div className="flex items-center gap-2">
                        <Calendar className="h-5 w-5 text-purple-600" />
                        <div>
                          <p className="text-sm font-medium">Date Range</p>
                          <p className="text-xs text-muted-foreground">
                            {format(new Date(preview.dateRange.from), "MMM d, yyyy")} -{" "}
                            {format(new Date(preview.dateRange.to), "MMM d, yyyy")}
                          </p>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                </div>

                {/* Sample Emails */}
                <Card>
                  <CardHeader>
                    <CardTitle className="text-lg">Sample Emails</CardTitle>
                    <CardDescription>
                      Preview of emails that will be processed (showing first 5)
                    </CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                      {preview.sampleEmails.map((email: EmailPreview) => (
                        <div key={email.id} className="border rounded-lg p-4 space-y-2">
                          <div className="flex items-start justify-between">
                            <div className="flex-1">
                              <h4 className="font-medium text-sm">{email.subject}</h4>
                              <div className="flex items-center gap-2 text-xs text-muted-foreground mt-1">
                                <Users className="h-3 w-3" />
                                <span>From: {email.from}</span>
                                <Clock className="h-3 w-3 ml-2" />
                                <span>{format(new Date(email.date), "MMM d, HH:mm")}</span>
                              </div>
                            </div>
                            <div className="flex items-center gap-1">
                              {email.hasAttachments && (
                                <Paperclip
                                  className="h-3 w-3 text-muted-foreground mr-1"
                                  aria-label="Has attachments"
                                />
                              )}
                              {email.labels.slice(0, 2).map((label: string) => (
                                <Badge key={label} variant="outline" className="text-xs">
                                  {label}
                                </Badge>
                              ))}
                            </div>
                          </div>
                          <p className="text-sm text-muted-foreground line-clamp-2">
                            {email.snippet}
                          </p>
                        </div>
                      ))}
                    </div>
                  </CardContent>
                </Card>

                {/* Potential Contacts */}
                <Card>
                  <CardHeader>
                    <CardTitle className="text-lg">Potential Contacts</CardTitle>
                    <CardDescription>
                      Contacts that will be extracted from your emails
                    </CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-2">
                      {preview.potentialContacts
                        .slice(0, 10)
                        .map(
                          (
                            contact: { email: string; name?: string; frequency: number },
                            index: number,
                          ) => (
                            <div key={index} className="flex items-center justify-between py-2">
                              <div>
                                <p className="font-medium text-sm">{contact.name ?? "Unknown"}</p>
                                <p className="text-xs text-muted-foreground">{contact.email}</p>
                              </div>
                              <Badge variant="secondary" className="text-xs">
                                {contact.frequency} emails
                              </Badge>
                            </div>
                          ),
                        )}
                      {preview.potentialContacts.length > 10 && (
                        <p className="text-xs text-muted-foreground text-center py-2">
                          ... and {preview.potentialContacts.length - 10} more contacts
                        </p>
                      )}
                    </div>
                  </CardContent>
                </Card>
              </div>
            )}
          </div>

          {/* Footer */}
          {preview && (
            <div className="flex items-center justify-between p-6 border-t bg-gray-50">
              <div className="text-sm text-muted-foreground">
                This action will process {preview.totalEmails} emails and may create up to{" "}
                {preview.estimatedContacts} new contacts.
              </div>
              <div className="flex gap-2">
                <Button variant="outline" onClick={onClose}>
                  Cancel
                </Button>
                <Button onClick={handleApprove} disabled={isApproving}>
                  {isApproving ? (
                    <>
                      <CheckCircle className="h-4 w-4 mr-2 animate-spin" />
                      Processing...
                    </>
                  ) : (
                    <>
                      <CheckCircle className="h-4 w-4 mr-2" />
                      Approve & Sync
                    </>
                  )}
                </Button>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}


/* ===== src/app/(authorisedRoute)/omni-connect/_components/GmailSyncSetup.tsx ===== */

"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Progress } from "@/components/ui/progress";
import { CheckCircle, Download, Mail, Clock, Database } from "lucide-react";
import { toast } from "sonner";
import { post } from "@/lib/api/client";

interface SyncStats {
  totalFound: number;
  processed: number;
  inserted: number;
  errors: number;
  batchId: string;
}

export function GmailSyncSetup(): JSX.Element {
  const router = useRouter();
  const [isStarting, setIsStarting] = useState(false);
  const [syncStats, setSyncStats] = useState<SyncStats | null>(null);
  const [progress, setProgress] = useState(0);

  const startSync = async (): Promise<void> => {
    setIsStarting(true);
    setProgress(0);

    try {
      toast.info("Starting Gmail sync...", {
        description: "This will import your emails from the last 365 days",
      });

      // Show indeterminate progress since we don't have real-time updates
      setProgress(-1); // Use -1 to indicate indeterminate progress

      const response = await post<{
        message: string;
        stats: SyncStats;
      }>("/api/google/gmail/sync-direct", {
        daysBack: 365,
      });

      // Only show 100% when actually complete
      setProgress(100);

      setSyncStats(response.stats);
      toast.success("Gmail sync completed!", {
        description: `Successfully imported ${response.stats.inserted} emails`,
      });

      // After 2 seconds, redirect to the main dashboard
      setTimeout(() => {
        router.push("/omni-connect");
      }, 2000);
    } catch (error) {
      toast.error("Gmail sync failed", {
        description: error instanceof Error ? error.message : "Unknown error",
      });
      setProgress(0);
    } finally {
      setIsStarting(false);
    }
  };

  // Remove auto-start - user must manually confirm sync
  // useEffect(() => {
  //   if (!autoStarted && !isStarting && !syncStats) {
  //     setAutoStarted(true);
  //     void startSync();
  //   }
  // }, [autoStarted, isStarting, syncStats]);

  if (syncStats) {
    return (
      <div className="container mx-auto max-w-2xl p-6">
        <Card className="border-green-200 bg-green-50">
          <CardHeader className="text-center">
            <div className="flex justify-center mb-4">
              <CheckCircle className="h-12 w-12 text-green-600" />
            </div>
            <CardTitle className="text-green-800">Sync Complete!</CardTitle>
            <CardDescription className="text-green-700">
              Your Gmail emails have been successfully imported
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-2 gap-4 text-sm">
              <div className="flex items-center space-x-2">
                <Database className="h-4 w-4 text-green-600" />
                <span>Processed: {syncStats.processed}</span>
              </div>
              <div className="flex items-center space-x-2">
                <Download className="h-4 w-4 text-green-600" />
                <span>Imported: {syncStats.inserted}</span>
              </div>
              <div className="flex items-center space-x-2">
                <Mail className="h-4 w-4 text-green-600" />
                <span>Found: {syncStats.totalFound}</span>
              </div>
              <div className="flex items-center space-x-2">
                <Clock className="h-4 w-4 text-green-600" />
                <span>Errors: {syncStats.errors}</span>
              </div>
            </div>
            <Progress value={100} className="w-full" />
          </CardContent>
          <CardFooter className="text-center">
            <p className="text-sm text-green-700">Redirecting to your dashboard...</p>
          </CardFooter>
        </Card>
      </div>
    );
  }

  return (
    <div className="container mx-auto max-w-2xl p-6">
      <Card>
        <CardHeader className="text-center">
          <div className="flex justify-center mb-4">
            <Mail className="h-12 w-12 text-blue-600" />
          </div>
          <CardTitle>Gmail Connected Successfully!</CardTitle>
          <CardDescription>Now let&apos;s import your emails to get started</CardDescription>
        </CardHeader>
        <CardContent className="space-y-6">
          {isStarting && (
            <div className="space-y-4">
              {progress === -1 ? (
                <div className="w-full bg-muted rounded-full h-2">
                  <div className="h-2 bg-primary rounded-full animate-pulse"></div>
                </div>
              ) : (
                <Progress value={progress} className="w-full" />
              )}
              <p className="text-sm text-muted-foreground text-center">
                {progress === -1
                  ? "Fetching and processing your emails... This may take several minutes depending on your email volume."
                  : "Import complete!"}
              </p>
            </div>
          )}

          <div className="space-y-4">
            <h3 className="font-semibold">What will be imported:</h3>
            <div className="grid gap-3 text-sm text-muted-foreground">
              <div className="flex items-center space-x-3">
                <CheckCircle className="h-4 w-4 text-green-500 flex-shrink-0" />
                <span>ALL email messages (complete Gmail history)</span>
              </div>
              <div className="flex items-center space-x-3">
                <CheckCircle className="h-4 w-4 text-green-500 flex-shrink-0" />
                <span>ALL categories: Inbox, Promotions, Social, Updates, Forums</span>
              </div>
              <div className="flex items-center space-x-3">
                <CheckCircle className="h-4 w-4 text-green-500 flex-shrink-0" />
                <span>Drafts, chats, sent items - everything</span>
              </div>
              <div className="flex items-center space-x-3">
                <CheckCircle className="h-4 w-4 text-green-500 flex-shrink-0" />
                <span>Complete headers, text content, and metadata</span>
              </div>
            </div>
          </div>

          <div className="p-4 bg-blue-50 rounded-lg border border-blue-200">
            <p className="text-sm text-blue-800">
              <strong>Note:</strong> This will import your complete Gmail history with no filtering.
              This may take several minutes depending on your email volume.
            </p>
          </div>
        </CardContent>
        <CardFooter>
          <Button onClick={startSync} disabled={isStarting} className="w-full" size="lg">
            {isStarting ? "Importing..." : "Start Email Import"}
          </Button>
        </CardFooter>
      </Card>
    </div>
  );
}


/* ===== src/app/(authorisedRoute)/omni-connect/_components/GmailSyncTestCard.tsx ===== */

"use client";

import { useGmailSync } from "@/hooks/use-gmail-sync";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Mail, RefreshCw } from "lucide-react";
import { logger } from "@/lib/observability";

export function GmailSyncTestCard(): JSX.Element {
  // Updated for simplified useGmailSync hook (no preview modal)
  const { isSyncing, startSync } = useGmailSync();

  const handleSyncClick = (): void => {
    void logger.info("Gmail sync test initiated", { operation: "gmail_sync.test_click" });
    startSync();
  };

  return (
    <>
      <Card className="w-full max-w-md">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Mail className="h-5 w-5" />
            Gmail Sync Test Card
          </CardTitle>
          <CardDescription>Isolated test for Gmail sync modal functionality</CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex items-center justify-between">
            <span className="text-sm">Sync Status:</span>
            <Badge variant={isSyncing ? "default" : "outline"}>
              {isSyncing ? "Syncing..." : "Ready"}
            </Badge>
          </div>

          <Button onClick={handleSyncClick} disabled={isSyncing} className="w-full">
            <RefreshCw className={`h-4 w-4 mr-2 ${isSyncing ? "animate-spin" : ""}`} />
            Test Incremental Sync
          </Button>

          <div className="text-xs text-muted-foreground space-y-1">
            <div>🔍 Check browser console for debug logs</div>
            <div>⚡ Simplified hook - direct sync without preview</div>
          </div>
        </CardContent>
      </Card>
    </>
  );
}


/* ===== src/app/(authorisedRoute)/omni-connect/_components/IntelligenceView.tsx ===== */

"use client";

import type { JSX } from "react";
import { useSearchParams } from "next/navigation";
import { CategorizationStatusCard } from "./analytics/CategorizationStatusCard";
import { WeeklyIntelligenceSummaryCard } from "./analytics/WeeklyIntelligenceSummaryCard";
import { AIInsightsCard } from "./analytics/AIInsightsCard";

export function IntelligenceView(): JSX.Element {
  const searchParams = useSearchParams();
  const section = searchParams.get("section");

  return (
    <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
      {(!section || section === "categorization") && <CategorizationStatusCard />}
      {(!section || section === "summary") && <WeeklyIntelligenceSummaryCard />}
      {(!section || section === "insights") && <AIInsightsCard />}
    </div>
  );
}


/* ===== src/app/(authorisedRoute)/omni-connect/_components/TemplateAutomationCard.tsx ===== */

"use client";

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Zap, Plus, ArrowRight, CheckCircle2 } from "lucide-react";
import Link from "next/link";

interface EmailTemplate {
  id: string;
  name: string;
  emailCount: number;
  category: string;
  description: string;
  status: "active" | "draft" | "paused";
  usage: number;
}

interface TemplateAutomationCardProps {
  templates?: EmailTemplate[];
  onTemplateSelect?: (templateId: string) => void;
  onViewAll?: () => void;
  onCreateNew?: () => void;
}

export function TemplateAutomationCard({
  templates = [],
  onTemplateSelect,
  onViewAll,
  onCreateNew,
}: TemplateAutomationCardProps): JSX.Element {
  const handleUseTemplate = (templateId: string): void => {
    onTemplateSelect?.(templateId);
  };

  const activeTemplates = templates.filter((t) => t.status === "active").length;
  const totalUsage = templates.reduce((sum, t) => sum + (t.usage ?? 0), 0);

  return (
    <Card>
      <CardHeader className="pb-3">
        <div className="flex items-center justify-between">
          <CardTitle className="text-sm font-medium flex items-center gap-2">
            <Zap className="h-4 w-4 text-purple-600" />
            Template Automation
          </CardTitle>
          <Badge variant="secondary" className="gap-1">
            <CheckCircle2 className="h-3 w-3" />
            {activeTemplates} Active
          </Badge>
        </div>
      </CardHeader>
      <CardContent className="space-y-4">
        {templates.length > 0 ? (
          <>
            {/* Stats */}
            <div className="grid grid-cols-2 gap-4 text-sm">
              <div className="text-center">
                <div className="text-2xl font-bold text-primary">{totalUsage}</div>
                <div className="text-muted-foreground">Total Usage</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-primary">
                  {Math.round((totalUsage * 2.5) / 60)}h
                </div>
                <div className="text-muted-foreground">Time Saved</div>
              </div>
            </div>

            {/* Active Templates */}
            <div className="space-y-2">
              {templates.slice(0, 3).map((template) => (
                <div
                  key={template.id}
                  className="flex items-center justify-between p-2 border rounded-lg hover:bg-muted/50 transition-colors"
                >
                  <div className="flex items-center gap-2 flex-1 min-w-0">
                    <div className="flex-1 min-w-0">
                      <div className="flex items-center gap-2 mb-1">
                        <span className="text-xs font-medium truncate">{template.name}</span>
                        <Badge
                          variant={template.status === "active" ? "default" : "secondary"}
                          className="text-xs px-1 py-0"
                        >
                          {template.status}
                        </Badge>
                      </div>
                      <p className="text-xs text-muted-foreground line-clamp-1">
                        {template.description}
                      </p>
                    </div>
                  </div>
                  <Button
                    size="sm"
                    variant="ghost"
                    onClick={() => handleUseTemplate(template.id)}
                    className="shrink-0 h-8 w-8 p-0"
                  >
                    <ArrowRight className="h-3 w-3" />
                  </Button>
                </div>
              ))}
            </div>
          </>
        ) : (
          <div className="text-sm text-muted-foreground">No automation templates yet.</div>
        )}

        {/* Action Buttons */}
        <div className="flex gap-2">
          <Button variant="outline" size="sm" className="flex-1 gap-2" onClick={onViewAll} asChild>
            <Link href="/omni-connect?view=template-library">View All</Link>
          </Button>
          <Button
            variant="default"
            size="sm"
            className="flex-1 gap-2"
            onClick={onCreateNew}
            asChild
          >
            <Link href="/omni-connect?view=template-library&action=create">
              <Plus className="h-4 w-4" />
              Create
            </Link>
          </Button>
        </div>
      </CardContent>
    </Card>
  );
}


/* ===== src/app/(authorisedRoute)/omni-connect/_components/TemplateLibraryView.tsx ===== */

"use client";

import { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { Textarea } from "@/components/ui/textarea";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { FileText, Plus, Search, Edit3, Copy, Eye, Mail, Star } from "lucide-react";

interface EmailTemplate {
  id: string;
  name: string;
  category: "welcome" | "follow-up" | "booking" | "reminder" | "promotional" | "support";
  subject: string;
  content: string;
  tags: string[];
  usage: number;
  lastUsed?: string;
  isActive: boolean;
  isFavorite?: boolean;
}

// Type guard for category validation
function isValidCategory(value: string): value is EmailTemplate["category"] {
  return ["welcome", "follow-up", "booking", "reminder", "promotional", "support"].includes(value);
}

export function TemplateLibraryView(): JSX.Element {
  const [selectedCategory, setSelectedCategory] = useState<string>("all");
  const [searchQuery, setSearchQuery] = useState("");
  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);
  const [selectedTemplate, setSelectedTemplate] = useState<EmailTemplate | null>(null);
  const [newTemplate, setNewTemplate] = useState<{
    name: string;
    category: EmailTemplate["category"];
    subject: string;
    content: string;
    tags: string;
  }>({
    name: "",
    category: "welcome",
    subject: "",
    content: "",
    tags: "",
  });

  // TODO: Replace with real email templates from database
  // Templates should be generated from actual email patterns and LLM analysis
  const templates: EmailTemplate[] = [];

  const categories = [
    { value: "all", label: "All Templates", count: templates.length },
    {
      value: "welcome",
      label: "Welcome",
      count: templates.filter((t) => t.category === "welcome").length,
    },
    {
      value: "booking",
      label: "Booking",
      count: templates.filter((t) => t.category === "booking").length,
    },
    {
      value: "follow-up",
      label: "Follow-up",
      count: templates.filter((t) => t.category === "follow-up").length,
    },
    {
      value: "reminder",
      label: "Reminder",
      count: templates.filter((t) => t.category === "reminder").length,
    },
    {
      value: "promotional",
      label: "Promotional",
      count: templates.filter((t) => t.category === "promotional").length,
    },
  ];

  const filteredTemplates = templates.filter((template) => {
    const matchesCategory = selectedCategory === "all" || template.category === selectedCategory;
    const matchesSearch =
      template.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
      template.subject.toLowerCase().includes(searchQuery.toLowerCase()) ||
      template.tags.some((tag) => tag.toLowerCase().includes(searchQuery.toLowerCase()));
    return matchesCategory && matchesSearch;
  });

  const getCategoryBadgeColor = (category: EmailTemplate["category"]): string => {
    const colors = {
      welcome: "bg-green-100 text-green-800",
      booking: "bg-blue-100 text-blue-800",
      "follow-up": "bg-purple-100 text-purple-800",
      reminder: "bg-yellow-100 text-yellow-800",
      promotional: "bg-pink-100 text-pink-800",
      support: "bg-gray-100 text-gray-800",
    };
    return colors[category];
  };

  const handleCreateTemplate = (): void => {
    // Implementation for creating new template
    setIsCreateDialogOpen(false);
    setNewTemplate({ name: "", category: "welcome", subject: "", content: "", tags: "" });
  };

  const handleUseTemplate = (template: EmailTemplate): void => {
    // Implementation for using template
    // TODO: Implement template usage functionality
    // Template: template.name
    void template; // Explicitly mark as intentionally unused
  };

  const handleCopyTemplate = (template: EmailTemplate): void => {
    // Implementation for copying template
    navigator.clipboard
      .writeText(template.content)
      .then(() => {
        // Template copied to clipboard successfully
        // TODO: Show success toast notification
      })
      .catch((err: unknown) => {
        console.error("Failed to copy template:", template.name, err);
        // TODO: Show error toast notification
      });
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <CardTitle className="flex items-center gap-2">
              <FileText className="h-5 w-5" />
              Email Template Library
            </CardTitle>
            <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>
              <DialogTrigger asChild>
                <Button className="gap-2">
                  <Plus className="h-4 w-4" />
                  Create Template
                </Button>
              </DialogTrigger>
              <DialogContent className="max-w-2xl">
                <DialogHeader>
                  <DialogTitle>Create New Template</DialogTitle>
                  <DialogDescription>
                    Design a reusable email template for your wellness business.
                  </DialogDescription>
                </DialogHeader>
                <div className="space-y-4">
                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <label className="text-sm font-medium">Template Name</label>
                      <Input
                        placeholder="e.g., Welcome New Students"
                        value={newTemplate.name}
                        onChange={(e) => setNewTemplate({ ...newTemplate, name: e.target.value })}
                      />
                    </div>
                    <div>
                      <label className="text-sm font-medium">Category</label>
                      <select
                        className="w-full p-2 border rounded-md"
                        value={newTemplate.category}
                        onChange={(e) => {
                          const value = e.target.value;
                          if (isValidCategory(value)) {
                            setNewTemplate({ ...newTemplate, category: value });
                          }
                        }}
                      >
                        <option value="welcome">Welcome</option>
                        <option value="booking">Booking</option>
                        <option value="follow-up">Follow-up</option>
                        <option value="reminder">Reminder</option>
                        <option value="promotional">Promotional</option>
                        <option value="support">Support</option>
                      </select>
                    </div>
                  </div>
                  <div>
                    <label className="text-sm font-medium">Subject Line</label>
                    <Input
                      placeholder="Use {{variables}} for personalization"
                      value={newTemplate.subject}
                      onChange={(e) => setNewTemplate({ ...newTemplate, subject: e.target.value })}
                    />
                  </div>
                  <div>
                    <label className="text-sm font-medium">Email Content</label>
                    <Textarea
                      placeholder="Write your email template here. Use {{firstName}}, {{className}}, etc. for personalization"
                      rows={8}
                      value={newTemplate.content}
                      onChange={(e) => setNewTemplate({ ...newTemplate, content: e.target.value })}
                    />
                  </div>
                  <div>
                    <label className="text-sm font-medium">Tags (comma-separated)</label>
                    <Input
                      placeholder="e.g., welcome, new-client, orientation"
                      value={newTemplate.tags}
                      onChange={(e) => setNewTemplate({ ...newTemplate, tags: e.target.value })}
                    />
                  </div>
                </div>
                <DialogFooter>
                  <Button variant="outline" onClick={() => setIsCreateDialogOpen(false)}>
                    Cancel
                  </Button>
                  <Button onClick={handleCreateTemplate}>Create Template</Button>
                </DialogFooter>
              </DialogContent>
            </Dialog>
          </div>
        </CardHeader>
        <CardContent>
          <div className="flex flex-col sm:flex-row gap-4">
            <div className="relative flex-1">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4" />
              <Input
                placeholder="Search templates by name, subject, or tags..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                className="pl-10"
              />
            </div>
            <div className="flex gap-2 overflow-x-auto">
              {categories.map((category) => (
                <Button
                  key={category.value}
                  variant={selectedCategory === category.value ? "default" : "outline"}
                  size="sm"
                  onClick={() => setSelectedCategory(category.value)}
                  className="whitespace-nowrap"
                >
                  {category.label} ({category.count})
                </Button>
              ))}
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Templates Grid */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {filteredTemplates.map((template) => (
          <Card key={template.id} className="hover:shadow-md transition-shadow">
            <CardHeader className="pb-3">
              <div className="flex items-start justify-between">
                <div className="flex items-start gap-2">
                  <div>
                    <h3 className="font-semibold flex items-center gap-2">
                      {template.name}
                      {template.isFavorite && (
                        <Star className="h-4 w-4 fill-yellow-400 text-yellow-400" />
                      )}
                    </h3>
                    <p className="text-sm text-muted-foreground mt-1">{template.subject}</p>
                  </div>
                </div>
                <Badge className={getCategoryBadgeColor(template.category)}>
                  {template.category}
                </Badge>
              </div>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="text-sm text-muted-foreground line-clamp-3">{template.content}</div>

              <div className="flex flex-wrap gap-1">
                {template.tags.map((tag) => (
                  <Badge key={tag} variant="outline" className="text-xs">
                    {tag}
                  </Badge>
                ))}
              </div>

              <div className="flex items-center justify-between text-sm text-muted-foreground">
                <div className="flex items-center gap-4">
                  <span>Used {template.usage} times</span>
                  {template.lastUsed && (
                    <span>Last: {new Date(template.lastUsed).toLocaleDateString()}</span>
                  )}
                </div>
                <div
                  className={`text-xs px-2 py-1 rounded-full ${template.isActive ? "bg-green-100 text-green-800" : "bg-gray-100 text-gray-800"}`}
                >
                  {template.isActive ? "Active" : "Inactive"}
                </div>
              </div>

              <div className="flex gap-2">
                <Button
                  size="sm"
                  onClick={() => handleUseTemplate(template)}
                  className="flex-1 gap-1"
                >
                  <Mail className="h-4 w-4" />
                  Use
                </Button>
                <Button variant="outline" size="sm" onClick={() => setSelectedTemplate(template)}>
                  <Eye className="h-4 w-4" />
                </Button>
                <Button variant="outline" size="sm" onClick={() => handleCopyTemplate(template)}>
                  <Copy className="h-4 w-4" />
                </Button>
                <Button variant="outline" size="sm">
                  <Edit3 className="h-4 w-4" />
                </Button>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>

      {filteredTemplates.length === 0 && (
        <Card>
          <CardContent className="py-8 text-center">
            <FileText className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
            <h3 className="font-semibold mb-2">No templates found</h3>
            <p className="text-muted-foreground mb-4">
              {searchQuery || selectedCategory !== "all"
                ? "Try adjusting your search or filters"
                : "Create your first email template to get started"}
            </p>
            <Button onClick={() => setIsCreateDialogOpen(true)}>
              <Plus className="h-4 w-4 mr-2" />
              Create Your First Template
            </Button>
          </CardContent>
        </Card>
      )}

      {/* Template Preview Dialog */}
      {selectedTemplate && (
        <Dialog open={!!selectedTemplate} onOpenChange={() => setSelectedTemplate(null)}>
          <DialogContent className="max-w-2xl">
            <DialogHeader>
              <DialogTitle className="flex items-center gap-2">
                <FileText className="h-5 w-5" />
                {selectedTemplate.name}
              </DialogTitle>
              <DialogDescription>{selectedTemplate.subject}</DialogDescription>
            </DialogHeader>
            <div className="space-y-4">
              <div className="p-4 bg-muted/30 rounded-lg">
                <pre className="whitespace-pre-wrap text-sm">{selectedTemplate.content}</pre>
              </div>
              <div className="flex flex-wrap gap-1">
                {selectedTemplate.tags.map((tag) => (
                  <Badge key={tag} variant="outline" className="text-xs">
                    {tag}
                  </Badge>
                ))}
              </div>
            </div>
            <DialogFooter>
              <Button variant="outline" onClick={() => setSelectedTemplate(null)}>
                Close
              </Button>
              <Button onClick={() => handleUseTemplate(selectedTemplate)}>Use Template</Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>
      )}
    </div>
  );
}


/* ===== src/app/(authorisedRoute)/omni-connect/_components/types.ts ===== */

/**
 * =================================================================
 * SINGLE SOURCE OF TRUTH for Omni-Connect Module Types
 * =================================================================
 * This file consolidates all shared types for the email connection
 * and intelligence dashboard. It is provider-agnostic where possible.
 */

// --- Provider-Agnostic Core Types ---

export interface ConnectConnectionStatus {
  isConnected: boolean;
  emailCount?: number;
  contactCount?: number;
  lastSync?: string;
  error?: string;
  expiryDate?: string | undefined;
  hasRefreshToken?: boolean | undefined;
  autoRefreshed?: boolean | undefined;
  service?: string | undefined; // 'gmail' | 'unified' | 'auth'
}

export interface Job {
  id: string;
  kind: string;
  status: "queued" | "running" | "completed" | "error";
  progress?: number;
  message?: string;
  batchId?: string;
  createdAt: string;
  updatedAt: string;
  totalEmails?: number;
  processedEmails?: number;
  newEmails?: number;
  chunkSize?: number;
  chunksTotal?: number;
  chunksProcessed?: number;
}

// --- Email-Specific Types (Can be used by Gmail, Outlook, etc.) ---

export interface EmailPreview {
  id: string;
  subject: string;
  from: string;
  to?: string[];
  date: string;
  snippet: string;
  hasAttachments: boolean;
  labels: string[]; // For Gmail, this is labels; for Outlook, it could be categories.
}

export interface PreviewRange {
  from: string;
  to: string;
}

export interface SearchResult {
  subject: string;
  date: string;
  snippet: string;
  similarity: number;
  contactInfo?: {
    displayName?: string;
  };
}

// --- AI & Intelligence Types ---

export interface ContactData {
  displayName?: string;
  email: string;
  emailCount: number;
}

export interface EmailInsights {
  patterns?: string[];
  emailVolume?: {
    total: number;
    thisWeek: number;
    trend: "up" | "down" | "stable";
  };
  topContacts?: ContactData[];
}

export interface WeeklyDigest {
  id: string;
  title: string;
  date: string;
  summary: string;
  keyInsights: string[];
  actionItems: string[];
  topContacts: string[];
  emailVolume: number;
  // Extended properties from lib/types
  weekStart?: string;
  weekEnd?: string;
  insights?: DigestInsight[];
  status?: "generating" | "ready" | "error";
  createdAt?: string;
}

export interface DigestInsight {
  category: "marketing" | "business" | "wellness" | "client";
  title: string;
  summary: string;
  sourceEmails: number;
  actionItems: string[];
  confidence: number;
}

export interface MarketingWikiItem {
  id: string;
  title: string;
  category: "strategy" | "content" | "automation" | "analytics";
  summary: string;
  tags: string[];
  dateAdded: string;
}

export interface TemplateStats {
  totalTemplates: number;
  recentlyUsed: number;
  draftsInProgress: number;
  activeSequences: number;
}

// --- Unified Dashboard State Type ---

/**
 * Defines the complete data structure for the Omni-Connect dashboard.
 * This is the expected return type from the `useOmniConnect` hook.
 */
export interface ConnectDashboardState {
  connection: ConnectConnectionStatus;

  // Configuration status for first-time setup flow
  hasConfiguredSettings?: boolean;

  // Comprehensive sync status
  syncStatus?: {
    googleConnected: boolean;
    serviceTokens: {
      google: boolean; // For backward compatibility
      gmail: boolean;
      calendar: boolean;
      unified: boolean;
    };
    flags: {
      gmail: boolean;
      calendar: boolean;
    };
    lastSync: {
      gmail: string | null;
      calendar: string | null;
    };
    lastBatchId: string | null;
    grantedScopes: {
      gmail: unknown;
      calendar: unknown;
    };
    jobs: {
      queued: number;
      done: number;
      error: number;
    };
    embedJobs: {
      queued: number;
      done: number;
      error: number;
    };
  };

  jobs: {
    active: Job[];
    summary: {
      queued: number;
      running: number;
      completed: number;
      failed: number;
    };
    currentBatch?: string | null;
    totalEmails?: number;
    processedEmails?: number;
  } | null;

  emailPreview: {
    emails: EmailPreview[];
    range: PreviewRange | null;
    previewRange?: PreviewRange | null; // Backward compatibility
  };

  // Future-facing data for the dashboard
  weeklyDigest?: WeeklyDigest | null;
  marketingWikiCount?: number;
  wikiInsightsCount?: number; // Backward compatibility
  templateStats?: TemplateStats | null;
}

// --- Backward Compatibility Types ---

/**
 * @deprecated Use ConnectConnectionStatus instead
 */
export interface GmailConnectionStatus {
  isConnected: boolean;
  lastSync?: string;
  emailCount?: number;
  contactCount?: number;
  error?: string;
}

/**
 * @deprecated Use ConnectConnectionStatus instead
 */
export interface GmailStats {
  emailsProcessed: number;
  suggestedContacts: number;
  lastSync: string | null;
  isConnected: boolean;
}

/**
 * @deprecated Use Job instead
 */
export interface JobStatusResponse {
  id: string;
  kind: string;
  status: "queued" | "running" | "completed" | "error";
  progress?: number;
  message?: string;
  batchId?: string;
  createdAt: string;
  updatedAt: string;
  totalEmails?: number;
  processedEmails?: number;
  newEmails?: number;
  chunkSize?: number;
  chunksTotal?: number;
  chunksProcessed?: number;
}

/**
 * @deprecated Use ConnectDashboardState.jobs instead
 */
export interface JobStatus {
  jobs: JobStatusResponse[];
  currentBatch: string | null;
  totalEmails?: number;
  processedEmails?: number;
}

/**
 * @deprecated Use EmailInsights instead
 */
export interface Insights {
  patterns?: string[];
  topContacts?: Array<{
    displayName?: string;
    email: string;
    emailCount: number;
  }>;
}

/**
 * @deprecated Use ConnectDashboardState instead
 */
export interface OmniConnectDashboardState extends ConnectDashboardState {
  activeJobs: {
    jobs: JobStatusResponse[];
    currentBatch: string | null;
    totalEmails?: number;
    processedEmails?: number;
  };
}


/* ===== src/app/(authorisedRoute)/omni-connect/error.tsx ===== */

"use client";

import { useEffect } from "react";
import { Button } from "@/components/ui/button";
import { AlertTriangle, MessageSquare, Wifi, RefreshCw } from "lucide-react";
import { logger } from "@/lib/observability";

export default function MessagesError({
  error,
  reset,
}: {
  error: Error & { digest?: string };
  reset: () => void;
}): JSX.Element {
  useEffect(() => {
    void logger.error(
      "omni_connect_route_error",
      {
        operation: "route_error",
        additionalData: {
          component: "OmniConnectErrorBoundary",
          errorMessage: error.message,
          errorStack: error.stack?.split("\n")[0],
        },
      },
      error,
    );
  }, [error]);

  return (
    <div className="flex min-h-[500px] flex-col items-center justify-center space-y-6 p-6">
      <div className="flex flex-col items-center space-y-4 text-center">
        <div className="flex items-center justify-center w-16 h-16 bg-destructive/10 rounded-full">
          <MessageSquare className="h-8 w-8 text-destructive" />
        </div>

        <div className="space-y-2">
          <div className="flex items-center justify-center space-x-2">
            <AlertTriangle className="h-5 w-5 text-destructive" />
            <h2 className="text-xl font-semibold">Messages Error</h2>
          </div>

          <p className="text-muted-foreground max-w-md">
            We couldn&apos;t load your messages right now. This might be due to a connection issue
            or a temporary problem with our messaging service.
          </p>

          <div className="flex items-center justify-center gap-2 text-sm text-muted-foreground mt-4">
            <Wifi className="h-4 w-4" />
            <span>Check your internet connection and try again</span>
          </div>

          {process.env.NODE_ENV === "development" && error.message && (
            <details className="mt-4 p-4 bg-muted rounded-md text-left">
              <summary className="cursor-pointer text-sm font-medium">
                Error Details (Development)
              </summary>
              <p className="mt-2 text-xs font-mono text-muted-foreground">{error.message}</p>
            </details>
          )}
        </div>
      </div>

      <div className="flex flex-col sm:flex-row gap-3">
        <Button onClick={reset} variant="default" className="min-w-[120px]">
          <RefreshCw className="h-4 w-4 mr-2" />
          Try Again
        </Button>

        <Button
          variant="outline"
          onClick={() => (window.location.href = "/omni-flow")}
          className="min-w-[120px]"
        >
          Go to Dashboard
        </Button>
      </div>

      <p className="text-xs text-muted-foreground text-center max-w-sm">
        If this problem persists, please contact support or try accessing messages from a different
        device.
      </p>
    </div>
  );
}


/* ===== src/app/(authorisedRoute)/omni-connect/loading.tsx ===== */

import { Skeleton } from "@/components/ui/skeleton";
import { Card, CardContent, CardHeader } from "@/components/ui/card";

export default function MessagesLoading(): JSX.Element {
  return (
    <div className="flex flex-col h-[calc(100vh-8rem)] p-6">
      {/* Header Loading */}
      <div className="flex flex-col gap-4 md:flex-row md:items-center md:justify-between mb-6">
        <div className="space-y-2">
          <Skeleton className="h-8 w-32" />
          <Skeleton className="h-4 w-72" />
        </div>
        <div className="flex items-center gap-2">
          <Skeleton className="h-9 w-24" />
          <Skeleton className="h-9 w-32" />
        </div>
      </div>

      <div className="flex flex-1 gap-6 min-h-0">
        {/* Conversations List Loading */}
        <div className="w-80 flex flex-col">
          <Card className="flex-1 flex flex-col">
            <CardHeader className="pb-3">
              <div className="flex items-center justify-between">
                <Skeleton className="h-5 w-28" />
                <Skeleton className="h-8 w-8" />
              </div>

              <Skeleton className="h-9 w-full" />
            </CardHeader>

            <CardContent className="flex-1 p-0 overflow-hidden">
              <div className="space-y-1 p-3">
                {Array.from({ length: 6 }, (_, i) => (
                  <div key={i} className="flex items-start gap-3 p-3">
                    <div className="relative">
                      <Skeleton className="h-10 w-10 rounded-full" />
                      <Skeleton className="absolute -bottom-0.5 -right-0.5 w-3 h-3 rounded-full" />
                    </div>

                    <div className="flex-1 space-y-2">
                      <div className="flex items-center justify-between">
                        <Skeleton className="h-4 w-24" />
                        <div className="flex items-center gap-1">
                          <Skeleton className="h-4 w-4 rounded-full" />
                          <Skeleton className="h-3 w-12" />
                        </div>
                      </div>
                      <Skeleton className="h-3 w-full" />
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Chat Area Loading */}
        <div className="flex-1 flex flex-col">
          <Card className="flex-1 flex flex-col">
            {/* Chat Header Loading */}
            <CardHeader className="pb-3">
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-3">
                  <Skeleton className="h-10 w-10 rounded-full" />
                  <div className="space-y-2">
                    <Skeleton className="h-4 w-32" />
                    <Skeleton className="h-3 w-20" />
                  </div>
                </div>

                <div className="flex items-center gap-2">
                  <Skeleton className="h-8 w-8" />
                  <Skeleton className="h-8 w-8" />
                  <Skeleton className="h-8 w-8" />
                  <Skeleton className="h-8 w-8" />
                </div>
              </div>
            </CardHeader>

            <div className="border-t" />

            {/* Messages Loading */}
            <CardContent className="flex-1 p-4 space-y-4">
              {Array.from({ length: 4 }, (_, i) => (
                <div
                  key={i}
                  className={`flex gap-3 ${i % 2 === 0 ? "justify-start" : "justify-end"}`}
                >
                  {i % 2 === 0 && <Skeleton className="h-8 w-8 rounded-full mt-1" />}

                  <div className="space-y-1">
                    <Skeleton className={`h-16 ${i % 2 === 0 ? "w-64" : "w-48"} rounded-lg`} />
                    <Skeleton className="h-3 w-12" />
                  </div>
                </div>
              ))}
            </CardContent>

            <div className="border-t" />

            {/* Message Input Loading */}
            <CardContent className="p-4">
              <div className="flex items-end gap-2">
                <Skeleton className="flex-1 h-10" />
                <div className="flex items-center gap-1">
                  <Skeleton className="h-8 w-8" />
                  <Skeleton className="h-8 w-8" />
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
}


/* ===== src/app/(authorisedRoute)/omni-connect/not-found.tsx ===== */

import { MessageSquare, Home, ArrowLeft, Plus } from "lucide-react";
import { Button } from "@/components/ui/button";
import Link from "next/link";

export default function MessagesNotFound(): JSX.Element {
  return (
    <div className="flex min-h-[500px] flex-col items-center justify-center space-y-6 p-6">
      <div className="flex flex-col items-center space-y-4 text-center">
        <div className="flex items-center justify-center w-16 h-16 bg-muted rounded-full">
          <MessageSquare className="h-8 w-8 text-muted-foreground" />
        </div>

        <div className="space-y-2">
          <h2 className="text-2xl font-semibold">Message Not Found</h2>
          <p className="text-muted-foreground max-w-md">
            The message or conversation you&apos;re looking for doesn&apos;t exist, may have been
            deleted, or you don&apos;t have permission to access it.
          </p>
        </div>
      </div>

      <div className="flex flex-col sm:flex-row gap-3">
        <Button asChild variant="default" className="min-w-[140px]">
          <Link href="/messages">
            <MessageSquare className="h-4 w-4 mr-2" />
            View Messages
          </Link>
        </Button>

        <Button asChild variant="outline" className="min-w-[140px]">
          <Link href="/omni-flow">
            <Home className="h-4 w-4 mr-2" />
            Back to Dashboard
          </Link>
        </Button>
      </div>

      <div className="flex flex-col sm:flex-row gap-3">
        <Button
          variant="ghost"
          size="sm"
          onClick={() => window.history.back()}
          className="text-muted-foreground"
        >
          <ArrowLeft className="h-4 w-4 mr-2" />
          Go Back
        </Button>

        <Button asChild variant="ghost" size="sm" className="text-muted-foreground">
          <Link href="/messages">
            <Plus className="h-4 w-4 mr-2" />
            Start New Conversation
          </Link>
        </Button>
      </div>
    </div>
  );
}


/* ===== src/app/(authorisedRoute)/omni-connect/page.tsx ===== */

import { Metadata } from "next";
import { ConnectPage } from "@/app/(authorisedRoute)/omni-connect/_components/ConnectPage";

export const metadata: Metadata = {
  title: "OmniCRM",
  description: "Connect: Gmail intelligence and smart email digests for your wellness practice",
};

export default function Page(): JSX.Element {
  return <ConnectPage />;
}


/* ===== src/app/(authorisedRoute)/omni-flow/_components/DashboardContent.tsx ===== */

"use client";

import {
  AlertCircle,
  ArrowRight,
  Calendar,
  Clock,
  Plus,
  Users,
  Activity,
  CheckSquare,
  RefreshCw,
} from "lucide-react";
import Link from "next/link";
import { useState } from "react";
import { useQuery } from "@tanstack/react-query";
import { fetchContacts } from "@/lib/services/client/contacts.service";
import type { ContactDTO } from "@/lib/validation/schemas/omniClients";
import MonthlySessionsKpi from "./MonthlySessionsKpi";
import { getSyncStatus } from "@/lib/services/client/sync.service";

import {
  Alert,
  AlertDescription,
  AlertTitle,
  Avatar,
  AvatarImage,
  Button,
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
  Tabs,
  TabsContent,
  TabsList,
  TabsTrigger,
} from "@/components/ui";

// UI Components

// Format date helper
const formatDate = (dateString: string | null | undefined): string => {
  if (!dateString) return "N/A";
  return new Date(dateString).toLocaleDateString(undefined, {
    year: "numeric",
    month: "short",
    day: "numeric",
  });
};

export default function DashboardContent(): JSX.Element {
  const [activeTab, setActiveTab] = useState("overview");

  // Fetch contacts data (recent first)
  const { data, isLoading, error } = useQuery({
    queryKey: ["contacts", "dashboard", "recent"],
    queryFn: () => fetchContacts({ page: 1, pageSize: 50, sort: "createdAt", order: "desc" }),
    staleTime: 30_000,
  });
  const contacts: ContactDTO[] = data?.items ?? [];

  const { data: sync, isLoading: syncLoading } = useQuery({
    queryKey: ["sync", "status"],
    queryFn: getSyncStatus,
    staleTime: 15_000,
  });

  // Loading state
  if (isLoading) {
    return (
      <div className="flex justify-center items-center min-h-[50vh]">
        <div className="animate-spin rounded-full h-12 w-12 border-2 border-current border-t-transparent text-primary"></div>
      </div>
    );
  }

  // Error state
  if (error) {
    return (
      <div className="py-6">
        <Alert variant="destructive">
          <AlertCircle className="h-4 w-4" />
          <AlertTitle>Error</AlertTitle>
          <AlertDescription>
            Failed to load dashboard data: {error instanceof Error ? error.message : String(error)}
          </AlertDescription>
        </Alert>
      </div>
    );
  }

  // Calculate stats
  const totalContacts = data?.total ?? contacts.length;
  const recentActivity = 5; // Mock data - replace with actual count
  const upcomingTasks = 3; // Mock data - replace with actual count

  return (
    <div className="py-6">
      <div className="flex flex-col space-y-8">
        {/* Header */}
        <div>
          <h1 className="text-3xl font-bold tracking-tight">Dashboard</h1>
          <p className="text-muted-foreground mt-1">Welcome to your contact management system</p>
        </div>

        {/* Stats Overview */}
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Total Contacts</CardTitle>
              <Users className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{totalContacts}</div>
              <p className="text-xs text-muted-foreground">
                {totalContacts === 1 ? "1 contact" : `${totalContacts} contacts`} in your CRM
              </p>
            </CardContent>
            <CardFooter>
              <Link
                href="/contacts"
                className="text-xs text-blue-600 hover:underline flex items-center"
              >
                View all contacts
                <ArrowRight className="ml-1 h-3 w-3" />
              </Link>
            </CardFooter>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle>Welcome to OmniCRM</CardTitle>
              <CardDescription>
                Your contact management system is ready. Add contacts, sync with Google services,
                and track your interactions.
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="flex flex-wrap gap-3">
                <Button asChild>
                  <Link href="/contacts/new">Add First Contact</Link>
                </Button>
              </div>
            </CardContent>
          </Card>

          {/* Sync Status */}
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Sync Status</CardTitle>
              <RefreshCw className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent className="space-y-2">
              {syncLoading ? (
                <div className="text-sm text-muted-foreground">Loading…</div>
              ) : (
                <div className="space-y-4">
                  <div>
                    <div className="flex items-center justify-between">
                      <div className="text-sm font-medium">Gmail</div>
                      <div
                        className={`text-xs ${sync?.serviceTokens?.gmail ? "text-green-600" : "text-amber-600"}`}
                      >
                        {sync?.serviceTokens?.gmail ? "Connected" : "Not connected"}
                      </div>
                    </div>
                    <div className="text-xs text-muted-foreground mt-1">
                      Last sync: {formatDate(sync?.lastSync?.gmail)}{" "}
                      {sync?.lastSync?.gmail && new Date(sync.lastSync.gmail).toLocaleTimeString()}
                    </div>
                  </div>
                  <div>
                    <div className="flex items-center justify-between">
                      <div className="text-sm font-medium">Calendar</div>
                      <div
                        className={`text-xs ${sync?.serviceTokens?.calendar ? "text-green-600" : "text-amber-600"}`}
                      >
                        {sync?.serviceTokens?.calendar ? "Connected" : "Not connected"}
                      </div>
                    </div>
                    <div className="text-xs text-muted-foreground mt-1">
                      Last sync: {formatDate(sync?.lastSync?.calendar)}{" "}
                      {sync?.lastSync?.calendar &&
                        new Date(sync.lastSync.calendar).toLocaleTimeString()}
                    </div>
                  </div>
                </div>
              )}
            </CardContent>
          </Card>
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Recent Activity</CardTitle>
              <Activity className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{recentActivity}</div>
              <p className="text-xs text-muted-foreground">
                {recentActivity} activities in the last 7 days
              </p>
            </CardContent>
            <CardFooter>
              <Link href="#" className="text-xs text-blue-600 hover:underline flex items-center">
                View activity log
                <ArrowRight className="ml-1 h-3 w-3" />
              </Link>
            </CardFooter>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Upcoming Tasks</CardTitle>
              <CheckSquare className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{upcomingTasks}</div>
              <p className="text-xs text-muted-foreground">
                {upcomingTasks} tasks scheduled for this week
              </p>
            </CardContent>
            <CardFooter>
              <Link href="#" className="text-xs text-blue-600 hover:underline flex items-center">
                View all tasks
                <ArrowRight className="ml-1 h-3 w-3" />
              </Link>
            </CardFooter>
          </Card>

          <MonthlySessionsKpi />
        </div>

        {/* Tabs for different dashboard sections */}
        <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
          <TabsList className="grid w-full grid-cols-3">
            <TabsTrigger value="overview">Overview</TabsTrigger>
            <TabsTrigger value="recent">Recent Contacts</TabsTrigger>
            <TabsTrigger value="activity">Activity</TabsTrigger>
          </TabsList>

          {/* Overview Tab */}
          <TabsContent value="overview" className="space-y-4">
            <Card>
              <CardHeader>
                <CardTitle>Quick Actions</CardTitle>
                <CardDescription>Common tasks and shortcuts</CardDescription>
              </CardHeader>
              <CardContent className="grid grid-cols-2 sm:grid-cols-4 gap-4">
                <Button
                  variant="outline"
                  className="h-auto flex flex-col items-center justify-center p-4 space-y-2"
                  asChild
                >
                  <Link href="/contacts">
                    <Users className="h-6 w-6 mb-2" />
                    <span>View Contacts</span>
                  </Link>
                </Button>
                <Button
                  variant="outline"
                  className="h-auto flex flex-col items-center justify-center p-4 space-y-2"
                  disabled
                >
                  <Calendar className="h-6 w-6 mb-2" />
                  <span>Schedule Task</span>
                </Button>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>System Status</CardTitle>
                <CardDescription>Current system information</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="flex justify-between items-center">
                  <span className="text-sm font-medium">Database</span>
                  <span className="text-sm text-green-600">Connected</span>
                </div>
                <div className="flex justify-between items-center">
                  <span className="text-sm font-medium">API</span>
                  <span className="text-sm text-green-600">Operational</span>
                </div>
                <div className="flex justify-between items-center">
                  <span className="text-sm font-medium">Last Backup</span>
                  <span className="text-sm">Today, 03:45 AM</span>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* Recent Contacts Tab */}
          <TabsContent value="recent" className="space-y-4">
            <Card>
              <CardHeader className="flex flex-row items-center justify-between space-y-0">
                <div>
                  <CardTitle>Recent Contacts</CardTitle>
                  <CardDescription>Your most recently added contacts</CardDescription>
                </div>
                <Button asChild>
                  <Link href="/contacts?new=true">
                    <Plus className="mr-2 h-4 w-4" />
                    Add Contact
                  </Link>
                </Button>
              </CardHeader>
              <CardContent>
                {contacts && contacts.length > 0 ? (
                  <div className="rounded-md border">
                    <div className="grid grid-cols-1 divide-y">
                      {contacts.slice(0, 5).map((contact: ContactDTO) => {
                        // Type guards for strict safety
                        const id =
                          typeof contact.id === "string" || typeof contact.id === "number"
                            ? String(contact.id)
                            : undefined;
                        const fullName =
                          typeof contact.displayName === "string" ? contact.displayName : "";
                        // ContactDTO doesn't have profileImageUrl property
                        const avatarUrl: string | undefined = undefined;
                        const email =
                          typeof contact.primaryEmail === "string" ? contact.primaryEmail : "";
                        const createdAt =
                          typeof contact.createdAt === "string" ? contact.createdAt : undefined;
                        if (!id) return null;
                        return (
                          <Link
                            key={id}
                            href={`/contacts/${id}`}
                            className="flex items-center p-4 hover:bg-muted/50 transition-colors"
                          >
                            <Avatar className="h-10 w-10 mr-4">
                              {avatarUrl ? <AvatarImage src={avatarUrl} alt={fullName} /> : null}
                            </Avatar>
                            <div className="flex-1 min-w-0">
                              <p className="text-sm font-medium truncate">{fullName}</p>
                              <p className="text-sm text-muted-foreground truncate">{email}</p>
                            </div>
                            <div className="text-sm text-muted-foreground flex items-center">
                              <Clock className="h-3 w-3 mr-1" />
                              {formatDate(createdAt)}
                            </div>
                          </Link>
                        );
                      })}
                    </div>
                  </div>
                ) : (
                  <div className="flex flex-col items-center justify-center py-12 text-center">
                    <Users className="h-12 w-12 text-muted-foreground mb-4" />
                    <h3 className="text-lg font-medium">No contacts found</h3>
                    <p className="text-muted-foreground mt-1">
                      Get started by adding your first contact.
                    </p>
                    <Button className="mt-4" asChild>
                      <Link href="/contacts?new=true">
                        <Plus className="mr-2 h-4 w-4" />
                        Add Contact
                      </Link>
                    </Button>
                  </div>
                )}
              </CardContent>
              <CardFooter>
                <Button variant="outline" className="w-full" asChild>
                  <Link href="/contacts">
                    View All Contacts
                    <ArrowRight className="ml-2 h-4 w-4" />
                  </Link>
                </Button>
              </CardFooter>
            </Card>
          </TabsContent>

          {/* Activity Tab */}
          <TabsContent value="activity" className="space-y-4">
            <Card>
              <CardHeader>
                <CardTitle>Recent Activity</CardTitle>
                <CardDescription>Your latest actions and system events</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="relative">
                  <div className="absolute left-3 top-0 bottom-0 w-px bg-muted-foreground/20"></div>
                  <div className="space-y-6 ml-6">
                    {/* Mock activity items - replace with actual data */}
                    <div className="relative">
                      <div className="absolute -left-9 top-1 h-4 w-4 rounded-full bg-primary"></div>
                      <div className="space-y-1">
                        <p className="text-sm font-medium">Contact Added</p>
                        <p className="text-sm text-muted-foreground">
                          You added a new contact: Jane Smith
                        </p>
                        <p className="text-xs text-muted-foreground">Today, 10:30 AM</p>
                      </div>
                    </div>
                    <div className="relative">
                      <div className="absolute -left-9 top-1 h-4 w-4 rounded-full bg-primary"></div>
                      <div className="space-y-1">
                        <p className="text-sm font-medium">Contact Updated</p>
                        <p className="text-sm text-muted-foreground">
                          You updated contact details: John Doe
                        </p>
                        <p className="text-xs text-muted-foreground">Yesterday, 3:45 PM</p>
                      </div>
                    </div>
                    <div className="relative">
                      <div className="absolute -left-9 top-1 h-4 w-4 rounded-full bg-primary"></div>
                      <div className="space-y-1">
                        <p className="text-sm font-medium">System Update</p>
                        <p className="text-sm text-muted-foreground">
                          System backup completed successfully
                        </p>
                        <p className="text-xs text-muted-foreground">Yesterday, 1:15 AM</p>
                      </div>
                    </div>
                  </div>
                </div>
              </CardContent>
              <CardFooter>
                <Button variant="outline" className="w-full" disabled>
                  View Full Activity Log
                  <ArrowRight className="ml-2 h-4 w-4" />
                </Button>
              </CardFooter>
            </Card>
          </TabsContent>
        </Tabs>

        {/* Enhanced Dashboard Section - New Features */}
        <Card className="mt-8">
          <CardHeader>
            <CardTitle>Enhanced Dashboard Features</CardTitle>
            <CardDescription>Additional analytics and KPIs for improved insight</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {/* New Analytics Cards */}
              <div className="p-4 border rounded-lg">
                <div className="flex items-center gap-2 mb-2">
                  <Activity className="h-4 w-4 text-blue-500" />
                  <h4 className="font-medium">Engagement Score</h4>
                </div>
                <div className="text-2xl font-bold">85%</div>
                <p className="text-sm text-muted-foreground">Average contact engagement</p>
              </div>

              <div className="p-4 border rounded-lg">
                <div className="flex items-center gap-2 mb-2">
                  <Calendar className="h-4 w-4 text-green-500" />
                  <h4 className="font-medium">This Week</h4>
                </div>
                <div className="text-2xl font-bold">{upcomingTasks}</div>
                <p className="text-sm text-muted-foreground">Scheduled activities</p>
              </div>

              <div className="p-4 border rounded-lg">
                <div className="flex items-center gap-2 mb-2">
                  <CheckSquare className="h-4 w-4 text-purple-500" />
                  <h4 className="font-medium">Completed</h4>
                </div>
                <div className="text-2xl font-bold">12</div>
                <p className="text-sm text-muted-foreground">Tasks this month</p>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}


/* ===== src/app/(authorisedRoute)/omni-flow/_components/DashboardSidebar.tsx ===== */

"use client";

// 1. Import the placeholder navigation components from the v0 block
// These will be replaced later with real, data-driven components.
import { NavMain } from "@/components/layout/QuickLinksNav";
//import { NavProjects } from '@/components/layout/ProjectLinksNav';
// Import the types needed for the navigation components
import { NavItem } from "@/components/layout/QuickLinksNav";
//import { ProjectItem } from '@/components/layout/ProjectLinksNav';

// Import the structural primitives from our sidebar system
import { SidebarContent } from "@/components/ui/sidebar";

import { Settings2, CloudLightning } from "lucide-react";

// This is the demo data required by the placeholder nav components.
// We keep it here temporarily for the demo to function.
// In a real implementation, this data would be fetched or passed via props.

// Define your actual navigation structure
const quickLinksData: NavItem[] = [
  {
    title: "Quick Actions",
    url: "#",
    icon: CloudLightning,
    isActive: true,
    items: [
      {
        title: "Add Contact",
        url: "/contacts/new",
      },
      {
        title: "Add Task",
        url: "/tasks/new",
      },
    ],
  },
  {
    title: "Settings",
    url: "#",
    icon: Settings2,
    items: [
      {
        title: "👤 Account Settings",
        url: "/settings/account",
      },
    ],
  },
];
export function DashboardSidebar(): JSX.Element {
  //const { projects, loading } = useProjects();

  return (
    <SidebarContent>
      {/* Quick Links Navigation */}
      <NavMain items={quickLinksData} />
    </SidebarContent>
  );
}


/* ===== src/app/(authorisedRoute)/omni-flow/_components/MonthlySessionsKpi.tsx ===== */

"use client";

import { useMemo } from "react";
import { useQuery } from "@tanstack/react-query";
import { getSupabaseBrowser } from "@/lib/supabase/browser-client";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui";

function startOfMonth(d: Date): Date {
  return new Date(d.getFullYear(), d.getMonth(), 1, 0, 0, 0, 0);
}
function addMonths(d: Date, delta: number): Date {
  return new Date(d.getFullYear(), d.getMonth() + delta, 1, 0, 0, 0, 0);
}

export default function MonthlySessionsKpi(): JSX.Element {
  const now = useMemo(() => new Date(), []);
  const thisStart = useMemo(() => startOfMonth(now), [now]);
  const nextStart = useMemo(() => addMonths(thisStart, 1), [thisStart]);
  const prev1Start = useMemo(() => addMonths(thisStart, -1), [thisStart]);
  const prev2Start = useMemo(() => addMonths(thisStart, -2), [thisStart]);
  const prev3Start = useMemo(() => addMonths(thisStart, -3), [thisStart]);

  const monthLabels = useMemo(() => {
    const fmt = (d: Date): string => d.toLocaleString(undefined, { month: "short" });
    return [fmt(prev3Start), fmt(prev2Start), fmt(prev1Start), fmt(thisStart)];
  }, [prev3Start, prev2Start, prev1Start, thisStart]);

  const { data, isLoading, error } = useQuery({
    queryKey: ["dashboard", "kpi", "sessions-monthly"],
    queryFn: async () => {
      const supabase = getSupabaseBrowser();

      // Count meetings per month (4 months: prev3, prev2, prev1, this)
      const ranges = [
        { from: prev3Start, to: prev2Start },
        { from: prev2Start, to: prev1Start },
        { from: prev1Start, to: thisStart },
        { from: thisStart, to: nextStart },
      ];

      const meetingPromises = ranges.map((r) =>
        supabase
          .from("interactions")
          .select("*", { head: true, count: "exact" })
          .eq("type", "meeting")
          .gte("occurred_at", r.from.toISOString())
          .lt("occurred_at", r.to.toISOString()),
      );

      const riskThisMonthPromise = supabase
        .from("ai_insights")
        .select("*", { head: true, count: "exact" })
        .eq("kind", "risk")
        .gte("created_at", thisStart.toISOString())
        .lt("created_at", nextStart.toISOString());

      const [m0, m1, m2, m3, risks] = await Promise.all([...meetingPromises, riskThisMonthPromise]);

      const safeCount = (r: { count?: number | null } | null | undefined): number =>
        typeof r?.count === "number" ? r.count : 0;

      const counts: [number, number, number, number] = [
        safeCount(m0),
        safeCount(m1),
        safeCount(m2),
        safeCount(m3),
      ];
      const current = counts[3] ?? 0;
      const trailing3 = ((counts[0] ?? 0) + (counts[1] ?? 0) + (counts[2] ?? 0)) / 3;

      return {
        counts,
        current,
        trailing3,
        riskThisMonth: safeCount(risks),
      };
    },
    staleTime: 60_000,
  });

  const current = data?.current ?? 0;
  const trailing3 = data?.trailing3 ?? 0;
  const delta = trailing3 === 0 ? 0 : ((current - trailing3) / trailing3) * 100;
  const chartCounts = data?.counts ?? [0, 0, 0, 0];
  const maxVal = Math.max(1, ...chartCounts);

  return (
    <Card>
      <CardHeader>
        <CardTitle>Sessions this month</CardTitle>
        <CardDescription>
          Comparing against the last 3 months average. Risks flagged this month:{" "}
          {data?.riskThisMonth ?? 0}
        </CardDescription>
      </CardHeader>
      <CardContent>
        {isLoading ? (
          <div className="h-16 flex items-center">Loading…</div>
        ) : error ? (
          <div className="text-sm text-red-600">Failed to load KPI.</div>
        ) : (
          <div className="space-y-3">
            <div className="flex items-baseline gap-3">
              <div className="text-3xl font-semibold tabular-nums">{current}</div>
              <div className="text-sm text-muted-foreground">
                vs avg {Math.round(trailing3)}
                {trailing3 > 0 && (
                  <span className={delta >= 0 ? "text-emerald-600 ml-2" : "text-rose-600 ml-2"}>
                    {delta >= 0 ? "+" : ""}
                    {delta.toFixed(0)}%
                  </span>
                )}
              </div>
            </div>

            {/* Mini bar chart for prev3 -> current */}
            <div className="grid grid-cols-4 gap-2 items-end h-20">
              {chartCounts.map((v, i) => {
                const h = Math.max(4, Math.round((v / maxVal) * 70));
                const isCurrent = i === chartCounts.length - 1;
                return (
                  <div key={i} className="flex flex-col items-center gap-1">
                    <div
                      className={
                        "w-8 rounded-sm transition-colors " +
                        (isCurrent ? "bg-teal-500" : "bg-muted-foreground/30")
                      }
                      style={{ height: `${h}px` }}
                      title={`${monthLabels[i]}: ${v}`}
                    />
                    <span className="text-[10px] text-muted-foreground">{monthLabels[i]}</span>
                  </div>
                );
              })}
            </div>
          </div>
        )}
      </CardContent>
    </Card>
  );
}


/* ===== src/app/(authorisedRoute)/omni-flow/error.tsx ===== */

"use client";

import { useEffect } from "react";
import { Button } from "@/components/ui";
import { AlertTriangle } from "lucide-react";
import { logger } from "@/lib/observability";

export default function Error({
  error,
  reset,
}: {
  error: Error & { digest?: string };
  reset: () => void;
}): JSX.Element {
  useEffect(() => {
    void logger.error(
      "Route error occurred",
      {
        operation: "omni_flow_error_boundary",
        additionalData: {
          digest: error.digest,
          errorName: error.name,
          errorMessage: error.message,
        },
      },
      error,
    );
  }, [error]);

  return (
    <div className="flex min-h-[400px] flex-col items-center justify-center space-y-4 p-6">
      <div className="flex items-center space-x-2 text-destructive">
        <AlertTriangle className="h-6 w-6" />
        <h2 className="text-lg font-semibold">Something went wrong!</h2>
      </div>
      <p className="text-sm text-muted-foreground text-center max-w-md">
        An error occurred while loading this page. Please try again or contact support if the
        problem persists.
      </p>
      <Button onClick={reset} variant="outline">
        Try again
      </Button>
    </div>
  );
}


/* ===== src/app/(authorisedRoute)/omni-flow/loading.tsx ===== */

import { Skeleton } from "@/components/ui";

export default function Loading(): JSX.Element {
  return (
    <div className="space-y-4 p-6">
      <div className="space-y-2">
        <Skeleton className="h-8 w-1/3" />
        <Skeleton className="h-4 w-1/2" />
      </div>
      <div className="grid gap-4">
        <Skeleton className="h-32 w-full" />
        <Skeleton className="h-32 w-full" />
        <Skeleton className="h-32 w-full" />
      </div>
    </div>
  );
}


/* ===== src/app/(authorisedRoute)/omni-flow/not-found.tsx ===== */

import Link from "next/link";
import { Button } from "@/components/ui";
import { FileX } from "lucide-react";

export default function NotFound(): JSX.Element {
  return (
    <div className="flex min-h-[400px] flex-col items-center justify-center space-y-4 p-6">
      <div className="flex items-center space-x-2 text-muted-foreground">
        <FileX className="h-8 w-8" />
        <h2 className="text-xl font-semibold">Not Found</h2>
      </div>
      <p className="text-sm text-muted-foreground text-center max-w-md">
        The page you&apos;re looking for doesn&apos;t exist or has been moved.
      </p>
      <Button asChild>
        <Link href="/">Return Home</Link>
      </Button>
    </div>
  );
}


/* ===== src/app/(authorisedRoute)/omni-flow/page.tsx ===== */

// Dashboard page that imports the DashboardContent component
import DashboardContent from "./_components/DashboardContent";

export default function Dashboard(): JSX.Element {
  return <DashboardContent />;
}


/* ===== src/app/(authorisedRoute)/omni-momentum/_components/approval-queue.tsx ===== */

"use client";

import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Checkbox } from "@/components/ui/checkbox";
import { Textarea } from "@/components/ui/textarea";
import { Label } from "@/components/ui/label";
import { Check, X, Bot, Clock, Flag, MessageSquare } from "lucide-react";
import { format } from "date-fns";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { apiClient } from "@/lib/api/client";
import { useToast } from "@/hooks/use-toast";
import type { Momentum } from "@/server/db/schema";

interface TaskActionRequestBody {
  notes?: string;
}

interface ApprovalQueueProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  pendingTasks: Momentum[];
}

interface TaskApprovalCardProps {
  task: Momentum;
  isSelected: boolean;
  onSelect: (selected: boolean) => void;
  onApprove: (taskId: string, notes?: string) => void;
  onReject: (taskId: string, notes?: string) => void;
}

function TaskApprovalCard({
  task,
  isSelected,
  onSelect,
  onApprove,
  onReject,
}: TaskApprovalCardProps): JSX.Element {
  const [showNotes, setShowNotes] = useState(false);
  const [notes, setNotes] = useState("");

  const getPriorityColor = (priority: string): string => {
    const colors = {
      low: "text-green-600 dark:text-green-400 border-l-green-500",
      medium: "text-blue-600 dark:text-blue-400 border-l-blue-500",
      high: "text-orange-600 dark:text-orange-400 border-l-orange-500",
      urgent: "text-red-600 dark:text-red-400 border-l-red-500",
    } as const;

    if (priority in colors) {
      return colors[priority as keyof typeof colors];
    }
    return colors.medium;
  };

  const handleApprove = (): void => {
    onApprove(task.id, notes.trim() || undefined);
    setNotes("");
    setShowNotes(false);
  };

  const handleReject = (): void => {
    onReject(task.id, notes.trim() || undefined);
    setNotes("");
    setShowNotes(false);
  };

  return (
    <Card
      className={`border-l-4 ${getPriorityColor(task.priority)} ${isSelected ? "ring-2 ring-primary" : ""}`}
    >
      <CardHeader className="pb-3">
        <div className="flex items-start justify-between">
          <div className="flex items-start gap-3 flex-1">
            <Checkbox
              checked={isSelected}
              onCheckedChange={onSelect}
              data-testid={`checkbox-task-${task.id}`}
            />
            <div className="flex-1">
              <div className="flex items-center gap-2 mb-2">
                <Bot className="h-4 w-4 text-blue-500" />
                <CardTitle className="text-sm font-medium">{task.title}</CardTitle>
                <div className="flex items-center gap-1">
                  <Flag className={`h-3 w-3 ${getPriorityColor(task.priority)}`} />
                  <span className="text-xs capitalize">{task.priority}</span>
                </div>
              </div>

              {task.description && (
                <p className="text-sm text-muted-foreground mb-3">{task.description}</p>
              )}

              {task.aiContext != null && (
                <div className="bg-blue-50 dark:bg-blue-950/20 p-3 rounded-md mb-3">
                  <div className="flex items-center gap-2 mb-1">
                    <Bot className="h-3 w-3 text-blue-500" />
                    <span className="text-xs font-medium text-blue-700 dark:text-blue-300">
                      AI Reasoning
                    </span>
                  </div>
                  <p className="text-xs text-blue-600 dark:text-blue-400">
                    {((): string => {
                      if (typeof task.aiContext === "string") {
                        return task.aiContext;
                      } else if (task.aiContext !== null && typeof task.aiContext === "object") {
                        try {
                          return JSON.stringify(task.aiContext, null, 2);
                        } catch {
                          return "Unable to display AI context";
                        }
                      }
                      return "No AI context available";
                    })()}
                  </p>
                </div>
              )}

              <div className="flex items-center gap-4 text-xs text-muted-foreground">
                <div className="flex items-center gap-1">
                  <Clock className="h-3 w-3" />
                  {format(new Date(task.createdAt), "MMM dd, hh:mm a")}
                </div>
                {task.estimatedMinutes && (
                  <div className="flex items-center gap-1">
                    <Clock className="h-3 w-3" />
                    {task.estimatedMinutes}min
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>
      </CardHeader>

      <CardContent className="pt-0">
        {showNotes && (
          <div className="space-y-2 mb-4">
            <Label htmlFor={`notes-${task.id}`}>Notes (optional)</Label>
            <Textarea
              id={`notes-${task.id}`}
              placeholder="Add notes about your decision..."
              value={notes}
              onChange={(e) => setNotes(e.target.value)}
              rows={2}
              data-testid={`textarea-notes-${task.id}`}
            />
          </div>
        )}

        <div className="flex items-center gap-2">
          <Button
            size="sm"
            onClick={handleApprove}
            className="bg-green-600 hover:bg-green-700"
            data-testid={`button-approve-${task.id}`}
          >
            <Check className="h-3 w-3 mr-1" />
            Approve
          </Button>

          <Button
            size="sm"
            variant="destructive"
            onClick={handleReject}
            data-testid={`button-reject-${task.id}`}
          >
            <X className="h-3 w-3 mr-1" />
            Reject
          </Button>

          <Button
            size="sm"
            variant="outline"
            onClick={() => setShowNotes(!showNotes)}
            data-testid={`button-add-notes-${task.id}`}
          >
            <MessageSquare className="h-3 w-3 mr-1" />
            {showNotes ? "Hide Notes" : "Add Notes"}
          </Button>
        </div>
      </CardContent>
    </Card>
  );
}

export function ApprovalQueue({
  open,
  onOpenChange,
  pendingTasks,
}: ApprovalQueueProps): JSX.Element {
  const [selectedTasks, setSelectedTasks] = useState<string[]>([]);
  const [bulkNotes, setBulkNotes] = useState("");

  const queryClient = useQueryClient();
  const { toast } = useToast();

  const approveMutation = useMutation({
    mutationFn: async ({ taskId, notes }: { taskId: string; notes?: string }) => {
      const body: TaskActionRequestBody = {};
      if (notes !== undefined) {
        body.notes = notes;
      }
      return apiClient.post(`/api/omni-momentum/${taskId}/approve`, body);
    },
    onSuccess: () => {
      void queryClient.invalidateQueries({ queryKey: ["/api/omni-momentum"] });
      void queryClient.invalidateQueries({ queryKey: ["/api/omni-momentum/pending-approval"] });
      toast({
        title: "Task Approved",
        description: "The task has been approved successfully.",
      });
    },
    onError: (error) => {
      console.error("Failed to approve task:", error);
      toast({
        title: "Error",
        description: "Failed to approve task. Please try again.",
        variant: "destructive",
      });
    },
  });

  const rejectMutation = useMutation({
    mutationFn: async ({ taskId, notes }: { taskId: string; notes?: string }) => {
      const body: TaskActionRequestBody = {};
      if (notes !== undefined) {
        body.notes = notes;
      }
      return apiClient.post(`/api/omni-momentum/${taskId}/reject`, body);
    },
    onSuccess: () => {
      void queryClient.invalidateQueries({ queryKey: ["/api/omni-momentum"] });
      void queryClient.invalidateQueries({ queryKey: ["/api/omni-momentum/pending-approval"] });
      toast({
        title: "Task Rejected",
        description: "The task has been rejected.",
      });
    },
    onError: (error) => {
      console.error("Failed to reject task:", error);
      toast({
        title: "Error",
        description: "Failed to reject task. Please try again.",
        variant: "destructive",
      });
    },
  });

  const handleApprove = (taskId: string, notes?: string): void => {
    approveMutation.mutate({
      taskId,
      ...(notes ? { notes } : {}),
    });
  };

  const handleReject = (taskId: string, notes?: string): void => {
    rejectMutation.mutate({
      taskId,
      ...(notes ? { notes } : {}),
    });
  };

  const handleBulkApprove = (): void => {
    const trimmedNotes = bulkNotes.trim();
    selectedTasks.forEach((taskId) => {
      approveMutation.mutate({
        taskId,
        ...(trimmedNotes ? { notes: trimmedNotes } : {}),
      });
    });
    setSelectedTasks([]);
    setBulkNotes("");
  };

  const handleBulkReject = (): void => {
    const trimmedNotes = bulkNotes.trim();
    selectedTasks.forEach((taskId) => {
      rejectMutation.mutate({
        taskId,
        ...(trimmedNotes ? { notes: trimmedNotes } : {}),
      });
    });
    setSelectedTasks([]);
    setBulkNotes("");
  };

  const toggleTaskSelection = (taskId: string, selected: boolean): void => {
    if (selected) {
      setSelectedTasks((prev) => [...prev, taskId]);
    } else {
      setSelectedTasks((prev) => prev.filter((id) => id !== taskId));
    }
  };

  const toggleSelectAll = (): void => {
    if (selectedTasks.length === pendingTasks.length) {
      setSelectedTasks([]);
    } else {
      setSelectedTasks(pendingTasks.map((t) => t.id));
    }
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-4xl max-h-[80vh]" data-testid="dialog-approval-queue">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <Bot className="h-5 w-5 text-blue-500" />
            AI Task Suggestions
            <Badge variant="secondary">{pendingTasks.length}</Badge>
          </DialogTitle>
          <DialogDescription>
            Review and approve AI-generated task suggestions. Your decisions help improve future
            suggestions.
          </DialogDescription>
        </DialogHeader>

        <div className="space-y-4 max-h-96 overflow-y-auto">
          {pendingTasks.length === 0 ? (
            <div className="text-center py-12">
              <Bot className="mx-auto h-12 w-12 text-muted-foreground mb-4" />
              <h3 className="text-lg font-medium mb-2">No pending suggestions</h3>
              <p className="text-sm text-muted-foreground">
                All AI-generated tasks have been reviewed. New suggestions will appear here
                overnight.
              </p>
            </div>
          ) : (
            <>
              {/* Bulk Actions */}
              {selectedTasks.length > 0 && (
                <Card className="bg-muted/50">
                  <CardContent className="p-4">
                    <div className="flex items-center justify-between mb-3">
                      <div className="flex items-center gap-2">
                        <span className="font-medium">
                          {selectedTasks.length} task{selectedTasks.length === 1 ? "" : "s"}{" "}
                          selected
                        </span>
                        <Button variant="outline" size="sm" onClick={toggleSelectAll}>
                          {selectedTasks.length === pendingTasks.length
                            ? "Deselect All"
                            : "Select All"}
                        </Button>
                      </div>

                      <div className="flex items-center gap-2">
                        <Button
                          size="sm"
                          onClick={handleBulkApprove}
                          className="bg-green-600 hover:bg-green-700"
                          data-testid="button-bulk-approve"
                        >
                          <Check className="h-3 w-3 mr-1" />
                          Approve Selected
                        </Button>
                        <Button
                          size="sm"
                          variant="destructive"
                          onClick={handleBulkReject}
                          data-testid="button-bulk-reject"
                        >
                          <X className="h-3 w-3 mr-1" />
                          Reject Selected
                        </Button>
                      </div>
                    </div>

                    <div className="space-y-2">
                      <Label htmlFor="bulk-notes">Bulk Notes (optional)</Label>
                      <Textarea
                        id="bulk-notes"
                        placeholder="Add notes for all selected tasks..."
                        value={bulkNotes}
                        onChange={(e) => setBulkNotes(e.target.value)}
                        rows={2}
                        data-testid="textarea-bulk-notes"
                      />
                    </div>
                  </CardContent>
                </Card>
              )}

              {/* Individual Task Cards */}
              <div className="space-y-4">
                {pendingTasks.map((task) => (
                  <TaskApprovalCard
                    key={task.id}
                    task={task}
                    isSelected={selectedTasks.includes(task.id)}
                    onSelect={(selected) => toggleTaskSelection(task.id, selected)}
                    onApprove={handleApprove}
                    onReject={handleReject}
                  />
                ))}
              </div>
            </>
          )}
        </div>
      </DialogContent>
    </Dialog>
  );
}


/* ===== src/app/(authorisedRoute)/omni-momentum/_components/create-momentum-dialog.tsx ===== */

"use client";

import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Badge } from "@/components/ui/badge";
import { Avatar, AvatarFallback } from "@/components/ui/avatar";
import { X, Search } from "lucide-react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { useMutation, useQueryClient, useQuery } from "@tanstack/react-query";
import { apiClient } from "@/lib/api/client";
import { useToast } from "@/hooks/use-toast";
import type { MomentumWorkspace, MomentumProject, Contact } from "@/server/db/schema";

const createTaskSchema = z.object({
  workspaceId: z.string().optional(),
  projectId: z.string().optional(),
  title: z.string().min(1, "Task title is required"),
  description: z.string().optional(),
  priority: z.enum(["low", "medium", "high", "urgent"]),
  dueDate: z.date().optional(),
  estimatedMinutes: z.number().min(0).optional(),
  taggedContacts: z.array(z.string()).optional(),
});

type CreateTaskFormData = z.infer<typeof createTaskSchema>;

interface CreateTaskDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  workspaces: MomentumWorkspace[];
  projects: MomentumProject[];
}

export function CreateMomentumDialog({
  open,
  onOpenChange,
  workspaces,
  projects,
}: CreateTaskDialogProps): JSX.Element {
  const [selectedContacts, setSelectedContacts] = useState<Contact[]>([]);
  const [contactSearch, setContactSearch] = useState("");
  const [showContactSearch, setShowContactSearch] = useState(false);

  const queryClient = useQueryClient();
  const { toast } = useToast();

  const form = useForm<CreateTaskFormData>({
    resolver: zodResolver(createTaskSchema),
    defaultValues: {
      priority: "medium",
      taggedContacts: [],
    },
  });

  interface ContactsResponse {
    contacts: Contact[];
  }

  const { data: contactsData } = useQuery<ContactsResponse>({
    queryKey: ["/api/contacts"],
    queryFn: async (): Promise<ContactsResponse> => {
      const response = await fetch("/api/contacts");
      if (!response.ok) throw new Error("Failed to fetch contacts");
      const data = (await response.json()) as ContactsResponse;
      return data;
    },
  });

  const contacts = contactsData?.contacts ?? [];

  const filteredContacts = contacts.filter(
    (contact: Contact) =>
      contact.displayName.toLowerCase().includes(contactSearch.toLowerCase()) ??
      contact.primaryEmail?.toLowerCase().includes(contactSearch.toLowerCase()),
  );

  const createTaskMutation = useMutation({
    mutationFn: async (data: CreateTaskFormData) => {
      return apiClient.post("/api/tasks", {
        ...data,
        workspaceId: data.workspaceId ?? undefined,
        projectId: data.projectId ?? undefined,
        taggedContacts: selectedContacts.map((c) => c.id),
        estimatedMinutes: data.estimatedMinutes ?? undefined,
      });
    },
    onSuccess: () => {
      void queryClient.invalidateQueries({ queryKey: ["/api/tasks"] });
      toast({
        title: "Task Created",
        description: "Your task has been created successfully.",
      });
      handleClose();
    },
    onError: (error) => {
      console.error("Failed to create task:", error);
      toast({
        title: "Error",
        description: "Failed to create task. Please try again.",
        variant: "destructive",
      });
    },
  });

  const handleSubmit = (data: CreateTaskFormData): void => {
    createTaskMutation.mutate({
      ...data,
      workspaceId: data.workspaceId === "none" ? undefined : data.workspaceId,
      projectId: data.projectId === "none" ? undefined : data.projectId,
    });
  };

  const handleClose = (): void => {
    form.reset();
    setSelectedContacts([]);
    setContactSearch("");
    setShowContactSearch(false);
    onOpenChange(false);
  };

  const addContact = (contact: Contact): void => {
    if (!selectedContacts.find((c) => c.id === contact.id)) {
      setSelectedContacts([...selectedContacts, contact]);
    }
    setContactSearch("");
    setShowContactSearch(false);
  };

  const removeContact = (contactId: string): void => {
    setSelectedContacts(selectedContacts.filter((c) => c.id !== contactId));
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-lg" data-testid="dialog-create-task">
        <DialogHeader>
          <DialogTitle>Create New Task</DialogTitle>
          <DialogDescription>
            Create a new task. You can optionally assign it to a workspace and project.
          </DialogDescription>
        </DialogHeader>

        <form onSubmit={form.handleSubmit(handleSubmit)} className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="workspace">Workspace (Optional)</Label>
            <Select
              value={form.watch("workspaceId") ?? ""}
              onValueChange={(value) =>
                form.setValue("workspaceId", value === "none" ? undefined : value)
              }
            >
              <SelectTrigger data-testid="select-workspace">
                <SelectValue placeholder="No workspace selected" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="none">No workspace</SelectItem>
                {workspaces.map((workspace) => (
                  <SelectItem key={workspace.id} value={workspace.id}>
                    {workspace.name}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>

          <div className="space-y-2">
            <Label htmlFor="project">Project (Optional)</Label>
            <Select
              value={form.watch("projectId") ?? ""}
              onValueChange={(value) =>
                form.setValue("projectId", value === "none" ? undefined : value)
              }
            >
              <SelectTrigger data-testid="select-project">
                <SelectValue placeholder="Select project" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="none">No project</SelectItem>
                {projects.map((project) => (
                  <SelectItem key={project.id} value={project.id}>
                    {project.name}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>

          <div className="space-y-2">
            <Label htmlFor="title">Title *</Label>
            <Input
              id="title"
              placeholder="Enter task title..."
              {...form.register("title")}
              data-testid="input-task-title"
            />
            {form.formState.errors.title && (
              <p className="text-sm text-red-600">{form.formState.errors.title.message}</p>
            )}
          </div>

          <div className="space-y-2">
            <Label htmlFor="description">Description</Label>
            <Textarea
              id="description"
              placeholder="Enter task description..."
              rows={3}
              {...form.register("description")}
              data-testid="textarea-task-description"
            />
          </div>

          <div className="grid grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label htmlFor="priority">Priority</Label>
              <Select
                value={form.watch("priority")}
                onValueChange={(value) =>
                  form.setValue("priority", value as "low" | "medium" | "high" | "urgent")
                }
              >
                <SelectTrigger data-testid="select-priority">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="low">Low</SelectItem>
                  <SelectItem value="medium">Medium</SelectItem>
                  <SelectItem value="high">High</SelectItem>
                  <SelectItem value="urgent">Urgent</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
              <Label htmlFor="estimatedMinutes">Estimated Time (minutes)</Label>
              <Input
                id="estimatedMinutes"
                type="number"
                placeholder="60"
                {...form.register("estimatedMinutes", { valueAsNumber: true })}
                data-testid="input-estimated-minutes"
              />
            </div>
          </div>

          <div className="space-y-2">
            <Label htmlFor="dueDate">Due Date</Label>
            <Input
              id="dueDate"
              type="date"
              {...form.register("dueDate", {
                setValueAs: (value) => (value ? new Date(value) : undefined),
              })}
              data-testid="input-due-date"
            />
          </div>

          <div className="space-y-2">
            <Label>Tagged Contacts</Label>
            <div className="space-y-2">
              {selectedContacts.length > 0 && (
                <div className="flex flex-wrap gap-2">
                  {selectedContacts.map((contact) => (
                    <Badge key={contact.id} variant="secondary" className="flex items-center gap-1">
                      <Avatar className="h-4 w-4">
                        <AvatarFallback className="text-xs">
                          {contact.displayName
                            .split(" ")
                            .map((n) => n[0])
                            .join("")
                            .slice(0, 2)}
                        </AvatarFallback>
                      </Avatar>
                      {contact.displayName}
                      <button
                        type="button"
                        onClick={() => removeContact(contact.id)}
                        className="ml-1 hover:bg-destructive/20 rounded-full p-0.5"
                      >
                        <X className="h-2 w-2" />
                      </button>
                    </Badge>
                  ))}
                </div>
              )}

              <div className="relative">
                <Button
                  type="button"
                  variant="outline"
                  className="w-full justify-start"
                  onClick={() => setShowContactSearch(!showContactSearch)}
                  data-testid="button-add-contacts"
                >
                  <Search className="mr-2 h-4 w-4" />
                  Add contacts...
                </Button>

                {showContactSearch && (
                  <div className="absolute top-full left-0 w-full mt-1 border rounded-md bg-popover shadow-md z-50">
                    <div className="p-2">
                      <Input
                        placeholder="Search contacts..."
                        value={contactSearch}
                        onChange={(e) => setContactSearch(e.target.value)}
                        autoFocus
                      />
                    </div>
                    <div className="max-h-32 overflow-y-auto">
                      {filteredContacts.slice(0, 10).map((contact: Contact) => (
                        <button
                          key={contact.id}
                          type="button"
                          className="w-full px-2 py-2 text-left hover:bg-accent flex items-center gap-2"
                          onClick={() => addContact(contact)}
                        >
                          <Avatar className="h-6 w-6">
                            <AvatarFallback className="text-xs">
                              {contact.displayName
                                .split(" ")
                                .map((n: string) => n[0])
                                .join("")
                                .slice(0, 2)}
                            </AvatarFallback>
                          </Avatar>
                          <div>
                            <div className="font-medium text-sm">{contact.displayName}</div>
                            {contact.primaryEmail && (
                              <div className="text-xs text-muted-foreground">
                                {contact.primaryEmail}
                              </div>
                            )}
                          </div>
                        </button>
                      ))}
                      {filteredContacts.length === 0 && (
                        <div className="p-2 text-sm text-muted-foreground text-center">
                          No contacts found
                        </div>
                      )}
                    </div>
                  </div>
                )}
              </div>
            </div>
          </div>

          <DialogFooter>
            <Button
              type="button"
              variant="outline"
              onClick={handleClose}
              data-testid="button-cancel"
            >
              Cancel
            </Button>
            <Button
              type="submit"
              disabled={createTaskMutation.isPending}
              data-testid="button-create-task"
            >
              {createTaskMutation.isPending ? "Creating..." : "Create Task"}
            </Button>
          </DialogFooter>
        </form>
      </DialogContent>
    </Dialog>
  );
}


/* ===== src/app/(authorisedRoute)/omni-momentum/_components/momentum-kanban-view.tsx ===== */

"use client";

import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Avatar, AvatarFallback } from "@/components/ui/avatar";
import { Skeleton } from "@/components/ui/skeleton";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import {
  DndContext,
  DragEndEvent,
  DragOverlay,
  DragStartEvent,
  PointerSensor,
  useSensor,
  useSensors,
  closestCenter,
} from "@dnd-kit/core";
import { SortableContext, useSortable, verticalListSortingStrategy } from "@dnd-kit/sortable";
import { CSS } from "@dnd-kit/utilities";
import {
  MoreHorizontal,
  Edit,
  Trash2,
  Calendar,
  Clock,
  User,
  Bot,
  Flag,
  Plus,
  CheckSquare,
} from "lucide-react";
import { format } from "date-fns";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { apiClient } from "@/lib/api/client";
import { useToast } from "@/hooks/use-toast";
import type { Momentum } from "@/server/db/schema";

interface MomentumKanbanViewProps {
  momentums: Array<Momentum & { taggedContactsData?: Array<{ id: string; displayName: string }> }>;
  isLoading: boolean;
}

const statusColumns = [
  { id: "todo", title: "To Do", color: "bg-slate-100 dark:bg-slate-800" },
  { id: "in_progress", title: "In Progress", color: "bg-blue-100 dark:bg-blue-900/20" },
  { id: "waiting", title: "Waiting", color: "bg-yellow-100 dark:bg-yellow-900/20" },
  { id: "done", title: "Done", color: "bg-green-100 dark:bg-green-900/20" },
];

// Helper functions for display
const getPriorityColor = (priority: string): string => {
  const colors = {
    low: "text-green-600 dark:text-green-400 border-green-200 dark:border-green-800",
    medium: "text-blue-600 dark:text-blue-400 border-blue-200 dark:border-blue-800",
    high: "text-orange-600 dark:text-orange-400 border-orange-200 dark:border-orange-800",
    urgent: "text-red-600 dark:text-red-400 border-red-200 dark:border-red-800",
  } as const;

  return colors[priority as keyof typeof colors] ?? colors.medium;
};

// Draggable Task Card Component
function TaskCard({
  task,
  isDragging = false,
}: {
  task: Momentum & { taggedContactsData?: Array<{ id: string; displayName: string }> };
  isDragging?: boolean;
}): JSX.Element {
  const { attributes, listeners, setNodeRef, transform, transition } = useSortable({ id: task.id });

  const style = {
    transform: CSS.Transform.toString(transform),
    transition,
  };

  const contacts = task.taggedContactsData ?? [];
  const isOverdue = task.dueDate && new Date() > new Date(task.dueDate);

  return (
    <div
      ref={setNodeRef}
      style={style}
      {...attributes}
      {...listeners}
      className={`cursor-grab active:cursor-grabbing ${isDragging ? "opacity-50" : ""}`}
      data-testid={`task-card-${task.id}`}
    >
      <Card
        className={`mb-3 hover:shadow-md transition-shadow border-l-4 ${getPriorityColor(task.priority)}`}
      >
        <CardHeader className="pb-3">
          <div className="flex items-start justify-between">
            <div className="flex items-start gap-2 flex-1">
              {task.source === "ai_generated" && (
                <Bot className="h-4 w-4 text-blue-500 mt-0.5 flex-shrink-0" />
              )}
              <CardTitle className="text-sm font-medium leading-tight">{task.title}</CardTitle>
            </div>

            <DropdownMenu>
              <DropdownMenuTrigger asChild onClick={(e) => e.stopPropagation()}>
                <Button
                  variant="ghost"
                  className="h-6 w-6 p-0 opacity-0 group-hover:opacity-100 transition-opacity"
                  data-testid={`button-task-actions-${task.id}`}
                >
                  <MoreHorizontal className="h-3 w-3" />
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="end" onClick={(e) => e.stopPropagation()}>
                <DropdownMenuItem>
                  <Edit className="mr-2 h-4 w-4" />
                  Edit Task
                </DropdownMenuItem>
                <DropdownMenuSeparator />
                <DropdownMenuItem className="text-red-600">
                  <Trash2 className="mr-2 h-4 w-4" />
                  Delete Task
                </DropdownMenuItem>
              </DropdownMenuContent>
            </DropdownMenu>
          </div>

          {task.description && (
            <p className="text-xs text-muted-foreground mt-2 line-clamp-3">{task.description}</p>
          )}
        </CardHeader>

        <CardContent className="pt-0 space-y-3">
          {/* Priority and Assignee */}
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-1">
              <Flag className={`h-3 w-3 ${getPriorityColor(task.priority)}`} />
              <span className="text-xs capitalize">{task.priority}</span>
            </div>

            <div className="flex items-center gap-1">
              {task.assignee === "ai" ? (
                <>
                  <Bot className="h-3 w-3 text-blue-500" />
                  <span className="text-xs">AI</span>
                </>
              ) : (
                <>
                  <User className="h-3 w-3 text-green-600" />
                  <span className="text-xs">Me</span>
                </>
              )}
            </div>
          </div>

          {/* Due Date */}
          {task.dueDate && (
            <div
              className={`flex items-center gap-1 text-xs ${isOverdue ? "text-red-600" : "text-muted-foreground"}`}
            >
              <Calendar className="h-3 w-3" />
              {format(new Date(task.dueDate), "MMM dd")}
              {isOverdue && (
                <Badge variant="destructive" className="text-xs ml-1">
                  Overdue
                </Badge>
              )}
            </div>
          )}

          {/* Estimated Time */}
          {task.estimatedMinutes && (
            <div className="flex items-center gap-1 text-xs text-muted-foreground">
              <Clock className="h-3 w-3" />
              {task.estimatedMinutes < 60
                ? `${task.estimatedMinutes}m`
                : `${Math.floor(task.estimatedMinutes / 60)}h ${task.estimatedMinutes % 60}m`}
            </div>
          )}

          {/* Tagged Contacts */}
          {contacts.length > 0 && (
            <div className="flex items-center gap-1">
              {contacts.slice(0, 3).map((contact) => (
                <Avatar key={contact.id} className="h-5 w-5">
                  <AvatarFallback className="text-xs text-[10px]">
                    {contact.displayName
                      .split(" ")
                      .map((n) => n[0])
                      .join("")
                      .slice(0, 2)}
                  </AvatarFallback>
                </Avatar>
              ))}
              {contacts.length > 3 && (
                <Badge variant="secondary" className="text-xs h-5">
                  +{contacts.length - 3}
                </Badge>
              )}
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
}

// Kanban Column Component
function KanbanColumn({
  column,
  tasks,
  isLoading,
}: {
  column: (typeof statusColumns)[0];
  tasks: Array<Momentum & { taggedContactsData?: Array<{ id: string; displayName: string }> }>;
  isLoading: boolean;
}): JSX.Element {
  const columnTasks = tasks.filter((task) => task.status === column.id);

  return (
    <div
      className={`flex-1 min-w-80 rounded-lg p-4 ${column.color}`}
      data-testid={`kanban-column-${column.id}`}
    >
      <div className="flex items-center justify-between mb-4">
        <div className="flex items-center gap-2">
          <h3 className="font-semibold">{column.title}</h3>
          <Badge variant="secondary" className="text-xs">
            {columnTasks.length}
          </Badge>
        </div>

        <Button
          variant="ghost"
          size="sm"
          className="h-6 w-6 p-0 hover:bg-background/50"
          data-testid={`button-add-task-${column.id}`}
        >
          <Plus className="h-3 w-3" />
        </Button>
      </div>

      <div className="space-y-0 min-h-32">
        {isLoading ? (
          <div className="space-y-3">
            {Array.from({ length: 2 }).map((_, i) => (
              <Skeleton key={i} className="w-full h-32" />
            ))}
          </div>
        ) : (
          <SortableContext
            items={columnTasks.map((t) => t.id)}
            strategy={verticalListSortingStrategy}
          >
            <div className="group">
              {columnTasks.map((task) => (
                <TaskCard key={task.id} task={task} />
              ))}
            </div>
          </SortableContext>
        )}

        {!isLoading && columnTasks.length === 0 && (
          <div className="text-center py-8 text-muted-foreground">
            <CheckSquare className="mx-auto h-8 w-8 mb-2 opacity-50" />
            <p className="text-sm">No {column.title.toLowerCase()} tasks</p>
          </div>
        )}
      </div>
    </div>
  );
}

export function MomentumKanbanView({ momentums, isLoading }: MomentumKanbanViewProps): JSX.Element {
  const [activeId, setActiveId] = useState<string | null>(null);
  const sensors = useSensors(
    useSensor(PointerSensor, {
      activationConstraint: {
        distance: 8,
      },
    }),
  );

  const queryClient = useQueryClient();
  const { toast } = useToast();

  const updateTaskMutation = useMutation({
    mutationFn: async ({ taskId, data }: { taskId: string; data: { status: string } }) => {
      return apiClient.put(`/api/tasks/${taskId}`, data);
    },
    onSuccess: () => {
      void queryClient.invalidateQueries({ queryKey: ["/api/tasks"] });
      toast({
        title: "Task Updated",
        description: "Task status has been updated successfully.",
      });
    },
    onError: (error) => {
      console.error("Failed to update task status:", error);
      toast({
        title: "Error",
        description: "Failed to update task status. Please try again.",
        variant: "destructive",
      });
    },
  });

  function handleDragStart(event: DragStartEvent): void {
    setActiveId(event.active.id as string);
  }

  function handleDragEnd(event: DragEndEvent): void {
    const { active, over } = event;

    if (!over) {
      setActiveId(null);
      return;
    }

    // Find the task that was dragged
    const draggedTask = momentums.find((t) => t.id === active.id);
    if (!draggedTask) {
      setActiveId(null);
      return;
    }

    // Determine the new status based on which column it was dropped in
    const overColumn = statusColumns.find((col) => {
      const columnTasks = momentums.filter((task) => task.status === col.id);
      return columnTasks.some((task) => task.id === over.id) || over.id === col.id;
    });

    // If dropped in a different column, update the task status
    if (overColumn && overColumn.id !== draggedTask.status) {
      updateTaskMutation.mutate({
        taskId: draggedTask.id,
        data: { status: overColumn.id },
      });
    }

    setActiveId(null);
  }

  const draggedTask = activeId ? momentums.find((t) => t.id === activeId) : null;

  return (
    <DndContext
      sensors={sensors}
      collisionDetection={closestCenter}
      onDragStart={handleDragStart}
      onDragEnd={handleDragEnd}
    >
      <div className="flex gap-6 overflow-x-auto pb-4" data-testid="kanban-board">
        {statusColumns.map((column) => (
          <SortableContext
            key={column.id}
            items={momentums.filter((t) => t.status === column.id).map((t) => t.id)}
            strategy={verticalListSortingStrategy}
          >
            <KanbanColumn column={column} tasks={momentums} isLoading={isLoading} />
          </SortableContext>
        ))}
      </div>

      <DragOverlay>{draggedTask ? <TaskCard task={draggedTask} isDragging /> : null}</DragOverlay>
    </DndContext>
  );
}


/* ===== src/app/(authorisedRoute)/omni-momentum/_components/momentum-list-view.tsx ===== */

"use client";

import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Avatar, AvatarFallback } from "@/components/ui/avatar";
import { Checkbox } from "@/components/ui/checkbox";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { Skeleton } from "@/components/ui/skeleton";
import {
  flexRender,
  getCoreRowModel,
  getSortedRowModel,
  getFilteredRowModel,
  useReactTable,
  type ColumnDef,
  type SortingState,
} from "@tanstack/react-table";
import {
  ArrowUpDown,
  MoreHorizontal,
  Edit,
  Trash2,
  Clock,
  User,
  Bot,
  Calendar,
  Flag,
  CheckSquare,
} from "lucide-react";
import { format } from "date-fns";
import type { Momentum } from "@/server/db/schema";

interface MomentumListViewProps {
  momentums: Array<Momentum & { taggedContactsData?: Array<{ id: string; displayName: string }> }>;
  isLoading: boolean;
}

// Helper functions for display
const getStatusBadge = (status: string): JSX.Element => {
  const statusVariants = {
    todo: "secondary",
    in_progress: "default",
    waiting: "outline",
    done: "secondary",
    cancelled: "destructive",
  } as const;

  const labels = {
    todo: "To Do",
    in_progress: "In Progress",
    waiting: "Waiting",
    done: "Done",
    cancelled: "Cancelled",
  } as const;

  return (
    <Badge variant={statusVariants[status as keyof typeof statusVariants] ?? "secondary"}>
      {labels[status as keyof typeof labels] ?? status}
    </Badge>
  );
};

const getPriorityBadge = (priority: string): JSX.Element => {
  const colors = {
    low: "text-green-600 dark:text-green-400",
    medium: "text-blue-600 dark:text-blue-400",
    high: "text-orange-600 dark:text-orange-400",
    urgent: "text-red-600 dark:text-red-400",
  } as const;

  return (
    <div className="flex items-center gap-2">
      <Flag className={`h-3 w-3 ${colors[priority as keyof typeof colors] ?? ""}`} />
      <span className="capitalize">{priority}</span>
    </div>
  );
};

export function MomentumListView({ momentums, isLoading }: MomentumListViewProps): JSX.Element {
  const [sorting, setSorting] = useState<SortingState>([]);
  const [selectedTasks, setSelectedTasks] = useState<string[]>([]);

  const columns: ColumnDef<
    Momentum & { taggedContactsData?: Array<{ id: string; displayName: string }> }
  >[] = [
    {
      id: "select",
      header: ({ table }) => (
        <Checkbox
          checked={table.getIsAllPageRowsSelected()}
          onCheckedChange={(value) => {
            table.toggleAllPageRowsSelected(!!value);
            if (value) {
              setSelectedTasks(momentums.map((t) => t.id));
            } else {
              setSelectedTasks([]);
            }
          }}
          aria-label="Select all"
          data-testid="checkbox-select-all"
        />
      ),
      cell: ({ row }) => (
        <Checkbox
          checked={row.getIsSelected()}
          onCheckedChange={(value) => {
            row.toggleSelected(!!value);
            if (value) {
              setSelectedTasks((prev) => [...prev, row.original.id]);
            } else {
              setSelectedTasks((prev) => prev.filter((id) => id !== row.original.id));
            }
          }}
          aria-label="Select row"
          data-testid={`checkbox-select-${row.original.id}`}
        />
      ),
      enableSorting: false,
      enableHiding: false,
    },
    {
      accessorKey: "title",
      header: ({ column }) => (
        <Button
          variant="ghost"
          onClick={() => column.toggleSorting(column.getIsSorted() === "asc")}
          className="hover:bg-transparent p-0 h-auto font-medium justify-start"
          data-testid="button-sort-title"
        >
          Title
          <ArrowUpDown className="ml-2 h-4 w-4" />
        </Button>
      ),
      cell: ({ row }) => {
        const task = row.original;
        return (
          <div className="space-y-1">
            <div className="font-medium flex items-center gap-2">
              {task.source === "ai_generated" && <Bot className="h-3 w-3 text-blue-500" />}
              {task.title}
            </div>
            {task.description && (
              <div className="text-sm text-muted-foreground line-clamp-2">{task.description}</div>
            )}
          </div>
        );
      },
    },
    {
      accessorKey: "status",
      header: ({ column }) => (
        <Button
          variant="ghost"
          onClick={() => column.toggleSorting(column.getIsSorted() === "asc")}
          className="hover:bg-transparent p-0 h-auto font-medium justify-start"
          data-testid="button-sort-status"
        >
          Status
          <ArrowUpDown className="ml-2 h-4 w-4" />
        </Button>
      ),
      cell: ({ row }) => getStatusBadge(row.getValue("status")),
    },
    {
      accessorKey: "priority",
      header: ({ column }) => (
        <Button
          variant="ghost"
          onClick={() => column.toggleSorting(column.getIsSorted() === "asc")}
          className="hover:bg-transparent p-0 h-auto font-medium justify-start"
          data-testid="button-sort-priority"
        >
          Priority
          <ArrowUpDown className="ml-2 h-4 w-4" />
        </Button>
      ),
      cell: ({ row }) => getPriorityBadge(row.getValue("priority")),
    },
    {
      accessorKey: "assignee",
      header: "Assignee",
      cell: ({ row }) => {
        const assignee = row.getValue("assignee") as string;
        return (
          <div className="flex items-center gap-2">
            {assignee === "ai" ? (
              <>
                <Bot className="h-4 w-4 text-blue-500" />
                <span>AI</span>
              </>
            ) : (
              <>
                <User className="h-4 w-4 text-green-600" />
                <span>Me</span>
              </>
            )}
          </div>
        );
      },
    },
    {
      accessorKey: "taggedContacts",
      header: "Contacts",
      cell: ({ row }) => {
        const contacts = row.original.taggedContactsData ?? [];
        if (contacts.length === 0) return <span className="text-muted-foreground">—</span>;

        return (
          <div className="flex items-center gap-1">
            {contacts.slice(0, 3).map((contact) => (
              <Avatar key={contact.id} className="h-6 w-6">
                <AvatarFallback className="text-xs">
                  {contact.displayName
                    .split(" ")
                    .map((n) => n[0])
                    .join("")
                    .slice(0, 2)}
                </AvatarFallback>
              </Avatar>
            ))}
            {contacts.length > 3 && (
              <Badge variant="secondary" className="text-xs">
                +{contacts.length - 3}
              </Badge>
            )}
          </div>
        );
      },
    },
    {
      accessorKey: "dueDate",
      header: ({ column }) => (
        <Button
          variant="ghost"
          onClick={() => column.toggleSorting(column.getIsSorted() === "asc")}
          className="hover:bg-transparent p-0 h-auto font-medium justify-start"
          data-testid="button-sort-due-date"
        >
          Due Date
          <ArrowUpDown className="ml-2 h-4 w-4" />
        </Button>
      ),
      cell: ({ row }) => {
        const dueDate = row.getValue("dueDate") as Date | null;
        if (!dueDate) return <span className="text-muted-foreground">—</span>;

        const isOverdue = new Date() > dueDate;
        return (
          <div className={`flex items-center gap-2 ${isOverdue ? "text-red-600" : ""}`}>
            <Calendar className="h-3 w-3" />
            {format(dueDate, "MMM dd, yyyy")}
          </div>
        );
      },
    },
    {
      accessorKey: "createdAt",
      header: ({ column }) => (
        <Button
          variant="ghost"
          onClick={() => column.toggleSorting(column.getIsSorted() === "asc")}
          className="hover:bg-transparent p-0 h-auto font-medium justify-start"
          data-testid="button-sort-created"
        >
          Created
          <ArrowUpDown className="ml-2 h-4 w-4" />
        </Button>
      ),
      cell: ({ row }) => {
        const createdAt = row.getValue("createdAt") as Date;
        return (
          <div className="flex items-center gap-2 text-sm text-muted-foreground">
            <Clock className="h-3 w-3" />
            {format(createdAt, "MMM dd")}
          </div>
        );
      },
    },
    {
      id: "actions",
      enableHiding: false,
      cell: ({ row }) => {
        const task = row.original;

        return (
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button
                variant="ghost"
                className="h-8 w-8 p-0"
                data-testid={`button-actions-${task.id}`}
              >
                <span className="sr-only">Open menu</span>
                <MoreHorizontal className="h-4 w-4" />
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end">
              <DropdownMenuItem>
                <Edit className="mr-2 h-4 w-4" />
                Edit Task
              </DropdownMenuItem>
              <DropdownMenuSeparator />
              <DropdownMenuItem className="text-red-600">
                <Trash2 className="mr-2 h-4 w-4" />
                Delete Task
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        );
      },
    },
  ];

  const table = useReactTable({
    data: momentums,
    columns,
    onSortingChange: setSorting,
    getCoreRowModel: getCoreRowModel(),
    getSortedRowModel: getSortedRowModel(),
    getFilteredRowModel: getFilteredRowModel(),
    state: {
      sorting,
    },
  });

  if (isLoading) {
    return (
      <div className="space-y-3">
        {Array.from({ length: 5 }).map((_, i) => (
          <Skeleton key={i} className="w-full h-16" />
        ))}
      </div>
    );
  }

  if (momentums.length === 0) {
    return (
      <div className="text-center py-12">
        <div className="mx-auto max-w-sm">
          <CheckSquare className="mx-auto h-12 w-12 text-muted-foreground" />
          <h3 className="mt-4 text-lg font-medium">No tasks found</h3>
          <p className="mt-2 text-sm text-muted-foreground">
            No tasks match your current filters. Try adjusting your search or create a new task.
          </p>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-4">
      {/* Bulk Actions */}
      {selectedTasks.length > 0 && (
        <div className="flex items-center gap-2 p-3 bg-muted rounded-lg">
          <span className="text-sm font-medium">
            {selectedTasks.length} task{selectedTasks.length === 1 ? "" : "s"} selected
          </span>
          <Button variant="outline" size="sm">
            Mark as Done
          </Button>
          <Button variant="outline" size="sm">
            Change Status
          </Button>
          <Button variant="outline" size="sm" className="text-red-600">
            Delete
          </Button>
        </div>
      )}

      {/* Table */}
      <div className="rounded-md border" data-testid="table-tasks">
        <Table>
          <TableHeader>
            {table.getHeaderGroups().map((headerGroup) => (
              <TableRow key={headerGroup.id}>
                {headerGroup.headers.map((header) => (
                  <TableHead key={header.id}>
                    {header.isPlaceholder
                      ? null
                      : flexRender(header.column.columnDef.header, header.getContext())}
                  </TableHead>
                ))}
              </TableRow>
            ))}
          </TableHeader>
          <TableBody>
            {table.getRowModel().rows?.length ? (
              table.getRowModel().rows.map((row) => (
                <TableRow
                  key={row.id}
                  data-state={row.getIsSelected() && "selected"}
                  data-testid={`row-task-${row.original.id}`}
                >
                  {row.getVisibleCells().map((cell) => (
                    <TableCell key={cell.id}>
                      {flexRender(cell.column.columnDef.cell, cell.getContext())}
                    </TableCell>
                  ))}
                </TableRow>
              ))
            ) : (
              <TableRow>
                <TableCell colSpan={columns.length} className="h-24 text-center">
                  No results.
                </TableCell>
              </TableRow>
            )}
          </TableBody>
        </Table>
      </div>
    </div>
  );
}


/* ===== src/app/(authorisedRoute)/omni-momentum/_components/MomentumClientWrapper.tsx ===== */

"use client";

import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Badge } from "@/components/ui/badge";
import { Input } from "@/components/ui/input";
import {
  Plus,
  List,
  LayoutGrid,
  Search,
  Filter,
  Clock,
  CheckSquare,
  AlertCircle,
  Bot,
} from "lucide-react";
import { useQuery } from "@tanstack/react-query";

import { MomentumListView } from "./momentum-list-view";
import { MomentumKanbanView } from "./momentum-kanban-view";
import { CreateMomentumDialog } from "./create-momentum-dialog";
import { ApprovalQueue } from "./approval-queue";
import type { Momentum, MomentumWorkspace, MomentumProject } from "@/server/db/schema";

// Type definitions for API responses - using proper database schema types
type Workspace = MomentumWorkspace;
type Project = MomentumProject;

// Specific API response interfaces for better type safety
interface WorkspacesApiResponse {
  workspaces: Workspace[];
}

interface ProjectsApiResponse {
  projects: Project[];
}

interface MomentumsApiResponse {
  momentums: Momentum[];
}

export default function MomentumClientWrapper(): JSX.Element {
  const [view, setView] = useState<"list" | "kanban">("list");
  const [selectedWorkspace, setSelectedWorkspace] = useState<string>("all");
  const [selectedProject, setSelectedProject] = useState<string>("all");
  const [selectedStatus, setSelectedStatus] = useState<string>("all");
  const [selectedAssignee, setSelectedAssignee] = useState<string>("all");
  const [searchQuery, setSearchQuery] = useState("");
  const [showCreateDialog, setShowCreateDialog] = useState(false);
  const [showApprovalQueue, setShowApprovalQueue] = useState(false);

  // Fetch workspaces
  const { data: workspacesData } = useQuery({
    queryKey: ["/api/workspaces"],
    queryFn: async (): Promise<WorkspacesApiResponse> => {
      const response = await fetch("/api/workspaces");
      if (!response.ok) throw new Error("Failed to fetch workspaces");
      return response.json() as Promise<WorkspacesApiResponse>;
    },
  });

  // Fetch projects (filtered by workspace)
  const { data: projectsData } = useQuery({
    queryKey: ["/api/projects", selectedWorkspace !== "all" ? selectedWorkspace : undefined],
    queryFn: async (): Promise<ProjectsApiResponse> => {
      const url =
        selectedWorkspace !== "all"
          ? `/api/projects?workspaceId=${selectedWorkspace}`
          : "/api/projects";
      const response = await fetch(url);
      if (!response.ok) throw new Error("Failed to fetch projects");
      return response.json() as Promise<ProjectsApiResponse>;
    },
    enabled: selectedWorkspace !== "all",
  });

  // Fetch momentums with filters
  const { data: momentumsData, isLoading } = useQuery({
    queryKey: [
      "/api/omni-momentum",
      {
        workspaceId: selectedWorkspace !== "all" ? selectedWorkspace : undefined,
        projectId: selectedProject !== "all" ? selectedProject : undefined,
        status: selectedStatus !== "all" ? selectedStatus : undefined,
        assignee: selectedAssignee !== "all" ? selectedAssignee : undefined,
        withContacts: true,
      },
    ],
    queryFn: async (): Promise<MomentumsApiResponse> => {
      const params = new URLSearchParams();
      if (selectedWorkspace !== "all") params.append("workspaceId", selectedWorkspace);
      if (selectedProject !== "all") params.append("projectId", selectedProject);
      if (selectedStatus !== "all") params.append("status", selectedStatus);
      if (selectedAssignee !== "all") params.append("assignee", selectedAssignee);
      params.append("withContacts", "true");

      const response = await fetch(`/api/omni-momentum?${params}`);
      if (!response.ok) throw new Error("Failed to fetch momentums");
      return response.json() as Promise<MomentumsApiResponse>;
    },
  });

  // Fetch pending approval momentums
  const { data: pendingMomentumsData } = useQuery({
    queryKey: ["/api/omni-momentum/pending-approval"],
    queryFn: async (): Promise<MomentumsApiResponse> => {
      const response = await fetch("/api/omni-momentum/pending-approval");
      if (!response.ok) throw new Error("Failed to fetch pending momentums");
      return response.json() as Promise<MomentumsApiResponse>;
    },
  });

  const workspaces = workspacesData?.workspaces ?? [];
  const projects = projectsData?.projects ?? [];
  const momentums = momentumsData?.momentums ?? [];
  const pendingMomentums = pendingMomentumsData?.momentums ?? [];

  // Filter momentums by search query
  const filteredMomentums = momentums.filter(
    (momentum: Momentum) =>
      momentum.title?.toLowerCase().includes(searchQuery.toLowerCase()) ??
      momentum.description?.toLowerCase().includes(searchQuery.toLowerCase()) ??
      false,
  );

  const statusOptions = [
    { value: "all", label: "All Status" },
    { value: "todo", label: "To Do" },
    { value: "in_progress", label: "In Progress" },
    { value: "completed", label: "Completed" },
    { value: "cancelled", label: "Cancelled" },
  ];

  const assigneeOptions = [
    { value: "all", label: "All Assignees" },
    { value: "user", label: "Me" },
    { value: "ai", label: "AI Generated" },
  ];

  return (
    <div className="py-6">
      <div className="flex flex-col space-y-6">
        {/* Header */}
        <div className="flex flex-col gap-4 md:flex-row md:items-center md:justify-between">
          <div>
            <h1 className="text-3xl font-bold tracking-tight">Momentum</h1>
            <p className="text-muted-foreground mt-1">
              Manage your projects, momentums, and data-driven insights generated suggestions
            </p>
          </div>

          <div className="flex items-center gap-2">
            {pendingMomentums.length > 0 && (
              <Button
                variant="outline"
                onClick={() => setShowApprovalQueue(true)}
                className="relative"
                data-testid="button-approval-queue"
              >
                <AlertCircle className="h-4 w-4 mr-2" />
                AI Suggestions
                <Badge variant="destructive" className="ml-2">
                  {pendingMomentums.length}
                </Badge>
              </Button>
            )}

            <Button onClick={() => setShowCreateDialog(true)} data-testid="button-create-momentum">
              <Plus className="h-4 w-4 mr-2" />
              New Momentum
            </Button>
          </div>
        </div>

        {/* Stats Cards */}
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
          <Card data-testid="card-total-momentums">
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Total Momentum</CardTitle>
              <CheckSquare className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{momentums.length}</div>
              <p className="text-xs text-muted-foreground">Across all workspaces</p>
            </CardContent>
          </Card>

          <Card data-testid="card-in-progress">
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">In Progress</CardTitle>
              <Clock className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">
                {momentums.filter((m: Momentum) => m.status === "in_progress").length}
              </div>
              <p className="text-xs text-muted-foreground">Currently active</p>
            </CardContent>
          </Card>

          <Card data-testid="card-ai-generated">
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">AI Generated</CardTitle>
              <Bot className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">
                {momentums.filter((m: Momentum) => m.source === "ai_generated").length}
              </div>
              <p className="text-xs text-muted-foreground">Approved suggestions</p>
            </CardContent>
          </Card>

          <Card data-testid="card-pending-approval">
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Pending Approval</CardTitle>
              <AlertCircle className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{pendingMomentums.length}</div>
              <p className="text-xs text-muted-foreground">Awaiting review</p>
            </CardContent>
          </Card>
        </div>

        {/* Filters and Search */}
        <div className="flex flex-col gap-4 lg:flex-row lg:items-center">
          <div className="flex flex-1 items-center gap-2">
            <Search className="h-4 w-4 text-muted-foreground" />
            <Input
              placeholder="Search momentum..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="flex-1"
              data-testid="input-search-momentum"
            />
          </div>

          <div className="flex items-center gap-2 flex-wrap">
            <Filter className="h-4 w-4 text-muted-foreground" />

            {/* Workspace Filter */}
            <Select value={selectedWorkspace} onValueChange={setSelectedWorkspace}>
              <SelectTrigger className="w-40" data-testid="select-workspace">
                <SelectValue placeholder="Workspace" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Workspaces</SelectItem>
                {workspaces.map((workspace: Workspace) => (
                  <SelectItem key={workspace.id} value={workspace.id}>
                    {workspace.name}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>

            {/* Project Filter */}
            {selectedWorkspace !== "all" && (
              <Select value={selectedProject} onValueChange={setSelectedProject}>
                <SelectTrigger className="w-32" data-testid="select-project">
                  <SelectValue placeholder="Project" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All Projects</SelectItem>
                  {projects.map((project: Project) => (
                    <SelectItem key={project.id} value={project.id}>
                      {project.name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            )}

            {/* Status Filter */}
            <Select value={selectedStatus} onValueChange={setSelectedStatus}>
              <SelectTrigger className="w-32" data-testid="select-status">
                <SelectValue placeholder="Status" />
              </SelectTrigger>
              <SelectContent>
                {statusOptions.map((option) => (
                  <SelectItem key={option.value} value={option.value}>
                    {option.label}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>

            {/* Assignee Filter */}
            <Select value={selectedAssignee} onValueChange={setSelectedAssignee}>
              <SelectTrigger className="w-32" data-testid="select-assignee">
                <SelectValue placeholder="Assignee" />
              </SelectTrigger>
              <SelectContent>
                {assigneeOptions.map((option) => (
                  <SelectItem key={option.value} value={option.value}>
                    {option.label}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
        </div>

        {/* View Toggle and Content */}
        <Card>
          <CardHeader className="pb-4">
            <div className="flex items-center justify-between">
              <CardTitle className="text-lg">
                {selectedWorkspace !== "all"
                  ? (workspaces.find((w: Workspace) => w.id === selectedWorkspace)?.name ??
                    "Momentum")
                  : "All Momentum"}
              </CardTitle>

              <Tabs value={view} onValueChange={(value) => setView(value as "list" | "kanban")}>
                <TabsList className="grid w-fit grid-cols-2" data-testid="tabs-view-toggle">
                  <TabsTrigger value="list" className="flex items-center gap-2">
                    <List className="h-4 w-4" />
                    List
                  </TabsTrigger>
                  <TabsTrigger value="kanban" className="flex items-center gap-2">
                    <LayoutGrid className="h-4 w-4" />
                    Kanban
                  </TabsTrigger>
                </TabsList>
              </Tabs>
            </div>
          </CardHeader>
          <CardContent className="pt-0">
            <Tabs value={view} className="w-full">
              <TabsContent value="list" className="mt-0">
                <MomentumListView momentums={filteredMomentums} isLoading={isLoading} />
              </TabsContent>
              <TabsContent value="kanban" className="mt-0">
                <MomentumKanbanView momentums={filteredMomentums} isLoading={isLoading} />
              </TabsContent>
            </Tabs>
          </CardContent>
        </Card>
      </div>

      {/* Dialogs */}
      <CreateMomentumDialog
        open={showCreateDialog}
        onOpenChange={setShowCreateDialog}
        workspaces={workspaces}
        projects={projects}
      />

      <ApprovalQueue
        open={showApprovalQueue}
        onOpenChange={setShowApprovalQueue}
        pendingTasks={pendingMomentums}
      />
    </div>
  );
}


/* ===== src/app/(authorisedRoute)/omni-momentum/_components/MomentumSidebar.tsx ===== */

"use client";
import { usePathname } from "next/navigation";
import Link from "next/link";
import {
  CheckSquare2,
  Calendar,
  Clock,
  Inbox,
  Star,
  Sun,
  Moon,
  Book,
  Plus,
  FolderOpen,
  Target,
  BarChart3,
  Settings,
  Zap,
  Users,
  Timer,
  Hammer,
  ChevronDown,
  BookOpen,
  Brain,
  ExternalLink,
  Info,
  MoreHorizontal,
  PlusCircle,
  Trash2,
} from "lucide-react";
import {
  Badge,
  CollapsibleContent,
  CollapsibleTrigger,
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui";
import {
  SidebarContent,
  SidebarGroup,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
} from "@/components/ui/sidebar";
import { Collapsible } from "@radix-ui/react-collapsible";

// Mock data for active projects
const mockProjects = [
  { id: "1", name: "Website Redesign", tasks: 12, progress: 75, color: "bg-blue-500" },
  { id: "2", name: "Product Launch", tasks: 8, progress: 45, color: "bg-green-500" },
  { id: "3", name: "Client Onboarding", tasks: 5, progress: 90, color: "bg-purple-500" },
];

export function MomentumSidebar(): JSX.Element {
  const pathname = usePathname();

  return (
    <SidebarContent>
      {/* Task Management */}
      <SidebarGroup>
        <SidebarGroupLabel>Task Management</SidebarGroupLabel>
        <SidebarMenu>
          <SidebarMenuItem>
            <SidebarMenuButton asChild isActive={pathname === "/tasks"}>
              <Link href="/tasks" className="flex items-center w-full">
                <CheckSquare2 className="w-4 h-4 mr-3" />
                <span>Dashboard</span>
              </Link>
            </SidebarMenuButton>
          </SidebarMenuItem>
          <SidebarMenuItem>
            <SidebarMenuButton asChild>
              <Link href="/tasks/inbox" className="flex items-center justify-between w-full">
                <div className="flex items-center gap-3">
                  <Inbox className="w-4 h-4" />
                  <span>Inbox</span>
                </div>
                <Badge
                  variant="secondary"
                  className="h-5 flex-shrink-0 bg-muted text-muted-foreground border"
                >
                  12
                </Badge>
              </Link>
            </SidebarMenuButton>
          </SidebarMenuItem>
          <SidebarMenuItem>
            <SidebarMenuButton asChild>
              <Link href="/tasks/today" className="flex items-center justify-between w-full">
                <div className="flex items-center gap-3">
                  <Star className="w-4 h-4" />
                  <span>Today</span>
                </div>
                <Badge
                  variant="destructive"
                  className="h-5 flex-shrink-0 bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-300 border border-red-200 dark:border-red-800"
                >
                  5
                </Badge>
              </Link>
            </SidebarMenuButton>
          </SidebarMenuItem>
          <SidebarMenuItem>
            <SidebarMenuButton asChild>
              <Link href="/tasks/upcoming" className="flex items-center w-full">
                <Calendar className="w-4 h-4 mr-3" />
                <span>Upcoming</span>
              </Link>
            </SidebarMenuButton>
          </SidebarMenuItem>
          <SidebarMenuItem>
            <SidebarMenuButton asChild>
              <Link href="/tasks/anytime" className="flex items-center w-full">
                <Sun className="w-4 h-4 mr-3" />
                <span>Anytime</span>
              </Link>
            </SidebarMenuButton>
          </SidebarMenuItem>
          <SidebarMenuItem>
            <SidebarMenuButton asChild>
              <Link href="/tasks/someday" className="flex items-center w-full">
                <Moon className="w-4 h-4 mr-3" />
                <span>Someday</span>
              </Link>
            </SidebarMenuButton>
          </SidebarMenuItem>
          <SidebarMenuItem>
            <SidebarMenuButton asChild>
              <Link href="/tasks/completed" className="flex items-center w-full">
                <Book className="w-4 h-4 mr-3" />
                <span>Completed</span>
              </Link>
            </SidebarMenuButton>
          </SidebarMenuItem>
        </SidebarMenu>
      </SidebarGroup>

      {/* Quick Actions */}
      <SidebarGroup>
        <SidebarGroupLabel>Quick Actions</SidebarGroupLabel>
        <SidebarMenu>
          <SidebarMenuItem>
            <SidebarMenuButton asChild>
              <Link href="/tasks/new" className="flex items-center w-full">
                <Plus className="w-4 h-4 mr-2" />
                <span>New Task</span>
              </Link>
            </SidebarMenuButton>
          </SidebarMenuItem>
          <SidebarMenuItem>
            <SidebarMenuButton asChild>
              <Link href="/projects/new" className="flex items-center w-full">
                <FolderOpen className="w-4 h-4 mr-2" />
                <span>New Project</span>
              </Link>
            </SidebarMenuButton>
          </SidebarMenuItem>
          <SidebarMenuItem>
            <SidebarMenuButton asChild>
              <Link href="/tasks/quick-capture" className="flex items-center w-full">
                <Zap className="w-4 h-4 mr-2" />
                <span>Quick Capture</span>
              </Link>
            </SidebarMenuButton>
          </SidebarMenuItem>
          <SidebarMenuItem>
            <SidebarMenuButton asChild>
              <Link href="/tasks/time-tracker" className="flex items-center w-full">
                <Timer className="w-4 h-4 mr-2" />
                <span>Time Tracker</span>
              </Link>
            </SidebarMenuButton>
          </SidebarMenuItem>
        </SidebarMenu>
      </SidebarGroup>

      {/* Active Projects */}
      <SidebarGroup>
        <SidebarGroupLabel>Active Projects</SidebarGroupLabel>
        <SidebarMenu>
          {mockProjects.map((project) => (
            <SidebarMenuItem key={project.id}>
              <SidebarMenuButton asChild className="h-auto p-2">
                <Link href={`/projects/${project.id}`} className="flex items-start w-full">
                  <div className="flex items-center gap-2 w-full">
                    <div
                      className={`flex-shrink-0 w-2 h-2 rounded-full ${project.color} mt-2`}
                    ></div>
                    <div className="flex-1 min-w-0 group-data-[collapsible=icon]:hidden">
                      <div className="flex items-center justify-between">
                        <span className="text-sm font-medium truncate">{project.name}</span>
                        <Badge
                          variant="outline"
                          className="h-4 text-xs ml-1 bg-background text-foreground border-border"
                        >
                          {project.tasks}
                        </Badge>
                      </div>
                      <div className="flex items-center gap-2 mt-1">
                        <div className="flex-1 bg-gray-200 rounded-full h-1.5">
                          <div
                            className={`h-1.5 rounded-full ${project.color}`}
                            style={{ width: `${project.progress}%` }}
                          ></div>
                        </div>
                        <span className="text-xs text-muted-foreground">{project.progress}%</span>
                      </div>
                    </div>
                  </div>
                </Link>
              </SidebarMenuButton>
            </SidebarMenuItem>
          ))}
        </SidebarMenu>
      </SidebarGroup>

      {/* Productivity Tools */}
      <Collapsible>
        <SidebarGroup>
          <SidebarGroupLabel>Productivity</SidebarGroupLabel>
          <SidebarMenu>
            <SidebarMenuItem>
              <SidebarMenuButton asChild>
                <Link href="/tasks/focus-mode" className="flex items-center w-full">
                  <Target className="w-4 h-4 mr-2" />
                  <span>Focus Mode</span>
                </Link>
              </SidebarMenuButton>
            </SidebarMenuItem>
            <SidebarMenuItem>
              <SidebarMenuButton asChild>
                <Link href="/tasks/pomodoro" className="flex items-center w-full">
                  <Clock className="w-4 h-4 mr-2" />
                  <span>Pomodoro Timer</span>
                </Link>
              </SidebarMenuButton>
            </SidebarMenuItem>
            <SidebarMenuItem>
              <SidebarMenuButton asChild>
                <Link href="/tasks/team" className="flex items-center w-full">
                  <Users className="w-4 h-4 mr-2" />
                  <span>Team Tasks</span>
                </Link>
              </SidebarMenuButton>
            </SidebarMenuItem>
            <SidebarMenuItem>
              <SidebarMenuButton asChild>
                <Link href="/tasks/analytics" className="flex items-center w-full">
                  <BarChart3 className="w-4 h-4 mr-2" />
                  <span>Analytics</span>
                </Link>
              </SidebarMenuButton>
            </SidebarMenuItem>
          </SidebarMenu>
        </SidebarGroup>

        {/* Settings */}
        <SidebarGroup>
          <SidebarGroupLabel>Settings</SidebarGroupLabel>
          <SidebarMenu>
            <SidebarMenuItem>
              <SidebarMenuButton asChild>
                <Link href="/tasks/settings" className="flex items-center w-full">
                  <Settings className="w-4 h-4 mr-2" />
                  <span>Task Settings</span>
                </Link>
              </SidebarMenuButton>
            </SidebarMenuItem>
          </SidebarMenu>
        </SidebarGroup>
        {/* Recent Conversations */}
        <SidebarGroup>
          <SidebarGroupLabel>SidebarGroupLabel</SidebarGroupLabel>
          <SidebarMenu>
            <SidebarMenuItem>
              <SidebarMenuButton asChild>
                <Link href={{ pathname: "/chat" }} className="flex items-center w-full">
                  <Hammer className="w-4 h-4 mr-3" />
                  <span>SidebarMenuButton</span>
                </Link>
              </SidebarMenuButton>
            </SidebarMenuItem>
          </SidebarMenu>
        </SidebarGroup>

        {/* Help Section with Collapsible Content */}
        <SidebarGroup>
          <SidebarGroupLabel asChild>
            <CollapsibleTrigger>
              Help
              <ChevronDown className="ml-auto transition-transform group-data-[state=open]/collapsible:rotate-180" />
            </CollapsibleTrigger>
          </SidebarGroupLabel>
          <CollapsibleContent>
            <SidebarGroupContent>
              <SidebarMenuItem>
                <SidebarMenuButton>
                  <Brain className="w-4 h-4 mr-2" />
                  <span>ADHD Insights</span>
                  <Badge className="ml-auto">New</Badge>
                </SidebarMenuButton>
              </SidebarMenuItem>

              <Collapsible className="group/submenu">
                <SidebarMenuItem>
                  <CollapsibleTrigger asChild>
                    <SidebarMenuButton>
                      <BookOpen className="w-4 h-4 mr-2" />
                      <span>ADHD Resources</span>
                      <ChevronDown className="ml-auto transition-transform group-data-[state=open]/submenu:rotate-180" />
                    </SidebarMenuButton>
                  </CollapsibleTrigger>
                  <CollapsibleContent>
                    <SidebarMenuSub>
                      <SidebarMenuSubItem>
                        <Popover>
                          <PopoverTrigger asChild>
                            <SidebarMenuSubButton>
                              <Info className="w-4 h-4 mr-2" />
                              <span>Focus Techniques</span>
                            </SidebarMenuSubButton>
                          </PopoverTrigger>
                          <PopoverContent
                            side="right"
                            align="start"
                            className="w-[var(--sidebar-width)] h-2/3"
                          >
                            <div className="space-y-2">
                              <h4 className="font-medium">Focus Techniques</h4>
                              <p className="text-sm text-muted-foreground">
                                General information about different aspects of ADHD focus
                                techniques.
                              </p>
                              <ul className="text-sm space-y-1 mt-2">
                                <li>• Time blocking method</li>
                                <li>• Pomodoro technique</li>
                                <li>• Environment optimization</li>
                                <li>• Task breakdown strategies</li>
                              </ul>
                            </div>
                          </PopoverContent>
                        </Popover>
                      </SidebarMenuSubItem>
                      <SidebarMenuSubItem>
                        <Popover>
                          <PopoverTrigger asChild>
                            <SidebarMenuSubButton>
                              <Info className="w-4 h-4 mr-2" />
                              <span>Organization Tips</span>
                            </SidebarMenuSubButton>
                          </PopoverTrigger>
                          <PopoverContent
                            side="right"
                            align="start"
                            className="w-[var(--sidebar-width)] h-2/3"
                          >
                            <div className="space-y-2">
                              <h4 className="font-medium">Organization Tips</h4>
                              <p className="text-sm text-muted-foreground">
                                General information about different aspects of ADHD organization.
                              </p>
                              <ul className="text-sm space-y-1 mt-2">
                                <li>• Digital organization systems</li>
                                <li>• Physical workspace setup</li>
                                <li>• Calendar management</li>
                                <li>• Reminder systems</li>
                              </ul>
                            </div>
                          </PopoverContent>
                        </Popover>
                      </SidebarMenuSubItem>
                      <SidebarMenuSubItem>
                        <Popover>
                          <PopoverTrigger asChild>
                            <SidebarMenuSubButton>
                              <Info className="w-4 h-4 mr-2" />
                              <span>Stress Management</span>
                            </SidebarMenuSubButton>
                          </PopoverTrigger>
                          <PopoverContent
                            side="right"
                            align="start"
                            className="w-[var(--sidebar-width)] h-2/3"
                          >
                            <div className="space-y-2">
                              <h4 className="font-medium">Stress Management</h4>
                              <p className="text-sm text-muted-foreground">
                                General information about different aspects of ADHD stress
                                management.
                              </p>
                              <ul className="text-sm space-y-1 mt-2">
                                <li>• Mindfulness practices</li>
                                <li>• Breathing exercises</li>
                                <li>• Physical activity benefits</li>
                                <li>• Social support systems</li>
                              </ul>
                            </div>
                          </PopoverContent>
                        </Popover>
                      </SidebarMenuSubItem>
                    </SidebarMenuSub>
                  </CollapsibleContent>
                </SidebarMenuItem>
              </Collapsible>

              <SidebarMenuItem>
                <SidebarMenuButton>
                  <Settings className="w-4 h-4 mr-2" />
                  <span>Omni-Momentum</span>
                </SidebarMenuButton>
                <DropdownMenu>
                  <DropdownMenuTrigger asChild>
                    <SidebarMenuAction>
                      <MoreHorizontal className="w-4 h-4" />
                      <span className="sr-only">Project Actions</span>
                    </SidebarMenuAction>
                  </DropdownMenuTrigger>
                  <DropdownMenuContent side="right" align="start">
                    <DropdownMenuItem>
                      <Trash2 className="w-4 h-4 mr-2" />
                      <span>Delete Project</span>
                    </DropdownMenuItem>
                    <DropdownMenuItem>
                      <PlusCircle className="w-4 h-4 mr-2" />
                      <span>Add Task to Project</span>
                    </DropdownMenuItem>
                    <DropdownMenuItem>
                      <ExternalLink className="w-4 h-4 mr-2" />
                      <span>Open Project</span>
                    </DropdownMenuItem>
                  </DropdownMenuContent>
                </DropdownMenu>
              </SidebarMenuItem>
            </SidebarGroupContent>
          </CollapsibleContent>
        </SidebarGroup>
      </Collapsible>
    </SidebarContent>
  );
}


/* ===== src/app/(authorisedRoute)/omni-momentum/page.tsx ===== */

import MomentumClientWrapper from "./_components/MomentumClientWrapper";

export default function Page(): JSX.Element {
  return <MomentumClientWrapper />;
}


/* ===== src/app/(authorisedRoute)/omni-reach/_components/MarketingSidebar.tsx ===== */

"use client";

import {
  Mail,
  Share2,
  Globe,
  FileText,
  Target,
  TrendingUp,
  Users,
  PenTool,
  Camera,
  Video,
  BookOpen,
  Gift,
  Settings,
} from "lucide-react";
import Link from "next/link";
import { usePathname } from "next/navigation";
import { Badge } from "@/components/ui";
import {
  SidebarContent,
  SidebarGroup,
  SidebarGroupLabel,
  SidebarMenu,
  SidebarMenuButton,
  SidebarMenuItem,
} from "@/components/ui/sidebar";

// Mock data for marketing campaigns
const mockCampaigns = [
  {
    id: "1",
    name: "Spring Wellness Challenge",
    type: "Email",
    status: "Active",
    performance: "+12%",
  },
  {
    id: "2",
    name: "Meditation Workshop Promo",
    type: "Social",
    status: "Scheduled",
    performance: "N/A",
  },
  {
    id: "3",
    name: "New Client Welcome Series",
    type: "Email",
    status: "Active",
    performance: "+8%",
  },
  {
    id: "4",
    name: "Instagram Stories Campaign",
    type: "Social",
    status: "Draft",
    performance: "N/A",
  },
];

export function MarketingSidebar(): JSX.Element {
  const pathname = usePathname();

  return (
    <SidebarContent>
      {/* Marketing Tools */}
      <SidebarGroup>
        <SidebarGroupLabel>Marketing Tools</SidebarGroupLabel>
        <SidebarMenu>
          <SidebarMenuItem>
            <SidebarMenuButton asChild isActive={pathname === "/marketing"}>
              <Link href={{ pathname: "/marketing" }} className="flex items-center w-full">
                <TrendingUp className="w-4 h-4 mr-3" />
                <span>Dashboard</span>
              </Link>
            </SidebarMenuButton>
          </SidebarMenuItem>
          <SidebarMenuItem>
            <SidebarMenuButton asChild>
              <Link
                href={{ pathname: "/marketing/campaigns" }}
                className="flex items-center justify-between w-full"
              >
                <div className="flex items-center gap-3">
                  <Target className="w-4 h-4" />
                  <span>Campaigns</span>
                </div>
                <Badge variant="secondary" className="h-5 flex-shrink-0">
                  4
                </Badge>
              </Link>
            </SidebarMenuButton>
          </SidebarMenuItem>
          <SidebarMenuItem>
            <SidebarMenuButton asChild>
              <Link href={{ pathname: "/marketing/email" }} className="flex items-center w-full">
                <Mail className="w-4 h-4 mr-3" />
                <span>Email Marketing</span>
              </Link>
            </SidebarMenuButton>
          </SidebarMenuItem>
          <SidebarMenuItem>
            <SidebarMenuButton asChild>
              <Link href={{ pathname: "/marketing/social" }} className="flex items-center w-full">
                <Share2 className="w-4 h-4 mr-3" />
                <span>Social Media</span>
              </Link>
            </SidebarMenuButton>
          </SidebarMenuItem>
          <SidebarMenuItem>
            <SidebarMenuButton asChild>
              <Link href={{ pathname: "/marketing/content" }} className="flex items-center w-full">
                <FileText className="w-4 h-4 mr-3" />
                <span>Content Library</span>
              </Link>
            </SidebarMenuButton>
          </SidebarMenuItem>
          <SidebarMenuItem>
            <SidebarMenuButton asChild>
              <Link href={{ pathname: "/marketing/website" }} className="flex items-center w-full">
                <Globe className="w-4 h-4 mr-3" />
                <span>Website & SEO</span>
              </Link>
            </SidebarMenuButton>
          </SidebarMenuItem>
          <SidebarMenuItem>
            <SidebarMenuButton asChild>
              <Link
                href={{ pathname: "/marketing/referrals" }}
                className="flex items-center w-full"
              >
                <Users className="w-4 h-4 mr-3" />
                <span>Referral Program</span>
              </Link>
            </SidebarMenuButton>
          </SidebarMenuItem>
        </SidebarMenu>
      </SidebarGroup>

      {/* Content Creation */}
      <SidebarGroup>
        <SidebarGroupLabel>Create Content</SidebarGroupLabel>
        <SidebarMenu>
          <SidebarMenuItem>
            <SidebarMenuButton asChild>
              <Link
                href={{ pathname: "/marketing/create/email" }}
                className="flex items-center w-full"
              >
                <Mail className="w-4 h-4 mr-2" />
                <span>New Email Campaign</span>
              </Link>
            </SidebarMenuButton>
          </SidebarMenuItem>
          <SidebarMenuItem>
            <SidebarMenuButton asChild>
              <Link
                href={{ pathname: "/marketing/create/social" }}
                className="flex items-center w-full"
              >
                <Camera className="w-4 h-4 mr-2" />
                <span>Social Media Post</span>
              </Link>
            </SidebarMenuButton>
          </SidebarMenuItem>
          <SidebarMenuItem>
            <SidebarMenuButton asChild>
              <Link
                href={{ pathname: "/marketing/create/blog" }}
                className="flex items-center w-full"
              >
                <PenTool className="w-4 h-4 mr-2" />
                <span>Blog Post</span>
              </Link>
            </SidebarMenuButton>
          </SidebarMenuItem>
          <SidebarMenuItem>
            <SidebarMenuButton asChild>
              <Link
                href={{ pathname: "/marketing/create/video" }}
                className="flex items-center w-full"
              >
                <Video className="w-4 h-4 mr-2" />
                <span>Video Content</span>
              </Link>
            </SidebarMenuButton>
          </SidebarMenuItem>
          <SidebarMenuItem>
            <SidebarMenuButton asChild>
              <Link
                href={{ pathname: "/marketing/create/newsletter" }}
                className="flex items-center w-full"
              >
                <BookOpen className="w-4 h-4 mr-2" />
                <span>Newsletter</span>
              </Link>
            </SidebarMenuButton>
          </SidebarMenuItem>
          <SidebarMenuItem>
            <SidebarMenuButton asChild>
              <Link
                href={{ pathname: "/marketing/create/promotion" }}
                className="flex items-center w-full"
              >
                <Gift className="w-4 h-4 mr-2" />
                <span>Special Offer</span>
              </Link>
            </SidebarMenuButton>
          </SidebarMenuItem>
        </SidebarMenu>
      </SidebarGroup>

      {/* Active Campaigns */}
      <SidebarGroup>
        <SidebarGroupLabel>Active Campaigns</SidebarGroupLabel>
        <SidebarMenu>
          {mockCampaigns.slice(0, 3).map((campaign) => (
            <SidebarMenuItem key={campaign.id}>
              <SidebarMenuButton asChild className="h-auto p-2">
                <Link
                  href={{ pathname: `/marketing/campaign/${campaign.id}` }}
                  className="flex items-start w-full"
                >
                  <div className="flex items-center gap-2 w-full">
                    <div className="flex-shrink-0 w-2 h-2 rounded-full bg-green-500 mt-2"></div>
                    <div className="flex-1 min-w-0 group-data-[collapsible=icon]:hidden">
                      <div className="flex items-center justify-between">
                        <span className="text-sm font-medium truncate">{campaign.name}</span>
                        <Badge
                          variant={campaign.status === "Active" ? "default" : "secondary"}
                          className="h-4 text-xs ml-1"
                        >
                          {campaign.status}
                        </Badge>
                      </div>
                      <p className="text-xs text-muted-foreground">
                        {campaign.type} • {campaign.performance}
                      </p>
                    </div>
                  </div>
                </Link>
              </SidebarMenuButton>
            </SidebarMenuItem>
          ))}
        </SidebarMenu>
      </SidebarGroup>

      {/* Wellness Marketing Templates */}
      <SidebarGroup>
        <SidebarGroupLabel>Wellness Templates</SidebarGroupLabel>
        <SidebarMenu>
          <SidebarMenuItem>
            <SidebarMenuButton asChild>
              <Link
                href={{ pathname: "/marketing/templates/yoga" }}
                className="flex items-center w-full"
              >
                <span className="mr-2">🧘‍♀️</span>
                <span className="group-data-[collapsible=icon]:hidden">Yoga & Meditation</span>
              </Link>
            </SidebarMenuButton>
          </SidebarMenuItem>
          <SidebarMenuItem>
            <SidebarMenuButton asChild>
              <Link
                href={{ pathname: "/marketing/templates/nutrition" }}
                className="flex items-center w-full"
              >
                <span className="mr-2">🥗</span>
                <span className="group-data-[collapsible=icon]:hidden">Nutrition & Wellness</span>
              </Link>
            </SidebarMenuButton>
          </SidebarMenuItem>
          <SidebarMenuItem>
            <SidebarMenuButton asChild>
              <Link
                href={{ pathname: "/marketing/templates/mindfulness" }}
                className="flex items-center w-full"
              >
                <span className="mr-2">🌱</span>
                <span className="group-data-[collapsible=icon]:hidden">
                  Mindfulness & Self-Care
                </span>
              </Link>
            </SidebarMenuButton>
          </SidebarMenuItem>
          <SidebarMenuItem>
            <SidebarMenuButton asChild>
              <Link
                href={{ pathname: "/marketing/templates/seasonal" }}
                className="flex items-center w-full"
              >
                <span className="mr-2">🍂</span>
                <span className="group-data-[collapsible=icon]:hidden">Seasonal Campaigns</span>
              </Link>
            </SidebarMenuButton>
          </SidebarMenuItem>
        </SidebarMenu>
      </SidebarGroup>

      {/* Settings */}
      <SidebarGroup>
        <SidebarGroupLabel>Settings</SidebarGroupLabel>
        <SidebarMenu>
          <SidebarMenuItem>
            <SidebarMenuButton asChild>
              <Link href={{ pathname: "/marketing/settings" }} className="flex items-center w-full">
                <Settings className="w-4 h-4 mr-2" />
                <span>Marketing Settings</span>
              </Link>
            </SidebarMenuButton>
          </SidebarMenuItem>
        </SidebarMenu>
      </SidebarGroup>
    </SidebarContent>
  );
}


/* ===== src/app/(authorisedRoute)/omni-reach/_components/MarketingWidgets.tsx ===== */

"use client";
import { Mail, Calendar, Palette, Gift, Users, HelpCircle } from "lucide-react";
import { Tabs, TabsList, TabsTrigger, TabsContent } from "@/components/ui";

// Import widget components
import { EmailMarketing } from "./widgets/EmailMarketing";
import { CreatorStudio } from "./widgets/CreatorStudio";
import { ContentCalendar } from "./widgets/ContentCalendar";
import { LeadMagnetStudio } from "./widgets/LeadMagnetStudio";
import { MembershipLoyalty } from "./widgets/MembershipLoyalty";
import { QuizCreator } from "./widgets/QuizCreator";

export function MarketingWidgets(): JSX.Element {
  return (
    <div className="w-full">
      <Tabs defaultValue="email" className="w-full">
        <TabsList className="w-full justify-start mb-6 bg-teal-50 dark:bg-teal-950/20 p-1 overflow-x-auto">
          <TabsTrigger
            value="email"
            className="data-[state=active]:bg-teal-100 data-[state=active]:text-teal-900 dark:data-[state=active]:bg-teal-900/20"
          >
            <Mail className="h-4 w-4 mr-2" />
            Email Marketing
          </TabsTrigger>
          <TabsTrigger
            value="creator"
            className="data-[state=active]:bg-purple-100 data-[state=active]:text-purple-900 dark:data-[state=active]:bg-purple-900/20"
          >
            <Palette className="h-4 w-4 mr-2" />
            Creator Studio
          </TabsTrigger>
          <TabsTrigger
            value="calendar"
            className="data-[state=active]:bg-blue-100 data-[state=active]:text-blue-900 dark:data-[state=active]:bg-blue-900/20"
          >
            <Calendar className="h-4 w-4 mr-2" />
            Content Calendar
          </TabsTrigger>
          <TabsTrigger
            value="leadmagnet"
            className="data-[state=active]:bg-amber-100 data-[state=active]:text-amber-900 dark:data-[state=active]:bg-amber-900/20"
          >
            <Gift className="h-4 w-4 mr-2" />
            Lead Magnet Studio
          </TabsTrigger>
          <TabsTrigger
            value="membership"
            className="data-[state=active]:bg-indigo-100 data-[state=active]:text-indigo-900 dark:data-[state=active]:bg-indigo-900/20"
          >
            <Users className="h-4 w-4 mr-2" />
            Membership & Loyalty
          </TabsTrigger>
          <TabsTrigger
            value="quiz"
            className="data-[state=active]:bg-green-100 data-[state=active]:text-green-900 dark:data-[state=active]:bg-green-900/20"
          >
            <HelpCircle className="h-4 w-4 mr-2" />
            Quiz Creator
          </TabsTrigger>
        </TabsList>

        {/* Tab content sections */}
        <TabsContent value="email">
          <EmailMarketing />
        </TabsContent>

        <TabsContent value="creator">
          <CreatorStudio />
        </TabsContent>

        <TabsContent value="calendar">
          <ContentCalendar />
        </TabsContent>

        <TabsContent value="leadmagnet">
          <LeadMagnetStudio />
        </TabsContent>

        <TabsContent value="membership">
          <MembershipLoyalty />
        </TabsContent>

        <TabsContent value="quiz">
          <QuizCreator />
        </TabsContent>
      </Tabs>
    </div>
  );
}


/* ===== src/app/(authorisedRoute)/omni-reach/_components/widgets/ContentCalendar.tsx ===== */

"use client";

import { useState } from "react";
import { Calendar, ArrowRight, Sparkles, CalendarDays } from "lucide-react";
import Link from "next/link";
import { Input } from "@/components/ui";
import { Button } from "@/components/ui";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui";

export function ContentCalendar(): JSX.Element {
  const [contentTitle, setContentTitle] = useState("");

  return (
    <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
      <div className="space-y-6">
        <div className="bg-blue-50 dark:bg-blue-950/20 p-6 rounded-lg">
          <h2 className="text-2xl font-bold flex items-center gap-2 mb-4 text-blue-700 dark:text-blue-300">
            <Calendar className="h-6 w-6" />
            Content Calendar
          </h2>
          <p className="text-muted-foreground mb-6">
            Plan, schedule, and automate your content across all platforms. Our intuitive calendar
            helps you maintain a consistent presence and engage your audience with timely, relevant
            content.
          </p>

          <div className="space-y-4">
            <div>
              <label className="text-sm font-medium mb-1 block">Content Title</label>
              <Input
                placeholder="e.g., '5 Mindfulness Practices for Busy Professionals'"
                value={contentTitle}
                onChange={(e) => setContentTitle(e.target.value)}
                className="bg-white dark:bg-blue-950/40"
              />
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="text-sm font-medium mb-1 block">Content Type</label>
                <select className="w-full h-9 rounded-md border border-input bg-white dark:bg-blue-950/40 px-3 py-1 text-sm">
                  <option value="blog">Blog Post</option>
                  <option value="social">Social Media Post</option>
                  <option value="email">Email Newsletter</option>
                  <option value="video">Video Content</option>
                </select>
              </div>
              <div>
                <label className="text-sm font-medium mb-1 block">Schedule Date</label>
                <Input type="date" className="bg-white dark:bg-blue-950/40" />
              </div>
            </div>

            <Button className="w-full bg-teal-600 hover:bg-teal-100 hover:text-teal-800 text-white">
              <Sparkles className="h-4 w-4 mr-2" />
              Add to Calendar
            </Button>
          </div>
        </div>

        <Card>
          <CardHeader className="pb-3">
            <CardTitle className="text-lg font-semibold">Key Features</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-2">
              <div className="flex items-center gap-2">
                <div className="h-2 w-2 rounded-full bg-blue-500"></div>
                <span className="text-sm">
                  Visual content planning with drag-and-drop interface
                </span>
              </div>
              <div className="flex items-center gap-2">
                <div className="h-2 w-2 rounded-full bg-blue-500"></div>
                <span className="text-sm">Automated publishing to multiple platforms</span>
              </div>
              <div className="flex items-center gap-2">
                <div className="h-2 w-2 rounded-full bg-blue-500"></div>
                <span className="text-sm">Content recycling and repurposing suggestions</span>
              </div>
              <div className="flex items-center gap-2">
                <div className="h-2 w-2 rounded-full bg-blue-500"></div>
                <span className="text-sm">Performance analytics for published content</span>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      <div className="space-y-6">
        <Card className="border-blue-100 dark:border-blue-900/50 py-0">
          <CardHeader className="pt-6 pb-3 bg-blue-50 dark:bg-blue-950/20 rounded-t-lg">
            <CardTitle className="text-lg font-semibold">Calendar Preview</CardTitle>
            <CardDescription>Your upcoming content schedule</CardDescription>
          </CardHeader>
          <CardContent className="pt-6">
            <div className="border rounded-md p-4 bg-white dark:bg-blue-950/10">
              <div className="text-sm font-medium mb-3 pb-2 border-b flex items-center justify-between">
                <span>June 2025</span>
                <div className="flex gap-1">
                  <button className="p-1 rounded hover:bg-blue-50 dark:hover:bg-blue-900/20">
                    <ArrowRight className="h-4 w-4 rotate-180" />
                  </button>
                  <button className="p-1 rounded hover:bg-blue-50 dark:hover:bg-blue-900/20">
                    <ArrowRight className="h-4 w-4" />
                  </button>
                </div>
              </div>

              {/* Simplified week view with colored bubbles and labels */}
              <div className="space-y-2">
                {["Mon", "Tue", "Wed", "Thu", "Fri"].map((d, idx) => (
                  <div key={d} className="flex items-start gap-3">
                    <span className="w-10 text-right text-xs mt-1 font-medium">{d}</span>
                    <div className="flex-1 space-y-1">
                      {idx === 1 && (
                        <div className="bg-teal-100 text-teal-800 rounded px-2 py-1 text-xs inline-flex items-center gap-1">
                          <CalendarDays className="h-3 w-3" /> Instagram –{" "}
                          {contentTitle || "Mindfulness Reel"}
                        </div>
                      )}
                      {idx === 2 && (
                        <div className="bg-blue-100 text-blue-800 rounded px-2 py-1 text-xs inline-flex items-center gap-1">
                          <CalendarDays className="h-3 w-3" /> Blog – 5 Tips for Balance
                        </div>
                      )}
                      {idx === 4 && (
                        <div className="bg-purple-100 text-purple-800 rounded px-2 py-1 text-xs inline-flex items-center gap-1">
                          <CalendarDays className="h-3 w-3" /> Newsletter – Weekend Reset
                        </div>
                      )}
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </CardContent>
          <CardFooter className="flex justify-between border-t pt-4 pb-6">
            <Button variant="outline" size="sm" asChild>
              <Link href={{ pathname: "/marketing/calendar/analytics" }}>View Analytics</Link>
            </Button>
            <Button
              variant="outline"
              size="sm"
              className="bg-blue-50 hover:bg-blue-100 dark:bg-blue-950/20 dark:hover:bg-blue-900/30"
              asChild
            >
              <Link href={{ pathname: "/marketing/calendar" }}>
                Open Full Calendar
                <ArrowRight className="ml-2 h-4 w-4" />
              </Link>
            </Button>
          </CardFooter>
        </Card>

        <div className="bg-amber-50 dark:bg-amber-950/20 p-4 rounded-lg">
          <h3 className="font-medium flex items-center gap-2 text-amber-700 dark:text-amber-300">
            <Sparkles className="h-4 w-4" />
            Try Our Lead Magnet Studio
          </h3>
          <p className="text-sm text-muted-foreground mt-1">
            Need content for your calendar? Our Lead Magnet Studio helps you create valuable
            downloadable resources to attract new clients.
          </p>
          <Button
            variant="link"
            className="text-amber-600 dark:text-amber-400 p-0 h-auto mt-2"
            onClick={() =>
              document.querySelector('[value="lead"]')?.dispatchEvent(new MouseEvent("click"))
            }
          >
            Explore Lead Magnet Studio
            <ArrowRight className="ml-1 h-3 w-3" />
          </Button>
        </div>
      </div>
    </div>
  );
}


/* ===== src/app/(authorisedRoute)/omni-reach/_components/widgets/CreatorStudio.tsx ===== */

"use client";

import { useState } from "react";
import { Palette, ArrowRight, Sparkles, Image as ImageIcon, Layers, Wand2 } from "lucide-react";
import Link from "next/link";
import { Input } from "@/components/ui";
import { Button } from "@/components/ui";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui";

export function CreatorStudio(): JSX.Element {
  const [promptText, setPromptText] = useState("");

  return (
    <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
      <div className="space-y-6">
        <div className="bg-purple-50 dark:bg-purple-950/20 p-6 rounded-lg">
          <h2 className="text-2xl font-bold flex items-center gap-2 mb-4 text-purple-700 dark:text-purple-300">
            <Palette className="h-6 w-6" />
            Creator Studio
          </h2>
          <p className="text-muted-foreground mb-6">
            Go beyond visuals—ideate, write, and design any marketing asset in one place. Creator
            Studio uses AI to craft on-brand blog posts, email sequences, captions, and eye-catching
            graphics from a single prompt or your past content.
          </p>

          <div className="space-y-4">
            <div>
              <label className="text-sm font-medium mb-1 block">Design Prompt</label>
              <Input
                placeholder="e.g., 'Calming yoga pose in nature with soft lighting'"
                value={promptText}
                onChange={(e) => setPromptText(e.target.value)}
                className="bg-white dark:bg-purple-950/40"
              />
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="text-sm font-medium mb-1 block">Content Type</label>
                <select className="w-full h-9 rounded-md border border-input bg-white dark:bg-purple-950/40 px-3 py-1 text-sm">
                  <option value="social">Social Media Post</option>
                  <option value="banner">Website Banner</option>
                  <option value="flyer">Digital Flyer</option>
                  <option value="logo">Logo Design</option>
                </select>
              </div>
              <div>
                <label className="text-sm font-medium mb-1 block">Style</label>
                <select className="w-full h-9 rounded-md border border-input bg-white dark:bg-purple-950/40 px-3 py-1 text-sm">
                  <option value="minimalist">Minimalist</option>
                  <option value="vibrant">Vibrant & Colorful</option>
                  <option value="serene">Serene & Calm</option>
                  <option value="professional">Professional</option>
                </select>
              </div>
            </div>

            <Button className="w-full bg-purple-600 text-white hover:bg-teal-100 hover:text-teal-800">
              <Sparkles className="h-4 w-4 mr-2" />
              Generate Content
            </Button>
          </div>
        </div>

        <Card>
          <CardHeader className="pb-3">
            <CardTitle className="text-lg font-semibold">Key Features</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-2">
              <div className="flex items-center gap-2">
                <div className="h-2 w-2 rounded-full bg-purple-500"></div>
                <span className="text-sm">AI-powered image generation with your brand style</span>
              </div>
              <div className="flex items-center gap-2">
                <div className="h-2 w-2 rounded-full bg-purple-500"></div>
                <span className="text-sm">Customizable templates for all social platforms</span>
              </div>
              <div className="flex items-center gap-2">
                <div className="h-2 w-2 rounded-full bg-purple-500"></div>
                <span className="text-sm">Brand kit integration for consistent visuals</span>
              </div>
              <div className="flex items-center gap-2">
                <div className="h-2 w-2 rounded-full bg-purple-500"></div>
                <span className="text-sm">One-click resize for different platforms</span>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      <div className="space-y-6">
        <Card className="border-purple-100 dark:border-purple-900/50 py-0">
          <CardHeader className="pt-6 pb-3 bg-purple-50 dark:bg-purple-950/20 rounded-t-lg">
            <CardTitle className="text-lg font-semibold">Design Preview</CardTitle>
            <CardDescription>How your generated design might look</CardDescription>
          </CardHeader>
          <CardContent className="pt-6">
            <div className="border rounded-md p-4 bg-white dark:bg-purple-950/10 aspect-square flex items-center justify-center relative overflow-hidden">
              {promptText ? (
                <div className="text-center space-y-4">
                  <Layers className="h-16 w-16 mx-auto text-purple-400" />
                  <p className="text-sm text-muted-foreground">
                    Your design based on: &quot;{promptText}&quot;
                    <br />
                    would appear here after generation
                  </p>
                </div>
              ) : (
                <div className="text-center space-y-4">
                  <ImageIcon className="h-16 w-16 mx-auto text-purple-300" />
                  <p className="text-sm text-muted-foreground z-10">
                    Enter a prompt and click &apos;Generate Content&apos;
                    <br />
                    to create your custom visual
                  </p>
                  <Wand2 className="absolute -bottom-4 -left-4 h-24 w-24 text-purple-100/50 dark:text-purple-900/50 rotate-12" />
                  <Layers className="absolute -top-5 -right-5 h-20 w-20 text-purple-100/50 dark:text-purple-900/50 rotate-12" />
                </div>
              )}
            </div>
          </CardContent>
          <CardFooter className="flex justify-between border-t pt-4 pb-6">
            <Button variant="outline" size="sm" asChild>
              <Link href={{ pathname: "/marketing/creator/templates" }}>Browse Templates</Link>
            </Button>
            <Button
              variant="outline"
              size="sm"
              className="bg-purple-50 hover:bg-purple-100 dark:bg-purple-950/20 dark:hover:bg-purple-900/30"
              asChild
            >
              <Link href={{ pathname: "/marketing/creator" }}>
                Open Creator Studio
                <ArrowRight className="ml-2 h-4 w-4" />
              </Link>
            </Button>
          </CardFooter>
        </Card>

        <div className="bg-blue-50 dark:bg-blue-950/20 p-4 rounded-lg">
          <h3 className="font-medium flex items-center gap-2 text-blue-700 dark:text-blue-300">
            <Sparkles className="h-4 w-4" />
            Try Our Content Calendar
          </h3>
          <p className="text-sm text-muted-foreground mt-1">
            Ready to schedule your new designs? Our Content Calendar helps you plan and automate
            your content across all platforms.
          </p>
          <Button
            variant="link"
            className="text-blue-600 dark:text-blue-400 p-0 h-auto mt-2"
            onClick={() =>
              document.querySelector('[value="calendar"]')?.dispatchEvent(new MouseEvent("click"))
            }
          >
            Explore Content Calendar
            <ArrowRight className="ml-1 h-3 w-3" />
          </Button>
        </div>
      </div>
    </div>
  );
}


/* ===== src/app/(authorisedRoute)/omni-reach/_components/widgets/EmailMarketing.tsx ===== */

"use client";

import { useState } from "react";
import { Mail, ArrowRight, Sparkles, Megaphone } from "lucide-react";
import Link from "next/link";
import { Input } from "@/components/ui";
import { Button } from "@/components/ui";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
  CardFooter,
} from "@/components/ui";

export function EmailMarketing(): JSX.Element {
  const [emailSubject, setEmailSubject] = useState("");

  return (
    <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
      <div className="space-y-6">
        <div className="bg-teal-50 dark:bg-teal-950/20 p-6 rounded-lg">
          <h2 className="text-2xl font-bold flex items-center gap-2 mb-4 text-teal-700 dark:text-teal-300">
            <Mail className="h-6 w-6" />
            Email Marketing Automation
          </h2>
          <p className="text-muted-foreground mb-6">
            Design automated email sequences that nurture leads and build lasting client
            relationships. Our intuitive email builder helps you create beautiful, personalized
            emails that resonate with your audience.
          </p>

          <div className="space-y-4">
            <div>
              <label className="text-sm font-medium mb-1 block">Email Subject Line</label>
              <Input
                placeholder="e.g., 'Your Wellness Journey Begins Today'"
                value={emailSubject}
                onChange={(e) => setEmailSubject(e.target.value)}
                className="bg-white dark:bg-teal-950/40"
              />
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="text-sm font-medium mb-1 block">Audience</label>
                <select className="w-full h-9 rounded-md border border-input bg-white dark:bg-teal-950/40 px-3 py-1 text-sm">
                  <option value="new">New Subscribers</option>
                  <option value="existing">Existing Clients</option>
                  <option value="inactive">Inactive Clients</option>
                </select>
              </div>
              <div>
                <label className="text-sm font-medium mb-1 block">Email Type</label>
                <select className="w-full h-9 rounded-md border border-input bg-white dark:bg-teal-950/40 px-3 py-1 text-sm">
                  <option value="welcome">Welcome Series</option>
                  <option value="newsletter">Newsletter</option>
                  <option value="promotion">Promotion</option>
                  <option value="event">Event Invitation</option>
                </select>
              </div>
            </div>

            <Button className="w-full bg-teal-600 hover:bg-teal-100 hover:text-teal-800 text-white">
              <Sparkles className="h-4 w-4 mr-2" />
              Generate Email Template
            </Button>
          </div>
        </div>

        <Card>
          <CardHeader className="pb-3">
            <CardTitle className="text-lg font-semibold">Key Features</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-2">
              <div className="flex items-center gap-2">
                <div className="h-2 w-2 rounded-full bg-teal-500"></div>
                <span className="text-sm">Personalized templates with dynamic content</span>
              </div>
              <div className="flex items-center gap-2">
                <div className="h-2 w-2 rounded-full bg-teal-500"></div>
                <span className="text-sm">Behavior-based triggers and automations</span>
              </div>
              <div className="flex items-center gap-2">
                <div className="h-2 w-2 rounded-full bg-teal-500"></div>
                <span className="text-sm">Detailed performance analytics and insights</span>
              </div>
              <div className="flex items-center gap-2">
                <div className="h-2 w-2 rounded-full bg-teal-500"></div>
                <span className="text-sm">A/B testing to optimize open and click rates</span>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      <div className="space-y-6">
        <Card className="border-teal-100 dark:border-teal-900/50 py-0">
          <CardHeader className="pt-6 pb-3 bg-teal-50 dark:bg-teal-950/20 rounded-t-lg">
            <CardTitle className="text-lg font-semibold">Email Preview</CardTitle>
            <CardDescription>How your email might look to recipients</CardDescription>
          </CardHeader>
          <CardContent className="pt-6">
            <div className="border rounded-md p-4 bg-white dark:bg-teal-950/10">
              <div className="border-b pb-2 mb-3">
                <div className="font-medium">
                  {emailSubject || "Your Wellness Journey Begins Today"}
                </div>
                <div className="text-xs text-muted-foreground">From: Your Practice Name</div>
              </div>
              <div className="space-y-3 text-sm">
                <p>Dear [Client Name],</p>
                <p>
                  Thank you for joining our wellness community. We&apos;re excited to be part of
                  your journey toward balance and well-being.
                </p>{" "}
                {/* Escaped apostrophe */}
                <p>Here are some resources to get you started:</p>
                <ul className="list-disc pl-5 space-y-1">
                  <li>Your free wellness assessment</li>
                  <li>Beginner&apos;s guide to mindfulness</li> {/* Escaped apostrophe */}
                  <li>Schedule your first session</li>
                </ul>
                <p>Looking forward to supporting you,</p>
                <p>Your Name</p>
              </div>
            </div>
          </CardContent>
          <CardFooter className="flex justify-between border-t pt-4 pb-6">
            <Button variant="outline" size="sm" asChild>
              <Link href={{ pathname: "/marketing/email/templates" }}>Browse Templates</Link>
            </Button>
            <Button
              variant="outline"
              size="sm"
              className="bg-teal-50 hover:bg-teal-100 dark:bg-teal-950/20 dark:hover:bg-teal-900/30"
              asChild
            >
              <Link href={{ pathname: "/marketing/email" }}>
                Create Email Campaign
                <ArrowRight className="ml-2 h-4 w-4" />
              </Link>
            </Button>
          </CardFooter>
        </Card>

        <div className="bg-rose-50 dark:bg-rose-950/20 p-4 rounded-lg">
          <h3 className="font-medium flex items-center gap-2 text-rose-700 dark:text-rose-300">
            <Megaphone className="h-4 w-4" />
            Try Our Creator Studio
          </h3>
          <p className="text-sm text-muted-foreground mt-1">
            Unlock limitless content potential with Creator Studio. Ideate blog posts, social
            captions, emails, and more — then let AI craft on-brand copy and visuals for you. Feed
            previous blogs or videos and watch the studio match your unique tone.
          </p>
          <Button
            variant="link"
            className="text-rose-600 dark:text-rose-400 p-0 h-auto mt-2"
            onClick={() =>
              document.querySelector('[value="creator"]')?.dispatchEvent(new MouseEvent("click"))
            }
          >
            Explore Creator Studio
            <ArrowRight className="ml-1 h-3 w-3" />
          </Button>
        </div>
      </div>
    </div>
  );
}


/* ===== src/app/(authorisedRoute)/omni-reach/_components/widgets/LeadMagnetStudio.tsx ===== */

"use client";

import { useState } from "react";
import { Download, ArrowRight, Sparkles, FileText, Gift } from "lucide-react";
import Link from "next/link";
import { Input } from "@/components/ui";
import { Button } from "@/components/ui";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
  CardFooter,
} from "@/components/ui";
import { Textarea } from "@/components/ui";

export function LeadMagnetStudio(): JSX.Element {
  const [leadMagnetTitle, setLeadMagnetTitle] = useState("");

  return (
    <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
      <div className="space-y-6">
        <div className="bg-amber-50 dark:bg-amber-950/20 p-6 rounded-lg">
          <h2 className="text-2xl font-bold flex items-center gap-2 mb-4 text-amber-700 dark:text-amber-300">
            <Gift className="h-6 w-6" />
            Lead Magnet Studio
          </h2>
          <p className="text-muted-foreground mb-6">
            Create valuable downloadable resources that attract new clients and grow your email
            list. Our AI-powered tools help you design professional lead magnets that convert
            visitors into leads.
          </p>

          <div className="space-y-4">
            <div>
              <label className="text-sm font-medium mb-1 block">Lead Magnet Title</label>
              <Input
                placeholder="e.g., '10 Essential Wellness Practices for Busy Professionals'"
                value={leadMagnetTitle}
                onChange={(e) => setLeadMagnetTitle(e.target.value)}
                className="bg-white dark:bg-amber-950/40"
              />
            </div>

            <div>
              <label className="text-sm font-medium mb-1 block">Description</label>
              <Textarea
                placeholder="Briefly describe what your lead magnet will offer..."
                className="bg-white dark:bg-amber-950/40 min-h-[100px]"
              />
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="text-sm font-medium mb-1 block">Lead Magnet Type</label>
                <select className="w-full h-9 rounded-md border border-input bg-white dark:bg-amber-950/40 px-3 py-1 text-sm">
                  <option value="ebook">E-Book / PDF Guide</option>
                  <option value="checklist">Checklist</option>
                  <option value="worksheet">Worksheet</option>
                  <option value="template">Template</option>
                  <option value="minicourse">Mini-Course</option>
                </select>
              </div>
              <div>
                <label className="text-sm font-medium mb-1 block">Target Audience</label>
                <select className="w-full h-9 rounded-md border border-input bg-white dark:bg-amber-950/40 px-3 py-1 text-sm">
                  <option value="new">New Clients</option>
                  <option value="existing">Existing Clients</option>
                  <option value="specific">Specific Niche</option>
                  <option value="broad">General Audience</option>
                </select>
              </div>
            </div>

            <Button className="w-full bg-amber-600 text-white hover:bg-teal-100 hover:text-teal-800">
              <Sparkles className="h-4 w-4 mr-2" />
              Generate Lead Magnet
            </Button>
          </div>
        </div>

        <Card>
          <CardHeader className="pb-3">
            <CardTitle className="text-lg font-semibold">Key Features</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-2">
              <div className="flex items-center gap-2">
                <div className="h-2 w-2 rounded-full bg-amber-500"></div>
                <span className="text-sm">AI-powered content generation</span>
              </div>
              <div className="flex items-center gap-2">
                <div className="h-2 w-2 rounded-full bg-amber-500"></div>
                <span className="text-sm">Professional design templates</span>
              </div>
              <div className="flex items-center gap-2">
                <div className="h-2 w-2 rounded-full bg-amber-500"></div>
                <span className="text-sm">Automated email capture forms</span>
              </div>
              <div className="flex items-center gap-2">
                <div className="h-2 w-2 rounded-full bg-amber-500"></div>
                <span className="text-sm">Performance tracking and analytics</span>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      <div className="space-y-6">
        <Card className="border-amber-100 dark:border-amber-900/50 py-0">
          <CardHeader className="pt-6 pb-3 bg-amber-50 dark:bg-amber-950/20 rounded-t-lg">
            <CardTitle className="text-lg font-semibold">Lead Magnet Preview</CardTitle>
            <CardDescription>How your lead magnet might look</CardDescription>
          </CardHeader>
          <CardContent className="pt-6">
            <div className="border rounded-md p-4 bg-white dark:bg-amber-950/10">
              <div className="aspect-[3/4] flex flex-col border border-dashed border-amber-200 dark:border-amber-800 rounded-md overflow-hidden max-h-[400px]">
                <div className="bg-amber-100 dark:bg-amber-900/30 p-4 text-center">
                  <h3 className="font-medium text-lg">
                    {leadMagnetTitle || "10 Essential Wellness Practices for Busy Professionals"}
                  </h3>
                  <p className="text-xs text-muted-foreground mt-1">Your Practice Name</p>
                </div>
                <div className="flex-1 p-4 flex flex-col items-center justify-center text-center gap-2">
                  <FileText className="h-12 w-12 text-amber-400" />
                  <p className="text-sm text-muted-foreground">
                    Your professionally designed lead magnet content will appear here
                  </p>
                </div>
                <div className="bg-amber-50 dark:bg-amber-900/20 p-2 text-center">
                  <p className="text-xs text-muted-foreground">www.yourpractice.com</p>
                </div>
              </div>
            </div>
          </CardContent>
          <CardFooter className="flex justify-between border-t pt-4 pb-6">
            <Button variant="outline" size="sm" asChild>
              <Link href={{ pathname: "/marketing/lead-magnets/templates" }}>Browse Templates</Link>
            </Button>
            <Button
              variant="outline"
              size="sm"
              className="bg-amber-50 hover:bg-amber-100 dark:bg-amber-950/20 dark:hover:bg-amber-900/30"
              asChild
            >
              <Link href={{ pathname: "/marketing/lead-magnets" }}>
                View Lead Magnets
                <ArrowRight className="ml-2 h-4 w-4" />
              </Link>
            </Button>
          </CardFooter>
        </Card>

        <div className="bg-purple-50 dark:bg-purple-950/20 p-4 rounded-lg">
          <h3 className="font-medium flex items-center gap-2 text-purple-700 dark:text-purple-300">
            <Download className="h-4 w-4" />
            Try Our Membership & Loyalty
          </h3>
          <p className="text-sm text-muted-foreground mt-1">
            Ready to convert leads into loyal clients? Our Membership & Loyalty tools help you
            create compelling membership programs and loyalty incentives.
          </p>
          <Button
            variant="link"
            className="text-purple-600 dark:text-purple-400 p-0 h-auto mt-2"
            onClick={() =>
              document.querySelector('[value="membership"]')?.dispatchEvent(new MouseEvent("click"))
            }
          >
            Explore Membership & Loyalty
            <ArrowRight className="ml-1 h-3 w-3" />
          </Button>
        </div>
      </div>
    </div>
  );
}


/* ===== src/app/(authorisedRoute)/omni-reach/_components/widgets/MembershipLoyalty.tsx ===== */

"use client";

import { useState } from "react";
import { Users, ArrowRight, Sparkles, Award, Star, BadgePercent } from "lucide-react";
import Link from "next/link";
import { Input } from "@/components/ui";
import { Button } from "@/components/ui";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
  CardFooter,
} from "@/components/ui";

export function MembershipLoyalty(): JSX.Element {
  const [programName, setProgramName] = useState("");

  return (
    <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
      <div className="space-y-6">
        <div className="bg-indigo-50 dark:bg-indigo-950/20 p-6 rounded-lg">
          <h2 className="text-2xl font-bold flex items-center gap-2 mb-4 text-indigo-700 dark:text-indigo-300">
            <Users className="h-6 w-6" />
            Membership & Loyalty
          </h2>
          <p className="text-muted-foreground mb-6">
            Create compelling membership programs and loyalty incentives that keep clients coming
            back. Our tools help you design, launch, and manage membership tiers and rewards that
            increase retention.
          </p>

          <div className="space-y-4">
            <div>
              <label className="text-sm font-medium mb-1 block">Program Name</label>
              <Input
                placeholder="e.g., 'Wellness Circle' or 'Inner Balance Club'"
                value={programName}
                onChange={(e) => setProgramName(e.target.value)}
                className="bg-white dark:bg-indigo-950/40"
              />
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="text-sm font-medium mb-1 block">Program Type</label>
                <select className="w-full h-9 rounded-md border border-input bg-white dark:bg-indigo-950/40 px-3 py-1 text-sm">
                  <option value="tiered">Tiered Membership</option>
                  <option value="subscription">Subscription</option>
                  <option value="points">Points-Based Loyalty</option>
                  <option value="visits">Visit-Based Rewards</option>
                </select>
              </div>
              <div>
                <label className="text-sm font-medium mb-1 block">Billing Cycle</label>
                <select className="w-full h-9 rounded-md border border-input bg-white dark:bg-indigo-950/40 px-3 py-1 text-sm">
                  <option value="monthly">Monthly</option>
                  <option value="quarterly">Quarterly</option>
                  <option value="annual">Annual</option>
                  <option value="lifetime">Lifetime</option>
                </select>
              </div>
            </div>

            <div>
              <label className="text-sm font-medium mb-1 block">Base Price</label>
              <div className="relative">
                <span className="absolute left-3 top-1/2 -translate-y-1/2 text-muted-foreground">
                  $
                </span>
                <Input
                  type="number"
                  placeholder="99.99"
                  className="bg-white dark:bg-indigo-950/40 pl-7"
                />
              </div>
            </div>

            <Button className="w-full bg-indigo-600 hover:bg-indigo-700 text-white">
              <Sparkles className="h-4 w-4 mr-2" />
              Create Membership Program
            </Button>
          </div>
        </div>

        <Card>
          <CardHeader className="pb-3">
            <CardTitle className="text-lg font-semibold">Key Features</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-2">
              <div className="flex items-center gap-2">
                <div className="h-2 w-2 rounded-full bg-indigo-500"></div>
                <span className="text-sm">Customizable membership tiers and benefits</span>
              </div>
              <div className="flex items-center gap-2">
                <div className="h-2 w-2 rounded-full bg-indigo-500"></div>
                <span className="text-sm">Automated billing and subscription management</span>
              </div>
              <div className="flex items-center gap-2">
                <div className="h-2 w-2 rounded-full bg-indigo-500"></div>
                <span className="text-sm">Member-only content and exclusive offers</span>
              </div>
              <div className="flex items-center gap-2">
                <div className="h-2 w-2 rounded-full bg-indigo-500"></div>
                <span className="text-sm">Loyalty points tracking and redemption</span>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      <div className="space-y-6">
        <Card className="border-indigo-100 dark:border-indigo-900/50">
          <CardHeader className="pb-3 bg-indigo-50 dark:bg-indigo-950/20 rounded-t-lg">
            <CardTitle className="text-lg font-semibold">Membership Tiers</CardTitle>
            <CardDescription>Sample membership structure</CardDescription>
          </CardHeader>
          <CardContent className="pt-6">
            <div className="space-y-4">
              <div className="border rounded-md p-4 bg-white dark:bg-indigo-950/10">
                <div className="flex items-center justify-between mb-2">
                  <div className="flex items-center gap-2">
                    <Award className="h-5 w-5 text-amber-400" />
                    <h3 className="font-medium">Gold Tier</h3>
                  </div>
                  <span className="text-sm font-medium">$149/mo</span>
                </div>
                <ul className="text-sm space-y-1 text-muted-foreground">
                  <li className="flex items-center gap-1.5">
                    <Star className="h-3 w-3 text-indigo-400" />
                    <span>Unlimited sessions</span>
                  </li>
                  <li className="flex items-center gap-1.5">
                    <Star className="h-3 w-3 text-indigo-400" />
                    <span>Priority booking</span>
                  </li>
                  <li className="flex items-center gap-1.5">
                    <Star className="h-3 w-3 text-indigo-400" />
                    <span>Exclusive content</span>
                  </li>
                </ul>
              </div>

              <div className="border rounded-md p-4 bg-white dark:bg-indigo-950/10">
                <div className="flex items-center justify-between mb-2">
                  <div className="flex items-center gap-2">
                    <Award className="h-5 w-5 text-slate-400" />
                    <h3 className="font-medium">Silver Tier</h3>
                  </div>
                  <span className="text-sm font-medium">$99/mo</span>
                </div>
                <ul className="text-sm space-y-1 text-muted-foreground">
                  <li className="flex items-center gap-1.5">
                    <Star className="h-3 w-3 text-indigo-400" />
                    <span>8 sessions per month</span>
                  </li>
                  <li className="flex items-center gap-1.5">
                    <Star className="h-3 w-3 text-indigo-400" />
                    <span>Member resources</span>
                  </li>
                  <li className="flex items-center gap-1.5">
                    <Star className="h-3 w-3 text-indigo-400" />
                    <span>10% off products</span>
                  </li>
                </ul>
              </div>

              <div className="border rounded-md p-4 bg-white dark:bg-indigo-950/10">
                <div className="flex items-center justify-between mb-2">
                  <div className="flex items-center gap-2">
                    <Award className="h-5 w-5 text-amber-700" />
                    <h3 className="font-medium">Bronze Tier</h3>
                  </div>
                  <span className="text-sm font-medium">$49/mo</span>
                </div>
                <ul className="text-sm space-y-1 text-muted-foreground">
                  <li className="flex items-center gap-1.5">
                    <Star className="h-3 w-3 text-indigo-400" />
                    <span>4 sessions per month</span>
                  </li>
                  <li className="flex items-center gap-1.5">
                    <Star className="h-3 w-3 text-indigo-400" />
                    <span>Basic resources</span>
                  </li>
                  <li className="flex items-center gap-1.5">
                    <Star className="h-3 w-3 text-indigo-400" />
                    <span>5% off products</span>
                  </li>
                </ul>
              </div>
            </div>
          </CardContent>
          <CardFooter className="flex justify-between border-t pt-4">
            <Button variant="outline" size="sm" asChild>
              <Link href={{ pathname: "/marketing/membership/templates" }}>Browse Templates</Link>
            </Button>
            <Button
              variant="outline"
              size="sm"
              className="bg-indigo-50 hover:bg-indigo-100 dark:bg-indigo-950/20 dark:hover:bg-indigo-900/30"
              asChild
            >
              <Link href={{ pathname: "/marketing/membership" }}>
                Manage Programs
                <ArrowRight className="ml-2 h-4 w-4" />
              </Link>
            </Button>
          </CardFooter>
        </Card>

        <div className="bg-green-50 dark:bg-green-950/20 p-4 rounded-lg">
          <h3 className="font-medium flex items-center gap-2 text-green-700 dark:text-green-300">
            <BadgePercent className="h-4 w-4" />
            Try Our Quiz Creator
          </h3>
          <p className="text-sm text-muted-foreground mt-1">
            Want to engage potential members? Create interactive quizzes that help clients discover
            which membership tier is right for them.
          </p>
          <Button
            variant="link"
            className="text-green-600 dark:text-green-400 p-0 h-auto mt-2"
            onClick={() =>
              document.querySelector('[value="quiz"]')?.dispatchEvent(new MouseEvent("click"))
            }
          >
            Explore Quiz Creator
            <ArrowRight className="ml-1 h-3 w-3" />
          </Button>
        </div>
      </div>
    </div>
  );
}


/* ===== src/app/(authorisedRoute)/omni-reach/_components/widgets/QuizCreator.tsx ===== */

"use client";

import { useState } from "react";
import { HelpCircle, ArrowRight, Plus, Trash2, CheckCircle2, CircleOff } from "lucide-react";
import Link from "next/link";
import { Input } from "@/components/ui";
import { Textarea } from "@/components/ui";
import { Button } from "@/components/ui";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui";
interface Question {
  question: string;
  options: string[];
  correctAnswer: number;
}

export function QuizCreator(): JSX.Element {
  const [quizTitle, setQuizTitle] = useState("");
  const [questions, setQuestions] = useState<Question[]>([
    { question: "", options: ["", "", ""], correctAnswer: 0 },
  ]);

  const addQuestion = (): void => {
    setQuestions([...questions, { question: "", options: ["", "", ""], correctAnswer: 0 }]);
  };

  const removeQuestion = (index: number): void => {
    const newQuestions = [...questions];
    newQuestions.splice(index, 1);
    setQuestions(
      newQuestions.length
        ? newQuestions
        : [{ question: "", options: ["", "", ""], correctAnswer: 0 }],
    );
  };

  const updateQuestion = (qIndex: number, text: string): void => {
    const newQuestions = [...questions];
    if (newQuestions[qIndex]?.question !== undefined) {
      newQuestions[qIndex].question = text;
      setQuestions(newQuestions);
    }
  };

  const updateOption = (qIndex: number, oIndex: number, text: string): void => {
    const newQuestions = [...questions];
    if (newQuestions[qIndex]?.options?.[oIndex] !== undefined) {
      newQuestions[qIndex].options[oIndex] = text;
      setQuestions(newQuestions);
    }
  };

  const setCorrectAnswer = (qIndex: number, oIndex: number): void => {
    const newQuestions = [...questions];
    if (newQuestions[qIndex]) {
      newQuestions[qIndex].correctAnswer = oIndex;
      setQuestions(newQuestions);
    }
  };

  const addOption = (qIndex: number): void => {
    const newQuestions = [...questions];
    if (newQuestions[qIndex]?.options) {
      newQuestions[qIndex].options.push("");
      setQuestions(newQuestions);
    }
  };

  const removeOption = (questionIndex: number, optionIndex: number): void => {
    const newQuestions = [...questions];
    if (newQuestions[questionIndex]?.options && newQuestions[questionIndex].options.length > 2) {
      // Add check for undefined
      newQuestions[questionIndex].options.splice(optionIndex, 1);
      if (newQuestions[questionIndex].correctAnswer === optionIndex) {
        newQuestions[questionIndex].correctAnswer = 0;
      } else if (newQuestions[questionIndex].correctAnswer > optionIndex) {
        newQuestions[questionIndex].correctAnswer--;
      }
      setQuestions(newQuestions);
    }
  };

  return (
    <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
      <div className="space-y-6">
        <div className="bg-green-50 dark:bg-green-950/20 p-6 rounded-lg">
          <h2 className="text-2xl font-bold flex items-center gap-2 mb-4 text-green-700 dark:text-green-300">
            <HelpCircle className="h-6 w-6" />
            Quiz Creator
          </h2>
          <p className="text-muted-foreground mb-6">
            Create engaging quizzes to qualify leads, segment your audience, or educate clients
            about your services. Interactive quizzes boost engagement and provide valuable insights
            about your audience.
          </p>

          <div className="space-y-4">
            <div>
              <label className="text-sm font-medium mb-1 block">Quiz Title</label>
              <Input
                placeholder="e.g., 'What's Your Wellness Type?' or 'Test Your Knowledge'"
                value={quizTitle}
                onChange={(e) => setQuizTitle(e.target.value)}
                className="bg-white dark:bg-green-950/40"
              />
            </div>

            {questions.map((question, qIndex) => (
              <Card key={qIndex} className="border-green-100 dark:border-green-900/50">
                <CardHeader className="pb-3 bg-green-50 dark:bg-green-950/20 rounded-t-lg flex flex-row items-center justify-between">
                  <div>
                    <CardTitle className="text-sm font-medium">Question {qIndex + 1}</CardTitle>
                  </div>
                  {questions.length > 1 && (
                    <Button
                      variant="ghost"
                      size="icon"
                      className="h-8 w-8 text-red-500 hover:text-red-700 hover:bg-red-50"
                      onClick={() => removeQuestion(qIndex)}
                    >
                      <Trash2 className="h-4 w-4" />
                    </Button>
                  )}
                </CardHeader>
                <CardContent className="space-y-3 pt-4">
                  <Textarea
                    placeholder="Enter your question here"
                    value={question.question}
                    onChange={(e) => updateQuestion(qIndex, e.target.value)}
                    className="bg-white dark:bg-green-950/10"
                  />

                  <div className="space-y-2">
                    <div className="text-sm font-medium">Answer Options</div>
                    {question.options.map((option, oIndex) => (
                      <div key={oIndex} className="flex items-center gap-2">
                        <Button
                          variant="ghost"
                          size="icon"
                          className={`h-6 w-6 ${
                            question.correctAnswer === oIndex
                              ? "text-green-600"
                              : "text-muted-foreground"
                          }`}
                          onClick={() => setCorrectAnswer(qIndex, oIndex)}
                        >
                          {question.correctAnswer === oIndex ? (
                            <CheckCircle2 className="h-4 w-4" />
                          ) : (
                            <CircleOff className="h-4 w-4" />
                          )}
                        </Button>
                        <Input
                          placeholder={`Option ${oIndex + 1}`}
                          value={option}
                          onChange={(e) => updateOption(qIndex, oIndex, e.target.value)}
                          className="bg-white dark:bg-green-950/10"
                        />
                        {question.options.length > 2 && (
                          <Button
                            variant="ghost"
                            size="icon"
                            className="h-8 w-8 text-red-500 hover:text-red-700 hover:bg-red-50"
                            onClick={() => removeOption(qIndex, oIndex)}
                          >
                            <Trash2 className="h-4 w-4" />
                          </Button>
                        )}
                      </div>
                    ))}
                    {question.options.length < 5 && (
                      <Button
                        variant="outline"
                        size="sm"
                        className="mt-2 text-xs"
                        onClick={() => addOption(qIndex)}
                      >
                        <Plus className="h-3 w-3 mr-1" />
                        Add Option
                      </Button>
                    )}
                  </div>
                </CardContent>
              </Card>
            ))}

            <Button
              variant="outline"
              className="w-full border-dashed border-green-200 dark:border-green-800 hover:bg-green-50 dark:hover:bg-green-950/30"
              onClick={addQuestion}
            >
              <Plus className="h-4 w-4 mr-2" />
              Add Question
            </Button>

            <Button className="w-full bg-green-600 hover:bg-green-700 text-white">
              Create Quiz
            </Button>
          </div>
        </div>
      </div>

      <div className="space-y-6">
        <Card className="border-green-100 dark:border-green-900/50">
          <CardHeader className="pb-3 bg-green-50 dark:bg-green-950/20 rounded-t-lg">
            <CardTitle className="text-lg font-semibold">Quiz Preview</CardTitle>
            <CardDescription>How your quiz will appear to clients</CardDescription>
          </CardHeader>
          <CardContent className="pt-6">
            <div className="space-y-6">
              <div className="text-center">
                <h3 className="text-xl font-bold mb-2">{quizTitle || "Your Quiz Title"}</h3>
                <p className="text-sm text-muted-foreground">
                  Discover more about yourself with our interactive quiz
                </p>
              </div>

              {questions[0]?.question ? (
                <div className="border rounded-md p-4 bg-white dark:bg-green-950/10">
                  <h4 className="font-medium mb-3">{questions[0]?.question}</h4>
                  <div className="space-y-2">
                    {questions[0]?.options.map((option, index) => (
                      <div
                        key={index}
                        className={`p-3 rounded-md border cursor-pointer hover:bg-green-50 dark:hover:bg-green-900/20 ${
                          index === 0
                            ? "bg-green-50 dark:bg-green-900/20 border-green-200 dark:border-green-800"
                            : ""
                        }`}
                      >
                        {option || `Option ${index + 1}`}
                      </div>
                    ))}
                  </div>
                  <div className="flex justify-between mt-4">
                    <Button variant="outline" size="sm" disabled>
                      Previous
                    </Button>
                    <Button size="sm" className="bg-green-600 hover:bg-green-700">
                      Next
                    </Button>
                  </div>
                </div>
              ) : (
                <div className="border rounded-md p-4 bg-white dark:bg-green-950/10 text-center text-muted-foreground">
                  <p>Add questions to see a preview</p>
                </div>
              )}

              <div className="text-sm text-muted-foreground">
                <p>Quiz results can be used to:</p>
                <ul className="list-disc pl-5 mt-2 space-y-1">
                  <li>Recommend specific services</li>
                  <li>Segment your email list</li>
                  <li>Personalize follow-up communications</li>
                  <li>Gather valuable audience insights</li>
                </ul>
              </div>
            </div>
          </CardContent>
          <CardFooter className="flex justify-between border-t pt-4">
            <Button variant="outline" size="sm" asChild>
              <Link href={{ pathname: "/marketing/quiz/templates" }}>Browse Templates</Link>
            </Button>
            <Button
              variant="outline"
              size="sm"
              className="bg-green-50 hover:bg-green-100 dark:bg-green-950/20 dark:hover:bg-green-900/30"
              asChild
            >
              <Link href={{ pathname: "/marketing/quiz" }}>
                Manage Quizzes
                <ArrowRight className="ml-2 h-4 w-4" />
              </Link>
            </Button>
          </CardFooter>
        </Card>

        <div className="bg-indigo-50 dark:bg-indigo-950/20 p-4 rounded-lg">
          <h3 className="font-medium flex items-center gap-2 text-indigo-700 dark:text-indigo-300">
            <HelpCircle className="h-4 w-4" />
            Try Our Membership Tools
          </h3>
          <p className="text-sm text-muted-foreground mt-1">
            Use quiz results to recommend the perfect membership tier for each client. Our
            membership tools help you create compelling programs that convert quiz takers into loyal
            members.
          </p>
          <Button
            variant="link"
            className="text-indigo-600 dark:text-indigo-400 p-0 h-auto mt-2"
            onClick={() =>
              document.querySelector('[value="membership"]')?.dispatchEvent(new MouseEvent("click"))
            }
          >
            Explore Membership & Loyalty
            <ArrowRight className="ml-1 h-3 w-3" />
          </Button>
        </div>
      </div>
    </div>
  );
}


/* ===== src/app/(authorisedRoute)/omni-reach/error.tsx ===== */

"use client";

import { useEffect } from "react";
import { Button } from "@/components/ui";
import { AlertTriangle } from "lucide-react";
import { logger } from "@/lib/observability";

export default function Error({
  error,
  reset,
}: {
  error: Error & { digest?: string };
  reset: () => void;
}): JSX.Element {
  useEffect(() => {
    void logger.error(
      "Route error occurred",
      {
        operation: "omni_reach_error_boundary",
        additionalData: {
          digest: error.digest,
          errorName: error.name,
          errorMessage: error.message,
        },
      },
      error,
    );
  }, [error]);

  return (
    <div className="flex min-h-[400px] flex-col items-center justify-center space-y-4 p-6">
      <div className="flex items-center space-x-2 text-destructive">
        <AlertTriangle className="h-6 w-6" />
        <h2 className="text-lg font-semibold">Something went wrong!</h2>
      </div>
      <p className="text-sm text-muted-foreground text-center max-w-md">
        An error occurred while loading this page. Please try again or contact support if the
        problem persists.
      </p>
      <Button onClick={reset} variant="outline">
        Try again
      </Button>
    </div>
  );
}


/* ===== src/app/(authorisedRoute)/omni-reach/loading.tsx ===== */

import { Skeleton } from "@/components/ui";

export default function Loading(): JSX.Element {
  return (
    <div className="space-y-4 p-6">
      <div className="space-y-2">
        <Skeleton className="h-8 w-1/3" />
        <Skeleton className="h-4 w-1/2" />
      </div>
      <div className="grid gap-4">
        <Skeleton className="h-32 w-full" />
        <Skeleton className="h-32 w-full" />
        <Skeleton className="h-32 w-full" />
      </div>
    </div>
  );
}


/* ===== src/app/(authorisedRoute)/omni-reach/not-found.tsx ===== */

"use client";

import { Megaphone, Home, ArrowLeft, Plus } from "lucide-react";
import { Button } from "@/components/ui/button";
import Link from "next/link";

export default function MarketingNotFound(): JSX.Element {
  return (
    <div className="flex min-h-[500px] flex-col items-center justify-center space-y-6 p-6">
      <div className="flex flex-col items-center space-y-4 text-center">
        <div className="flex items-center justify-center w-16 h-16 bg-muted rounded-full">
          <Megaphone className="h-8 w-8 text-muted-foreground" />
        </div>

        <div className="space-y-2">
          <h2 className="text-2xl font-semibold">Marketing Not Found</h2>
          <p className="text-muted-foreground max-w-md">
            The marketing page or resource you&apos;re looking for doesn&apos;t exist, may have been
            deleted, or you don&apos;t have permission to access it.
          </p>
        </div>
      </div>

      <div className="flex flex-col sm:flex-row gap-3">
        <Button asChild variant="default" className="min-w-[140px]">
          <Link href="/marketing">
            <Megaphone className="h-4 w-4 mr-2" />
            View Marketing
          </Link>
        </Button>

        <Button asChild variant="outline" className="min-w-[140px]">
          <Link href="/omni-flow">
            <Home className="h-4 w-4 mr-2" />
            Back to Dashboard
          </Link>
        </Button>
      </div>

      <div className="flex flex-col sm:flex-row gap-3">
        <Button
          variant="ghost"
          size="sm"
          onClick={() => window.history.back()}
          className="text-muted-foreground"
        >
          <ArrowLeft className="h-4 w-4 mr-2" />
          Go Back
        </Button>

        <Button asChild variant="ghost" size="sm" className="text-muted-foreground">
          <Link href="/omni-flow">
            <Plus className="h-4 w-4 mr-2" />
            Back to Dashboard
          </Link>
        </Button>
      </div>
    </div>
  );
}


/* ===== src/app/(authorisedRoute)/omni-reach/page.tsx ===== */

export const metadata = {
  title: "Marketing | CodexCRM",
  description: "Create and manage marketing campaigns, content, and lead generation.",
  keywords: ["marketing", "campaigns", "lead generation", "content"],
};

import { Sparkles } from "lucide-react";
import { MarketingWidgets } from "./_components/MarketingWidgets";

/**
 * Marketing Hub section showcasing marketing tools for wellness practitioners.
 *
 * This Server Component displays a collection of marketing widgets that help
 * practitioners grow their business and connect with clients.
 */
export default function MarketingPage(): JSX.Element {
  return (
    <div className="flex flex-col h-full">
      <main className="flex-1 overflow-y-auto p-4 md:p-6">
        <div className="mb-6 text-center">
          <h1 className="flex items-center justify-center gap-2 text-2xl md:text-3xl font-bold text-primary">
            <Sparkles className="h-6 w-6" />
            <span>Marketing Hub</span>
          </h1>
          <p className="text-muted-foreground mt-2 max-w-2xl mx-auto">
            Tools to help you share your authentic gifts with the world, nurture your community, and
            grow your practice with intention and heart.
          </p>
        </div>

        <MarketingWidgets />
      </main>
    </div>
  );
}


/* ===== src/app/(authorisedRoute)/omni-rhythm/_components/BusinessMetrics.tsx ===== */

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { CheckCircle, TrendingUp, TrendingDown, Users, DollarSign } from "lucide-react";
import { BusinessMetricsProps } from "./types";

export function BusinessMetrics({
  totalSessions,
  totalRevenue,
  newClients,
  busiestDay,
  utilizationRate,
  clientRetention,
}: BusinessMetricsProps): JSX.Element {
  const isHighPerforming = totalSessions > 20;
  const hasGoodUtilization = utilizationRate > 60;
  const hasStrongRetention = clientRetention > 80;

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <CheckCircle className="h-5 w-5" />
          This Week
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        {/* Key Metrics */}
        <div className="grid grid-cols-2 gap-4">
          <div className="space-y-1">
            <div className="flex items-center gap-2">
              <Users className="h-4 w-4 text-blue-600" />
              <span className="text-sm text-muted-foreground">Sessions</span>
            </div>
            <div className="text-2xl font-bold">{totalSessions}</div>
            {isHighPerforming && (
              <Badge variant="secondary" className="text-xs bg-green-100 text-green-800">
                High Performance
              </Badge>
            )}
          </div>

          <div className="space-y-1">
            <div className="flex items-center gap-2">
              <DollarSign className="h-4 w-4 text-green-600" />
              <span className="text-sm text-muted-foreground">Revenue</span>
            </div>
            <div className="text-2xl font-bold">${totalRevenue}</div>
            <Badge variant="secondary" className="text-xs">
              {totalRevenue > 1000 ? "Strong" : "Growing"}
            </Badge>
          </div>
        </div>

        {/* Additional Insights */}
        <div className="space-y-3 pt-4 border-t">
          <div className="flex justify-between text-sm">
            <span className="text-muted-foreground">New Clients</span>
            <Badge variant="secondary">{newClients}</Badge>
          </div>

          <div className="flex justify-between text-sm">
            <span className="text-muted-foreground">Busiest Day</span>
            <Badge variant="outline">{busiestDay}</Badge>
          </div>

          <div className="flex justify-between text-sm">
            <span className="text-muted-foreground">Utilization</span>
            <div className="flex items-center gap-1">
              {hasGoodUtilization ? (
                <TrendingUp className="h-3 w-3 text-green-600" />
              ) : (
                <TrendingDown className="h-3 w-3 text-orange-600" />
              )}
              <span>{utilizationRate}%</span>
            </div>
          </div>

          <div className="flex justify-between text-sm">
            <span className="text-muted-foreground">Retention</span>
            <div className="flex items-center gap-1">
              {hasStrongRetention ? (
                <CheckCircle className="h-3 w-3 text-green-600" />
              ) : (
                <TrendingUp className="h-3 w-3 text-blue-600" />
              )}
              <span>{clientRetention}%</span>
            </div>
          </div>
        </div>
      </CardContent>
    </Card>
  );
}


/* ===== src/app/(authorisedRoute)/omni-rhythm/_components/CalendarBusinessIntelligence.ts ===== */

/**
 * Client-side Calendar Business Intelligence Service
 *
 * Provides business intelligence functionality for the OmniRhythm calendar system.
 * This is a lightweight client-side version that works with the useOmniRhythmData hook.
 */

import { Client } from "./types";

export class CalendarBusinessIntelligence {
  private clients: Client[] = [];

  /**
   * Update the client data used for business intelligence calculations
   */
  public updateClientData(clients: Client[]): void {
    this.clients = clients;
  }

  /**
   * Get all clients
   */
  public getClients(): Client[] {
    return this.clients;
  }

  /**
   * Get high-value clients (those with high spending or satisfaction)
   */
  public getHighValueClients(): Client[] {
    return this.clients.filter((client) => client.totalSpent > 1000 || client.satisfaction >= 4);
  }

  /**
   * Get clients that need attention (low satisfaction or inactive)
   */
  public getClientsNeedingAttention(): Client[] {
    return this.clients.filter((client) => client.satisfaction < 3 || client.status === "inactive");
  }

  /**
   * Calculate total revenue from all clients
   */
  public getTotalRevenue(): number {
    return this.clients.reduce((total, client) => total + client.totalSpent, 0);
  }

  /**
   * Get average client satisfaction
   */
  public getAverageSatisfaction(): number {
    if (this.clients.length === 0) return 0;

    const totalSatisfaction = this.clients.reduce(
      (total, client) => total + client.satisfaction,
      0,
    );

    return Math.round((totalSatisfaction / this.clients.length) * 10) / 10;
  }

  /**
   * Get client retention rate (active clients vs total)
   */
  public getRetentionRate(): number {
    if (this.clients.length === 0) return 0;

    const activeClients = this.clients.filter((client) => client.status === "active").length;
    return Math.round((activeClients / this.clients.length) * 100);
  }
}


/* ===== src/app/(authorisedRoute)/omni-rhythm/_components/CalendarConnectionCard.tsx ===== */

"use client";

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Separator } from "@/components/ui/separator";
import { RefreshCw, Link, CheckCircle, AlertCircle } from "lucide-react";
import { format } from "date-fns";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { CalendarConnectionCardProps } from "./types";

export function CalendarConnectionCard({
  isConnected,
  isConnecting,
  isSyncing,
  importedEventsCount,
  lastSync,
  error,
  onConnect,
  onSync,
  sessionsNext7Days = 0,
  sessionsThisMonth = 0,
}: CalendarConnectionCardProps): JSX.Element {
  if (!isConnected) {
    return (
      <Card>
        <CardHeader className="text-center">
          <CardTitle>Connect Your Google Calendar</CardTitle>
        </CardHeader>
        <CardContent className="text-center">
          <Button onClick={onConnect} disabled={isConnecting} size="lg">
            <Link className="h-4 w-4 mr-2" />
            {isConnecting ? "Connecting..." : "Connect Google Calendar"}
          </Button>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card className="h-full flex flex-col">
      <CardHeader className="pb-1">
        <div className="flex items-center justify-between">
          <CardTitle className="text-sm font-medium flex items-center gap-2 text-green-600">
            <CheckCircle className="h-4 w-4" />
            Google Calendar Connected
          </CardTitle>
          <Badge
            variant="outline"
            className="cursor-pointer hover:bg-accent transition-colors px-2 py-1"
            onClick={onSync}
          >
            <RefreshCw className={`h-3 w-3 mr-1 ${isSyncing ? "animate-spin" : ""}`} />
            {isSyncing ? "Syncing..." : "Sync Now"}
          </Badge>
        </div>
      </CardHeader>
      <CardContent className="flex-1">
        {/* Connected Status and Last Sync */}
        <div className="space-y-2">
          <div className="flex items-center justify-between">
            <span className="text-sm text-muted-foreground">Last Sync</span>
            <Badge variant="outline" className="text-xs">
              {lastSync ? format(new Date(lastSync), "MMM d, yyyy HH:mm") : "—"}
            </Badge>
          </div>
        </div>

        <Separator className="my-3" />

        {/* Metrics Section */}
        <div className="space-y-2">
          {/* Total Events Imported */}
          <div className="flex items-center justify-between">
            <span className="text-sm text-muted-foreground">Total Events Imported</span>
            <Badge variant="outline" className="text-xs">
              {typeof importedEventsCount === "number" ? importedEventsCount : 0}
            </Badge>
          </div>

          {/* Sessions in Next 7 Days */}
          <div className="flex items-center justify-between">
            <span className="text-sm text-muted-foreground">Sessions in Next 7 Days</span>
            <Badge variant="outline" className="text-xs">
              {sessionsNext7Days}
            </Badge>
          </div>

          {/* Sessions This Month */}
          <div className="flex items-center justify-between">
            <span className="text-sm text-muted-foreground">Sessions This Month</span>
            <Badge variant="outline" className="text-xs">
              {sessionsThisMonth}
            </Badge>
          </div>
        </div>

        {/* Error Alert */}
        {error && (
          <Alert className="mt-4" variant="destructive">
            <AlertCircle className="h-4 w-4" />
            <AlertDescription>
              {error.includes("authentication expired") || error.includes("invalid_grant")
                ? "Authentication error. Please reconnect your calendar."
                : error.includes("token_expired")
                  ? "Calendar token expired. Please reconnect your calendar."
                  : error}
            </AlertDescription>
          </Alert>
        )}
      </CardContent>
    </Card>
  );
}


/* ===== src/app/(authorisedRoute)/omni-rhythm/_components/CalendarSidebar.tsx ===== */

"use client";

import { usePathname } from "next/navigation";
import Link from "next/link";
// Import type definitions for strict type safety
import { SelfCareModal } from "./SelfCareModal";
import { SessionModal } from "./SessionModal";
import { Calendar, CalendarDays, Clock } from "lucide-react";
import {
  SidebarContent,
  SidebarGroup,
  SidebarGroupLabel,
  SidebarMenu,
  SidebarMenuButton,
  SidebarMenuItem,
} from "@/components/ui/sidebar";
import { CalendarEventCreateData, getErrorMessage, getHtmlLink, safeParseApiData } from "./types";

export function CalendarSidebar(): JSX.Element {
  const pathname = usePathname();

  const handleCreateEvent = async (eventData: CalendarEventCreateData): Promise<void> => {
    try {
      const response = await fetch("/api/calendar/create", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(eventData),
      });

      const result: unknown = await response.json();

      if (!response.ok) {
        const errorMessage = getErrorMessage(result);
        throw new Error(errorMessage || "Failed to create event");
      }

      const parsedData = safeParseApiData(result);
      const htmlLink = getHtmlLink(parsedData.data);
      alert(`Event created successfully! View in Google Calendar: ${htmlLink}`);
    } catch (error) {
      console.error("Failed to create event:", error);
      const errorMessage =
        error instanceof Error ? error.message : "Failed to create event. Please try again.";
      alert(errorMessage);
    }
  };

  return (
    <SidebarContent>
      {/* Calendar Navigation */}
      <SidebarGroup>
        <SidebarGroupLabel>Smart Scheduling</SidebarGroupLabel>
        <SidebarMenu>
          <SidebarMenuItem>
            <SidebarMenuButton asChild isActive={pathname === "/omni-rhythm"}>
              <Link href="/omni-rhythm" className="flex items-center w-full">
                <Calendar className="w-4 h-4 mr-3" />
                <span>Insights</span>
              </Link>
            </SidebarMenuButton>
          </SidebarMenuItem>
          <SidebarMenuItem>
            <SidebarMenuButton asChild>
              <Link href="/omni-rhythm/availability" className="flex items-center w-full">
                <CalendarDays className="w-4 h-4 mr-3" />
                <span>Availability</span>
              </Link>
            </SidebarMenuButton>
          </SidebarMenuItem>
          <SidebarMenuItem>
            <SidebarMenuButton asChild>
              <Link href="/omni-rhythm/prep" className="flex items-center w-full">
                <Clock className="w-4 h-4 mr-3" />
                <span>Prep</span>
              </Link>
            </SidebarMenuButton>
          </SidebarMenuItem>
        </SidebarMenu>
      </SidebarGroup>

      {/* Quick Actions */}
      <SidebarGroup>
        <SidebarGroupLabel>Quick Actions</SidebarGroupLabel>
        <SidebarMenu>
          <SidebarMenuItem>
            <SidebarMenuButton asChild>
              <SelfCareModal onCreateEvent={handleCreateEvent} />
            </SidebarMenuButton>
          </SidebarMenuItem>
          <SidebarMenuItem>
            <SidebarMenuButton asChild>
              <SessionModal onCreateEvent={handleCreateEvent} />
            </SidebarMenuButton>
          </SidebarMenuItem>
        </SidebarMenu>
      </SidebarGroup>
    </SidebarContent>
  );
}


/* ===== src/app/(authorisedRoute)/omni-rhythm/_components/CalendarSyncSetup.tsx ===== */

"use client";

import { useEffect, useState } from "react";
import { useRouter } from "next/navigation";
import {
  Card,
  CardHeader,
  CardTitle,
  CardDescription,
  CardContent,
  CardFooter,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Checkbox } from "@/components/ui/checkbox";
import { Progress } from "@/components/ui/progress";
import { Label } from "@/components/ui/label";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { toast } from "sonner";
import { Calendar, CheckCircle, Download, Settings } from "lucide-react";
import { apiClient } from "@/lib/api/client";
import { CalendarItem } from "./types";

export function CalendarSyncSetup(): JSX.Element {
  const router = useRouter();
  const [calendars, setCalendars] = useState<CalendarItem[]>([]);
  const [loading, setLoading] = useState(true);
  const [mode, setMode] = useState<"all" | "custom">("all");
  const [selected, setSelected] = useState<Record<string, boolean>>({});
  const [isImporting, setIsImporting] = useState(false);
  const [progress, setProgress] = useState(0);
  const [result, setResult] = useState<{ syncedEvents: number } | null>(null);
  const [daysPast, setDaysPast] = useState(365);
  const [daysFuture, setDaysFuture] = useState(90);
  const [autoSync, setAutoSync] = useState(false);

  useEffect(() => {
    const run = async (): Promise<void> => {
      try {
        const resp = await apiClient.get<{ calendars: CalendarItem[] }>(
          "/api/google/calendar/list",
        );
        const items = resp.calendars ?? [];
        setCalendars(items);
        // Pre-select primary calendar in custom mode by default
        const defaults: Record<string, boolean> = {};
        for (const c of items) {
          if (c.primary) defaults[c.id] = true;
        }
        setSelected(defaults);
      } catch (err) {
        toast.error("Failed to load calendars", {
          description: err instanceof Error ? err.message : "Unknown error",
        });
      } finally {
        setLoading(false);
      }
    };
    void run();
  }, []);

  // Remove automatic syncing - user must manually trigger import

  const startImport = async (): Promise<void> => {
    setIsImporting(true);
    setProgress(0);
    setResult(null);

    try {
      // Show indeterminate progress since we don't have real-time updates
      setProgress(-1); // Use -1 to indicate indeterminate progress

      const calendarIds =
        mode === "all" ? undefined : Object.keys(selected).filter((id) => selected[id]);
      const resp = await apiClient.post<{ message: string; syncedEvents: number }>(
        "/api/google/calendar/import",
        {
          calendarIds,
          daysPast,
          daysFuture,
        },
      );

      // Only show 100% when actually complete
      setProgress(100);
      setResult({ syncedEvents: resp.syncedEvents });
      toast.success("Calendar import complete", {
        description: `${resp.syncedEvents} events imported`,
      });
      // Clean up URL and go to Rhythm home after short delay
      setTimeout(() => {
        router.replace("/omni-rhythm");
      }, 1500);
    } catch (err) {
      toast.error("Calendar import failed", {
        description: err instanceof Error ? err.message : "Unknown error",
      });
      setProgress(0);
    } finally {
      setIsImporting(false);
    }
  };

  if (loading) {
    return (
      <div className="container mx-auto max-w-2xl p-6">
        <Card>
          <CardHeader>
            <CardTitle>Preparing Calendar Import…</CardTitle>
            <CardDescription>Fetching your calendar list</CardDescription>
          </CardHeader>
          <CardContent>
            <Progress value={35} />
          </CardContent>
        </Card>
      </div>
    );
  }

  if (result) {
    return (
      <div className="container mx-auto max-w-2xl p-6">
        <Card className="border-green-200 bg-green-50">
          <CardHeader className="text-center">
            <div className="flex justify-center mb-4">
              <CheckCircle className="h-12 w-12 text-green-600" />
            </div>
            <CardTitle className="text-green-800">Import Complete</CardTitle>
            <CardDescription className="text-green-700">
              Successfully imported {result.syncedEvents} events
            </CardDescription>
          </CardHeader>
          <CardContent>
            <Progress value={100} />
          </CardContent>
          <CardFooter className="flex justify-center">
            <Button onClick={() => router.push("/omni-rhythm")} className="mt-4">
              Continue to Dashboard
            </Button>
          </CardFooter>
        </Card>
      </div>
    );
  }

  return (
    <div className="container mx-auto max-w-3xl p-6">
      <Card>
        <CardHeader className="text-center">
          <div className="flex justify-center mb-4">
            <Calendar className="h-12 w-12 text-blue-600" />
          </div>
          <CardTitle>Google Calendar Connected!</CardTitle>
          <CardDescription>Import last 365 days and next 90 days</CardDescription>
        </CardHeader>
        <CardContent className="space-y-6">
          {/* Calendar Selection */}
          <div className="space-y-4">
            <div className="flex items-center gap-2">
              <Settings className="h-4 w-4" />
              <Label className="text-sm font-medium">Calendar Selection</Label>
            </div>
            <div className="flex gap-3">
              <Button
                variant={mode === "all" ? "default" : "outline"}
                onClick={() => setMode("all")}
              >
                Import All Calendars
              </Button>
              <Button
                variant={mode === "custom" ? "default" : "outline"}
                onClick={() => setMode("custom")}
              >
                Choose Calendars…
              </Button>
            </div>
            {mode === "custom" && (
              <div className="mt-4 border rounded-md divide-y">
                {calendars.length === 0 && (
                  <div className="p-4 text-sm text-muted-foreground">No calendars found</div>
                )}
                {calendars.map((c) => (
                  <label key={c.id} className="flex items-center gap-3 p-3 text-sm">
                    <Checkbox
                      checked={Boolean(selected[c.id])}
                      onCheckedChange={(v) =>
                        setSelected((prev) => ({ ...prev, [c.id]: Boolean(v) }))
                      }
                    />
                    <span className="truncate">
                      {c.summary}
                      {c.primary ? " (primary)" : ""}
                    </span>
                  </label>
                ))}
              </div>
            )}
          </div>

          {/* Time Range Preferences */}
          <div className="space-y-4">
            <Label className="text-sm font-medium">Import Time Range</Label>
            <div className="grid grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="days-past" className="text-xs text-muted-foreground">
                  Days in the past
                </Label>
                <Select value={daysPast.toString()} onValueChange={(v) => setDaysPast(Number(v))}>
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="30">30 days</SelectItem>
                    <SelectItem value="90">90 days</SelectItem>
                    <SelectItem value="180">6 months</SelectItem>
                    <SelectItem value="365">1 year</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              <div className="space-y-2">
                <Label htmlFor="days-future" className="text-xs text-muted-foreground">
                  Days in the future
                </Label>
                <Select
                  value={daysFuture.toString()}
                  onValueChange={(v) => setDaysFuture(Number(v))}
                >
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="30">30 days</SelectItem>
                    <SelectItem value="90">90 days</SelectItem>
                    <SelectItem value="180">6 months</SelectItem>
                    <SelectItem value="365">1 year</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>
          </div>

          {/* Auto-sync Preference */}
          <div className="space-y-2">
            <div className="flex items-center space-x-2">
              <Checkbox
                id="auto-sync"
                checked={autoSync}
                onCheckedChange={(checked) => setAutoSync(Boolean(checked))}
              />
              <Label htmlFor="auto-sync" className="text-sm">
                Enable automatic daily sync (recommended)
              </Label>
            </div>
            <p className="text-xs text-muted-foreground">
              When enabled, your calendar will sync automatically once per day to keep data
              up-to-date.
            </p>
          </div>

          {isImporting && (
            <div className="space-y-2">
              {progress === -1 ? (
                <div className="w-full bg-muted rounded-full h-2">
                  <div className="h-2 bg-primary rounded-full animate-pulse"></div>
                </div>
              ) : (
                <Progress value={progress} />
              )}
              <p className="text-sm text-muted-foreground text-center">
                {progress === -1
                  ? "Fetching and processing your calendar events... This may take a few minutes."
                  : "Import complete!"}
              </p>
            </div>
          )}

          <div className="p-4 bg-blue-50 rounded-md border text-sm text-blue-900 flex items-center gap-2">
            <Download className="h-4 w-4" />
            We will import all event data: titles, times, attendees, locations, descriptions, and
            metadata.
          </div>
        </CardContent>
        <CardFooter>
          <Button className="w-full" size="lg" disabled={isImporting} onClick={startImport}>
            {isImporting ? "Importing…" : "Start Calendar Import"}
          </Button>
        </CardFooter>
      </Card>
    </div>
  );
}


/* ===== src/app/(authorisedRoute)/omni-rhythm/_components/ClientSessionTimeline.tsx ===== */

"use client";

import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Avatar, AvatarFallback } from "@/components/ui/avatar";
import {
  Users,
  Calendar,
  TrendingUp,
  Clock,
  CheckCircle,
  AlertCircle,
  Star,
  MessageSquare,
} from "lucide-react";
import { format, isAfter, differenceInDays } from "date-fns";
import { Client, SessionMilestone, ClientSessionTimelineProps } from "./types";

export function ClientSessionTimeline({
  clients,
  milestones,
  isLoading = false,
}: ClientSessionTimelineProps): JSX.Element {
  // Sort clients by last session date (most recent first)
  const sortedClients = [...clients].sort(
    (a, b) => new Date(b.lastSessionDate).getTime() - new Date(a.lastSessionDate).getTime(),
  );

  if (isLoading) {
    return (
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Users className="h-5 w-5" />
            Client Session Timeline
          </CardTitle>
          <CardDescription>Loading client journeys...</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {[1, 2, 3].map((i) => (
              <div key={i} className="animate-pulse">
                <div className="flex items-center gap-3 mb-2">
                  <div className="w-10 h-10 bg-gray-200 rounded-full"></div>
                  <div className="flex-1">
                    <div className="h-4 bg-gray-200 rounded w-1/4 mb-1"></div>
                    <div className="h-3 bg-gray-200 rounded w-1/2"></div>
                  </div>
                </div>
                <div className="h-8 bg-gray-200 rounded"></div>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Users className="h-5 w-5" />
          Client Session Timeline
        </CardTitle>
        <CardDescription>
          Track client journeys and milestone progress ({clients.length} active clients)
        </CardDescription>
      </CardHeader>
      <CardContent>
        {clients.length === 0 ? (
          <div className="text-center py-8 text-muted-foreground">
            <Users className="h-12 w-12 mx-auto mb-4 opacity-50" />
            <p className="text-lg font-medium">No client data yet</p>
            <p className="text-sm mt-1">Client timelines will appear as you schedule sessions</p>
          </div>
        ) : (
          <div className="space-y-6">
            {sortedClients.slice(0, 5).map((client) => (
              <ClientTimelineCard
                key={client.id}
                client={client}
                milestones={milestones.filter((m) => m.clientId === client.id)}
              />
            ))}

            {/* Summary Stats */}
            <div className="border-t pt-4">
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-center">
                <div className="space-y-1">
                  <div className="text-2xl font-bold text-blue-600">
                    {clients.filter((c) => c.status === "active").length}
                  </div>
                  <div className="text-xs text-muted-foreground">Active Clients</div>
                </div>
                <div className="space-y-1">
                  <div className="text-2xl font-bold text-green-600">
                    {clients.reduce((sum, c) => sum + c.totalSessions, 0)}
                  </div>
                  <div className="text-xs text-muted-foreground">Total Sessions</div>
                </div>
                <div className="space-y-1">
                  <div className="text-2xl font-bold text-purple-600">
                    ${clients.reduce((sum, c) => sum + c.totalSpent, 0)}
                  </div>
                  <div className="text-xs text-muted-foreground">Total Revenue</div>
                </div>
                <div className="space-y-1">
                  <div className="text-2xl font-bold text-orange-600">
                    {Math.round(
                      (clients.reduce((sum, c) => sum + c.satisfaction, 0) / clients.length) * 10,
                    ) / 10}
                  </div>
                  <div className="text-xs text-muted-foreground">Avg Satisfaction</div>
                </div>
              </div>
            </div>
          </div>
        )}
      </CardContent>
    </Card>
  );
}

function ClientTimelineCard({
  client,
  milestones,
}: {
  client: Client;
  milestones: SessionMilestone[];
}): JSX.Element {
  const sortedMilestones = [...milestones].sort(
    (a, b) => new Date(b.date).getTime() - new Date(a.date).getTime(),
  );

  const nextSession = client.nextSessionDate ? new Date(client.nextSessionDate) : null;
  const daysUntilNext = nextSession ? differenceInDays(nextSession, new Date()) : null;
  const lastSession = new Date(client.lastSessionDate);
  // const daysSinceLast = differenceInDays(new Date(), lastSession);

  return (
    <div className="border rounded-lg p-4 space-y-3">
      {/* Client Header */}
      <div className="flex items-start justify-between">
        <div className="flex items-center gap-3">
          <Avatar className="h-10 w-10">
            <AvatarFallback>
              {client.name
                .split(" ")
                .map((n) => n[0])
                .join("")
                .toUpperCase()}
            </AvatarFallback>
          </Avatar>
          <div>
            <h4 className="font-medium">{client.name}</h4>
            <div className="flex items-center gap-2 text-sm text-muted-foreground">
              <span>{client.totalSessions} sessions</span>
              <span>•</span>
              <span>${client.totalSpent}</span>
            </div>
          </div>
        </div>

        <div className="flex items-center gap-2">
          <div className="flex items-center">
            {Array.from({ length: 5 }, (_, i) => (
              <Star
                key={i}
                className={`h-3 w-3 ${
                  i < client.satisfaction ? "text-yellow-400 fill-current" : "text-gray-300"
                }`}
              />
            ))}
          </div>
          <Badge variant={client.status === "active" ? "default" : "secondary"}>
            {client.status}
          </Badge>
        </div>
      </div>

      {/* Timeline Visualization */}
      <div className="relative">
        <div className="flex items-center justify-between text-xs text-muted-foreground mb-2">
          <span>Last: {format(lastSession, "MMM d")}</span>
          {nextSession && (
            <span
              className={
                daysUntilNext !== null && daysUntilNext <= 1 ? "text-orange-600 font-medium" : ""
              }
            >
              Next: {format(nextSession, "MMM d")}
              {daysUntilNext !== null && daysUntilNext <= 7 && ` (${daysUntilNext}d)`}
            </span>
          )}
        </div>

        {/* Timeline Bar */}
        <div className="relative h-2 bg-gray-200 rounded-full overflow-hidden">
          <div
            className="absolute top-0 left-0 h-full bg-gradient-to-r from-blue-500 to-green-500 rounded-full"
            style={{
              width: `${Math.min(100, (client.totalSessions / 10) * 100)}%`,
            }}
          />
          {nextSession && isAfter(nextSession, new Date()) && (
            <div
              className="absolute top-0 w-1 h-full bg-orange-500 rounded-full"
              style={{
                left: `${Math.min(
                  95,
                  ((Date.now() - lastSession.getTime()) /
                    (nextSession.getTime() - lastSession.getTime())) *
                    100,
                )}%`,
              }}
            />
          )}
        </div>

        {/* Session Dots */}
        <div className="flex justify-between mt-1">
          {sortedMilestones.slice(0, 5).map((milestone) => (
            <div
              key={milestone.id}
              className={`w-2 h-2 rounded-full ${
                milestone.type === "completed"
                  ? "bg-green-500"
                  : milestone.type === "scheduled"
                    ? "bg-blue-500"
                    : milestone.type === "cancelled"
                      ? "bg-red-500"
                      : "bg-gray-500"
              }`}
              title={`${format(new Date(milestone.date), "MMM d")} - ${milestone.type}`}
            />
          ))}
          {milestones.length > 5 && (
            <div className="text-xs text-muted-foreground ml-1">+{milestones.length - 5}</div>
          )}
        </div>
      </div>

      {/* Recent Activity */}
      {sortedMilestones.length > 0 && (
        <div className="space-y-2">
          <h5 className="text-sm font-medium text-muted-foreground">Recent Activity</h5>
          <div className="space-y-1">
            {sortedMilestones.slice(0, 2).map((milestone) => (
              <div key={milestone.id} className="flex items-center justify-between text-xs">
                <div className="flex items-center gap-2">
                  {milestone.type === "completed" ? (
                    <CheckCircle className="h-3 w-3 text-green-500" />
                  ) : milestone.type === "scheduled" ? (
                    <Calendar className="h-3 w-3 text-blue-500" />
                  ) : milestone.type === "cancelled" ? (
                    <AlertCircle className="h-3 w-3 text-red-500" />
                  ) : (
                    <Clock className="h-3 w-3 text-gray-500" />
                  )}
                  <span>Session #{milestone.sessionNumber}</span>
                </div>
                <div className="flex items-center gap-2 text-muted-foreground">
                  <span>{format(new Date(milestone.date), "MMM d")}</span>
                  <span>${milestone.revenue}</span>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Action Buttons */}
      <div className="flex gap-2 pt-2">
        <Button size="sm" variant="outline" className="flex-1">
          <Calendar className="h-3 w-3 mr-1" />
          Schedule
        </Button>
        <Button size="sm" variant="outline" className="flex-1">
          <MessageSquare className="h-3 w-3 mr-1" />
          Message
        </Button>
        <Button size="sm" variant="outline" className="flex-1">
          <TrendingUp className="h-3 w-3 mr-1" />
          Details
        </Button>
      </div>
    </div>
  );
}


/* ===== src/app/(authorisedRoute)/omni-rhythm/_components/index.ts ===== */

// Export all calendar components for easy importing
export { RhythmIntelligenceService } from "@/server/services/rhythm-intelligence.service";
export { PreparationWorkflow } from "@/app/(authorisedRoute)/omni-rhythm/_components/PreparationWorkflow";
export { TodayIntelligencePanel } from "@/app/(authorisedRoute)/omni-rhythm/_components/TodayIntelligencePanel";
export { WeeklyBusinessFlow } from "@/app/(authorisedRoute)/omni-rhythm/_components/WeeklyBusinessFlow";
export { ClientSessionTimeline } from "@/app/(authorisedRoute)/omni-rhythm/_components/ClientSessionTimeline";
// ClientContextService functionality consolidated into RhythmIntelligenceService
export { CalendarSidebar } from "@/app/(authorisedRoute)/omni-rhythm/_components/CalendarSidebar";
export { OmniRhythmPage } from "@/app/(authorisedRoute)/omni-rhythm/_components/OmniRhythmPage";


/* ===== src/app/(authorisedRoute)/omni-rhythm/_components/OmniRhythmPage.tsx ===== */

"use client";

import { useEffect, useState } from "react";
import { useSearchParams } from "next/navigation";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { logger } from "@/lib/observability";

import { Calendar, Zap, BookCheck } from "lucide-react";

// Hooks
import { useOmniRhythmData } from "@/hooks/useOmniRhythmData";
import { useBusinessIntelligence } from "@/hooks/useBusinessIntelligence";

// Components - Used in Main Dashboard
import { TodayIntelligencePanel } from "@/app/(authorisedRoute)/omni-rhythm/_components/TodayIntelligencePanel";
import { WeeklyBusinessFlow } from "@/app/(authorisedRoute)/omni-rhythm/_components/WeeklyBusinessFlow";
import { PreparationWorkflow } from "@/app/(authorisedRoute)/omni-rhythm/_components/PreparationWorkflow";

// Custom Components
import { CalendarConnectionCard } from "@/app/(authorisedRoute)/omni-rhythm/_components/CalendarConnectionCard";
import { CalendarSyncSetup } from "@/app/(authorisedRoute)/omni-rhythm/_components/CalendarSyncSetup";
import { RhythmHeader } from "@/app/(authorisedRoute)/omni-rhythm/_components/RhythmHeader";
import { ensureError } from "@/lib/utils/error-handler";
import { toAppointments } from "@/app/(authorisedRoute)/omni-rhythm/_components/types";

export function OmniRhythmPage(): JSX.Element {
  const searchParams = useSearchParams();
  // Use custom hooks for state management
  const data = useOmniRhythmData();
  const bi = useBusinessIntelligence(data.allEvents || []);
  const [activeTab, setActiveTab] = useState("insights");

  // Calculate session metrics
  const calculateSessionMetrics = (): { sessionsNext7Days: number; sessionsThisMonth: number } => {
    const now = new Date();
    const next7Days = new Date(now.getTime() + 7 * 24 * 60 * 60 * 1000);
    const startOfCurrentMonth = new Date(now.getFullYear(), now.getMonth(), 1);
    const endOfCurrentMonth = new Date(now.getFullYear(), now.getMonth() + 1, 0);

    const sessionsNext7Days =
      data.allEvents?.filter((event) => {
        if (!event.startTime) return false;
        const eventDate = new Date(event.startTime);
        return eventDate >= now && eventDate <= next7Days;
      }).length ?? 0;

    const sessionsThisMonth =
      data.allEvents?.filter((event) => {
        if (!event.startTime) return false;
        const eventDate = new Date(event.startTime);
        return eventDate >= startOfCurrentMonth && eventDate <= endOfCurrentMonth;
      }).length ?? 0;

    return { sessionsNext7Days, sessionsThisMonth };
  };

  const { sessionsNext7Days, sessionsThisMonth } = calculateSessionMetrics();

  const handleLoadInsights = async (): Promise<void> => {
    try {
      const response = await fetch("/api/calendar/insights");
      if (response.ok) {
        const result = (await response.json()) as { insights?: Record<string, unknown> };
        alert(`Insights loaded: ${Object.keys(result.insights ?? {}).length} categories available`);
      } else {
        alert("Failed to load insights");
      }
    } catch (error) {
      await logger.error(
        "insights_loading_failed",
        {
          operation: "load_insights",
          additionalData: { component: "OmniRhythmPage" },
        },
        ensureError(error),
      );
      alert("Network error during insights loading");
    }
  };

  const handleSearch = (query: string): void => {
    // TODO: Implement search functionality
    void logger.debug("Search initiated", {
      operation: "search",
      component: "OmniRhythmPage",
      additionalData: { query },
    });
  };

  // Initialize calendar status and clients
  useEffect(() => {
    void data.checkCalendarStatus();
    void data.fetchClients();
  }, [data]);

  // If we need to run initial import, show setup step regardless of connection
  const step = searchParams.get("step");
  if (step === "calendar-sync") {
    return <CalendarSyncSetup />;
  }

  // If calendar is not connected, show the Connect Your Calendar screen with preview
  if (!data.isConnected) {
    return (
      <div className="container mx-auto p-6 space-y-6">
        <RhythmHeader onLoadInsights={handleLoadInsights} onSearch={handleSearch} />

        <div className="space-y-8">
          {/* Main Connection Card */}
          <CalendarConnectionCard
            isConnected={data.isConnected}
            isConnecting={data.isConnecting}
            isSyncing={data.isSyncing}
            lastSync={data.stats?.lastSync ?? undefined}
            error={data.error}
            onConnect={data.connectCalendar}
            onSync={data.syncCalendar}
          />

          {/* Preview of what you can do once connected */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {/* Upcoming Events Preview */}
            <Card>
              <CardHeader>
                <CardTitle className="text-lg flex items-center gap-2">
                  <Calendar className="h-5 w-5" />
                  Upcoming Sessions
                </CardTitle>
                <CardDescription>
                  See your upcoming appointments and sessions at a glance
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-3">
                  <div className="text-center py-8 text-muted-foreground">
                    <Calendar className="h-12 w-12 mx-auto mb-3 opacity-50" />
                    <p className="text-sm">Connect your calendar to see upcoming sessions</p>
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* Business Intelligence Preview */}
            <Card>
              <CardHeader>
                <CardTitle className="text-lg flex items-center gap-2">
                  <Zap className="h-5 w-5" />
                  AI Insights
                </CardTitle>
                <CardDescription>
                  Get smart recommendations and business intelligence
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-3">
                  <div className="text-center py-8 text-muted-foreground">
                    <Zap className="h-12 w-12 mx-auto mb-3 opacity-50" />
                    <p className="text-sm">AI insights will appear here after connecting</p>
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* Client Timeline Preview */}
            <Card>
              <CardHeader>
                <CardTitle className="text-lg flex items-center gap-2">
                  <BookCheck className="h-5 w-5" />
                  Client Timeline
                </CardTitle>
                <CardDescription>Track client progress and session history</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-3">
                  <div className="text-center py-8 text-muted-foreground">
                    <BookCheck className="h-12 w-12 mx-auto mb-3 opacity-50" />
                    <p className="text-sm">Client timelines will be built automatically</p>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    );
  }

  // If calendar is connected, show the dashboard with calendar status in the top grid
  return (
    <div className="container mx-auto p-6 space-y-6">
      <RhythmHeader onLoadInsights={handleLoadInsights} onSearch={handleSearch} />

      {/* Top Status Row - New Layout */}
      <div className="grid grid-cols-1 lg:grid-cols-4 gap-6 items-stretch">
        {/* Business Intelligence Card (moved from tab content) */}
        <div className="lg:col-span-2 flex">
          <div className="w-full">
            <TodayIntelligencePanel
              appointments={toAppointments(bi.enhancedAppointments)}
              isLoading={false}
            />
          </div>
        </div>

        {/* Calendar Intelligence Layer */}
        <div className="lg:col-span-1 flex">
          <Card className="w-full">
            <CardHeader className="pb-2">
              <CardTitle className="text-lg">Calendar Intelligence Layer</CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-sm text-muted-foreground">User Interface Approach:</p>
              <ul className="mt-2 text-sm list-disc pl-4 text-muted-foreground space-y-1">
                <li>Today&apos;s Intelligence Panel</li>
                <li>Weekly Business Flow</li>
                <li>Client Session Timeline</li>
                <li>Revenue Rhythm</li>
              </ul>
            </CardContent>
          </Card>
        </div>

        {/* Calendar Connection Card (moved to end) */}
        <div className="lg:col-span-1 flex">
          <div className="w-full">
            <CalendarConnectionCard
              isConnected={data.isConnected}
              isConnecting={data.isConnecting}
              isSyncing={data.isSyncing}
              importedEventsCount={data.stats?.importedCount ?? 0}
              lastSync={data.stats?.lastSync ?? undefined}
              error={data.error}
              onConnect={data.connectCalendar}
              onSync={data.syncCalendar}
              sessionsNext7Days={sessionsNext7Days}
              sessionsThisMonth={sessionsThisMonth}
            />
          </div>
        </div>
      </div>

      {/* Main Content Tabs */}
      <Tabs value={activeTab} onValueChange={setActiveTab}>
        <TabsList className="grid w-full grid-cols-3">
          <TabsTrigger value="insights">Insights</TabsTrigger>
          <TabsTrigger value="availability">Availability</TabsTrigger>
          <TabsTrigger value="prep">Prep</TabsTrigger>
        </TabsList>

        <TabsContent value="insights" className="space-y-6">
          <WeeklyBusinessFlow
            appointments={toAppointments(bi.enhancedAppointments)}
            weeklyStats={bi.weeklyStats}
            isLoading={false}
          />
        </TabsContent>

        <TabsContent value="availability" className="space-y-6">
          <div className="text-center py-8">
            <p className="text-muted-foreground">Availability management coming soon...</p>
          </div>
        </TabsContent>

        <TabsContent value="prep" className="space-y-6">
          <PreparationWorkflow
            upcomingAppointments={[
              {
                id: "1",
                title: "Deep Tissue Massage",
                clientName: "Sarah Johnson",
                date: "2024-01-20",
                startTime: "2024-01-20T10:00:00Z",
                endTime: "2024-01-20T11:30:00Z",
                serviceType: "Deep Tissue Massage",
                preparationTasks: [
                  {
                    id: "1",
                    title: "Review client intake form",
                    description: "Check for any medical conditions or preferences",
                    completed: false,
                    priority: "high" as const,
                    estimatedTime: 5,
                    category: "client" as const,
                  },
                ],
                clientNotes: "Sarah prefers firm pressure and has mentioned lower back tension.",
                lastSessionNotes: "Focused on lower back and shoulders.",
              },
            ]}
            isLoading={false}
          />
        </TabsContent>
      </Tabs>
    </div>
  );
}


/* ===== src/app/(authorisedRoute)/omni-rhythm/_components/PreparationWorkflow.tsx ===== */

"use client";

import { useState } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Checkbox } from "@/components/ui/checkbox";
import {
  CheckCircle,
  Clock,
  AlertCircle,
  User,
  FileText,
  MessageSquare,
  Calendar,
  Zap,
  Target,
  Lightbulb,
  ArrowRight,
} from "lucide-react";
import { format, differenceInHours } from "date-fns";
import { PreparationTask, PreparationWorkflowProps } from "./types";

export function PreparationWorkflow({
  upcomingAppointments,
  isLoading = false,
}: PreparationWorkflowProps): JSX.Element {
  const [selectedAppointment, setSelectedAppointment] = useState<string | null>(
    upcomingAppointments[0]?.id ?? null,
  );
  const [completedTasks, setCompletedTasks] = useState<Set<string>>(new Set());

  const currentAppointment = upcomingAppointments.find((app) => app.id === selectedAppointment);

  if (isLoading) {
    return (
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Target className="h-5 w-5" />
            Preparation Workflow
          </CardTitle>
          <CardDescription>Loading preparation tasks...</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {[1, 2, 3].map((i) => (
              <div key={i} className="animate-pulse">
                <div className="h-4 bg-gray-200 rounded w-3/4 mb-2"></div>
                <div className="h-8 bg-gray-200 rounded"></div>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>
    );
  }

  const totalTasks = currentAppointment?.preparationTasks.length ?? 0;
  const completedCount =
    currentAppointment?.preparationTasks.filter((task) => completedTasks.has(task.id)).length ?? 0;
  const progressPercentage = totalTasks > 0 ? (completedCount / totalTasks) * 100 : 0;

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Target className="h-5 w-5" />
          Preparation Workflow
        </CardTitle>
        <CardDescription>
          Prepare for upcoming sessions with automated checklists and insights
        </CardDescription>
      </CardHeader>
      <CardContent className="space-y-6">
        {/* Upcoming Appointments Selector */}
        {upcomingAppointments.length > 1 && (
          <div className="space-y-3">
            <h4 className="font-medium text-sm">Select Appointment to Prepare:</h4>
            <div className="grid gap-2">
              {upcomingAppointments.map((appointment) => {
                const hoursUntil = differenceInHours(new Date(appointment.startTime), new Date());
                const isUrgent = hoursUntil <= 24;

                return (
                  <Button
                    key={appointment.id}
                    variant={selectedAppointment === appointment.id ? "default" : "outline"}
                    className="justify-start h-auto p-3"
                    onClick={() => setSelectedAppointment(appointment.id)}
                  >
                    <div className="flex items-center justify-between w-full">
                      <div className="text-left">
                        <div className="font-medium">{appointment.clientName}</div>
                        <div className="text-xs text-muted-foreground">
                          {format(new Date(appointment.startTime), "MMM d, h:mm a")} -{" "}
                          {appointment.serviceType}
                        </div>
                      </div>
                      <div className="flex items-center gap-2">
                        {isUrgent && <AlertCircle className="h-4 w-4 text-orange-500" />}
                        <Badge variant="secondary" className="text-xs">
                          {hoursUntil}h
                        </Badge>
                      </div>
                    </div>
                  </Button>
                );
              })}
            </div>
          </div>
        )}

        {currentAppointment ? (
          <>
            {/* Current Appointment Header */}
            <div className="border rounded-lg p-4 bg-blue-50 dark:bg-blue-950/20">
              <div className="flex items-start justify-between mb-3">
                <div>
                  <h3 className="font-semibold text-lg">{currentAppointment.clientName}</h3>
                  <div className="flex items-center gap-4 text-sm text-muted-foreground mt-1">
                    <div className="flex items-center gap-1">
                      <Calendar className="h-4 w-4" />
                      {format(new Date(currentAppointment.startTime), "EEEE, MMMM d")}
                    </div>
                    <div className="flex items-center gap-1">
                      <Clock className="h-4 w-4" />
                      {format(new Date(currentAppointment.startTime), "h:mm a")} -
                      {format(new Date(currentAppointment.endTime), "h:mm a")}
                    </div>
                  </div>
                </div>
                <Badge variant="outline">{currentAppointment.serviceType}</Badge>
              </div>

              {/* Progress Bar */}
              <div className="space-y-2">
                <div className="flex justify-between text-sm">
                  <span>Preparation Progress</span>
                  <span>
                    {completedCount}/{totalTasks} tasks
                  </span>
                </div>
                <div className="w-full bg-gray-200 rounded-full h-2">
                  <div
                    className="bg-blue-600 h-2 rounded-full transition-all duration-300"
                    style={{ width: `${progressPercentage}%` }}
                  />
                </div>
              </div>
            </div>

            {/* Preparation Tasks */}
            <div className="space-y-4">
              <h4 className="font-medium flex items-center gap-2">
                <CheckCircle className="h-4 w-4" />
                Preparation Checklist
              </h4>

              <div className="space-y-3">
                {currentAppointment.preparationTasks.map((task) => (
                  <PreparationTaskItem
                    key={task.id}
                    task={task}
                    isCompleted={completedTasks.has(task.id)}
                    onToggle={(completed) => {
                      const newCompleted = new Set(completedTasks);
                      if (completed) {
                        newCompleted.add(task.id);
                      } else {
                        newCompleted.delete(task.id);
                      }
                      setCompletedTasks(newCompleted);
                    }}
                  />
                ))}
              </div>
            </div>

            {/* Client Insights */}
            {(currentAppointment.clientNotes ?? currentAppointment.lastSessionNotes) && (
              <div className="space-y-4">
                <h4 className="font-medium flex items-center gap-2">
                  <Lightbulb className="h-4 w-4" />
                  Client Insights
                </h4>

                {currentAppointment.clientNotes && (
                  <div className="border rounded-lg p-3">
                    <div className="flex items-center gap-2 mb-2">
                      <User className="h-4 w-4 text-blue-600" />
                      <span className="font-medium text-sm">Client Notes</span>
                    </div>
                    <p className="text-sm text-muted-foreground">
                      {currentAppointment.clientNotes}
                    </p>
                  </div>
                )}

                {currentAppointment.lastSessionNotes && (
                  <div className="border rounded-lg p-3">
                    <div className="flex items-center gap-2 mb-2">
                      <FileText className="h-4 w-4 text-green-600" />
                      <span className="font-medium text-sm">Last Session Summary</span>
                    </div>
                    <p className="text-sm text-muted-foreground">
                      {currentAppointment.lastSessionNotes}
                    </p>
                  </div>
                )}
              </div>
            )}

            {/* Quick Actions */}
            <div className="space-y-4">
              <h4 className="font-medium flex items-center gap-2">
                <Zap className="h-4 w-4" />
                Quick Actions
              </h4>

              <div className="grid grid-cols-2 gap-3">
                <Button variant="outline" className="justify-start">
                  <MessageSquare className="h-4 w-4 mr-2" />
                  Send Reminder
                </Button>
                <Button variant="outline" className="justify-start">
                  <FileText className="h-4 w-4 mr-2" />
                  View Full History
                </Button>
                <Button variant="outline" className="justify-start">
                  <Calendar className="h-4 w-4 mr-2" />
                  Reschedule
                </Button>
                <Button variant="outline" className="justify-start">
                  <Target className="h-4 w-4 mr-2" />
                  Session Goals
                </Button>
              </div>
            </div>

            {/* Automated Workflows */}
            <div className="space-y-4">
              <h4 className="font-medium flex items-center gap-2">
                <ArrowRight className="h-4 w-4" />
                Automated Workflows
              </h4>

              <div className="space-y-2">
                <AutomatedWorkflowItem
                  title="Pre-Session Email"
                  description="Send welcome email with session details"
                  status="scheduled"
                  timeUntil="2 hours before"
                />
                <AutomatedWorkflowItem
                  title="Client Intake Review"
                  description="Review and update client intake form"
                  status="pending"
                  timeUntil="1 hour before"
                />
                <AutomatedWorkflowItem
                  title="Follow-up Message"
                  description="Send post-session care instructions"
                  status="ready"
                  timeUntil="After session"
                />
              </div>
            </div>
          </>
        ) : (
          <div className="text-center py-8 text-muted-foreground">
            <Target className="h-12 w-12 mx-auto mb-4 opacity-50" />
            <p className="text-lg font-medium">No upcoming appointments</p>
            <p className="text-sm mt-1">
              Preparation workflows will appear here when you have scheduled sessions
            </p>
          </div>
        )}
      </CardContent>
    </Card>
  );
}

function PreparationTaskItem({
  task,
  isCompleted,
  onToggle,
}: {
  task: PreparationTask;
  isCompleted: boolean;
  onToggle: (completed: boolean) => void;
}): JSX.Element {
  const getPriorityColor = (priority: string): string => {
    switch (priority) {
      case "high":
        return "text-red-600 dark:text-red-400";
      case "medium":
        return "text-orange-600 dark:text-orange-400";
      case "low":
        return "text-green-600 dark:text-green-400";
      default:
        return "text-gray-600";
    }
  };

  const getCategoryIcon = (category: string): JSX.Element => {
    switch (category) {
      case "client":
        return <User className="h-4 w-4" />;
      case "preparation":
        return <Target className="h-4 w-4" />;
      case "followup":
        return <MessageSquare className="h-4 w-4" />;
      case "administrative":
        return <FileText className="h-4 w-4" />;
      default:
        return <CheckCircle className="h-4 w-4" />;
    }
  };

  return (
    <div
      className={`border rounded-lg p-4 transition-all ${
        isCompleted
          ? "bg-green-50 dark:bg-green-950/20 border-green-200"
          : "hover:bg-gray-50 dark:hover:bg-gray-900/50"
      }`}
    >
      <div className="flex items-start gap-3">
        <Checkbox checked={isCompleted} onCheckedChange={onToggle} className="mt-1" />

        <div className="flex-1 space-y-2">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-2">
              {getCategoryIcon(task.category)}
              <h5
                className={`font-medium ${isCompleted ? "line-through text-muted-foreground" : ""}`}
              >
                {task.title}
              </h5>
            </div>
            <div className="flex items-center gap-2">
              <Badge variant="outline" className={`text-xs ${getPriorityColor(task.priority)}`}>
                {task.priority}
              </Badge>
              <span className="text-xs text-muted-foreground">{task.estimatedTime}min</span>
            </div>
          </div>

          <p
            className={`text-sm ${isCompleted ? "text-muted-foreground" : "text-muted-foreground"}`}
          >
            {task.description}
          </p>

          {task.dueDate && (
            <div className="flex items-center gap-1 text-xs text-muted-foreground">
              <Clock className="h-3 w-3" />
              Due: {format(task.dueDate, "MMM d, h:mm a")}
            </div>
          )}
        </div>
      </div>
    </div>
  );
}

function AutomatedWorkflowItem({
  title,
  description,
  status,
  timeUntil,
}: {
  title: string;
  description: string;
  status: "scheduled" | "pending" | "ready" | "completed";
  timeUntil: string;
}): JSX.Element {
  const getStatusColor = (status: string): string => {
    switch (status) {
      case "completed":
        return "text-green-600 bg-green-100 dark:bg-green-900/30";
      case "ready":
        return "text-blue-600 bg-blue-100 dark:bg-blue-900/30";
      case "scheduled":
        return "text-orange-600 bg-orange-100 dark:bg-orange-900/30";
      case "pending":
        return "text-gray-600 bg-gray-100 dark:bg-gray-900/30";
      default:
        return "text-gray-600 bg-gray-100 dark:bg-gray-900/30";
    }
  };

  return (
    <div className="flex items-center justify-between p-3 border rounded-lg">
      <div className="flex-1">
        <div className="flex items-center gap-2 mb-1">
          <h5 className="font-medium text-sm">{title}</h5>
          <Badge variant="outline" className={`text-xs ${getStatusColor(status)}`}>
            {status}
          </Badge>
        </div>
        <p className="text-xs text-muted-foreground">{description}</p>
      </div>
      <div className="text-xs text-muted-foreground">{timeUntil}</div>
    </div>
  );
}


/* ===== src/app/(authorisedRoute)/omni-rhythm/_components/QuickActions.tsx ===== */

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Zap, Users, Calendar, Brain, MessageSquare, FileText } from "lucide-react";
import { QuickActionsProps } from "./types";

export function QuickActions({
  onNewSession,
  onScheduleFollowup,
  onGenerateInsights,
  onSendMessage,
  onViewHistory,
}: QuickActionsProps): JSX.Element {
  const actions = [
    {
      icon: Users,
      label: "New Client Session",
      description: "Schedule a new appointment",
      action: onNewSession,
      variant: "default" as const,
    },
    {
      icon: Calendar,
      label: "Schedule Follow-up",
      description: "Book a follow-up session",
      action: onScheduleFollowup,
      variant: "outline" as const,
    },
    {
      icon: Brain,
      label: "Generate Insights",
      description: "AI-powered recommendations",
      action: onGenerateInsights,
      variant: "outline" as const,
    },
    {
      icon: MessageSquare,
      label: "Send Message",
      description: "Contact a client",
      action: onSendMessage,
      variant: "outline" as const,
    },
    {
      icon: FileText,
      label: "View History",
      description: "Client session history",
      action: onViewHistory,
      variant: "outline" as const,
    },
  ];

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Zap className="h-5 w-5" />
          Quick Actions
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-3">
        {actions.map((action, index) => {
          const Icon = action.icon;
          return (
            <Button
              key={index}
              className="w-full justify-start h-auto p-3"
              variant={action.variant}
              onClick={action.action}
            >
              <div className="flex items-center gap-3 w-full">
                <Icon className="h-4 w-4 flex-shrink-0" />
                <div className="text-left flex-1">
                  <div className="font-medium text-sm">{action.label}</div>
                  <div className="text-xs text-muted-foreground">{action.description}</div>
                </div>
              </div>
            </Button>
          );
        })}
      </CardContent>
    </Card>
  );
}


/* ===== src/app/(authorisedRoute)/omni-rhythm/_components/RhythmHeader.tsx ===== */

"use client";

import { Search, Zap } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { useState } from "react";
import { RhythmHeaderProps } from "./types";

export function RhythmHeader({ onLoadInsights, onSearch }: RhythmHeaderProps): JSX.Element {
  const [searchQuery, setSearchQuery] = useState("");

  const handleSearchSubmit = (e: React.FormEvent): void => {
    e.preventDefault();
    onSearch?.(searchQuery);
  };

  return (
    <div className="flex items-center justify-between">
      <div>
        <h1 className="text-3xl font-bold tracking-tight">OmniRhythm</h1>
        <p className="text-muted-foreground">
          Calendar intelligence and session management for your wellness practice
        </p>
      </div>
      <div className="flex items-center gap-3">
        {/* Search Bar */}
        <form onSubmit={handleSearchSubmit} className="relative">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
          <Input
            type="text"
            placeholder="Search sessions, clients..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="pl-10 w-64"
          />
        </form>

        {/* Insights Button */}
        {onLoadInsights && (
          <Button onClick={onLoadInsights} variant="outline">
            <Zap className="h-4 w-4 mr-2" />
            Insights
          </Button>
        )}
      </div>
    </div>
  );
}


/* ===== src/app/(authorisedRoute)/omni-rhythm/_components/SelfCareModal.tsx ===== */

"use client";

import { useState } from "react";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { format, addMinutes } from "date-fns";
import { Cross } from "lucide-react";
import { SelfCareModalProps, CalendarEventCreateData } from "./types";

const selfCareOptions = [
  "Reflect on the day",
  "Centre myself",
  "Meditate",
  "Take a walk outside without my phone",
  "Practice gratitude",
  "Deep breathing exercises",
  "Stretch and movement",
  "Journal writing",
  "Listen to calming music",
  "Read something inspiring",
];

export function SelfCareModal({ onCreateEvent }: SelfCareModalProps): JSX.Element {
  const [open, setOpen] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);

  // Default to current time and 30 minutes duration
  const now = new Date();
  const defaultEndTime = addMinutes(now, 30);

  const [formData, setFormData] = useState({
    title: "Self Care Time",
    startDate: format(now, "yyyy-MM-dd"),
    startTime: format(now, "HH:mm"),
    endTime: format(defaultEndTime, "HH:mm"),
    selfCareType: "",
    description: "",
    location: "",
  });

  const handleSubmit = async (e: React.FormEvent): Promise<void> => {
    e.preventDefault();
    setIsSubmitting(true);

    try {
      // Create event data for Google Calendar API
      const startDateTime = `${formData.startDate}T${formData.startTime}`;
      const endDateTime = `${formData.startDate}T${formData.endTime}`;

      const eventData: CalendarEventCreateData = {
        summary: formData.title,
        description: `Self Care Activity: ${formData.selfCareType}${formData.description ? `\n\nNotes: ${formData.description}` : ""}`,
        ...(formData.location && { location: formData.location }),
        start: {
          dateTime: startDateTime,
          timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone,
        },
        end: {
          dateTime: endDateTime,
          timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone,
        },
      };

      await onCreateEvent(eventData);
      setOpen(false);
      // Reset form
      const newNow = new Date();
      const newDefaultEndTime = addMinutes(newNow, 30);
      setFormData({
        title: "Self Care Time",
        startDate: format(newNow, "yyyy-MM-dd"),
        startTime: format(newNow, "HH:mm"),
        endTime: format(newDefaultEndTime, "HH:mm"),
        selfCareType: "",
        description: "",
        location: "",
      });
    } catch (error) {
      console.error("Failed to create self care event:", error);
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <Dialog open={open} onOpenChange={setOpen}>
      <DialogTrigger asChild>
        <Button variant="outline" size="sm" className="w-full justify-start">
          <Cross className="mr-2 h-4 w-4 text-violet-500" />
          Add Self Care Slot
        </Button>
      </DialogTrigger>
      <DialogContent className="sm:max-w-[425px]">
        <DialogHeader>
          <DialogTitle>Schedule Self Care Time</DialogTitle>
        </DialogHeader>
        <form onSubmit={handleSubmit} className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="title">Title</Label>
            <Input
              id="title"
              value={formData.title}
              onChange={(e) => setFormData({ ...formData, title: e.target.value })}
              required
            />
          </div>

          <div className="grid grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label htmlFor="startDate">Date</Label>
              <Input
                id="startDate"
                type="date"
                value={formData.startDate}
                onChange={(e) => setFormData({ ...formData, startDate: e.target.value })}
                required
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="startTime">Start Time</Label>
              <Input
                id="startTime"
                type="time"
                value={formData.startTime}
                onChange={(e) => setFormData({ ...formData, startTime: e.target.value })}
                required
              />
            </div>
          </div>

          <div className="space-y-2">
            <Label htmlFor="endTime">End Time</Label>
            <Input
              id="endTime"
              type="time"
              value={formData.endTime}
              onChange={(e) => setFormData({ ...formData, endTime: e.target.value })}
              required
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="selfCareType">Self Care Activity</Label>
            <Select
              value={formData.selfCareType}
              onValueChange={(value) => setFormData({ ...formData, selfCareType: value })}
            >
              <SelectTrigger>
                <SelectValue placeholder="Choose a self care activity..." />
              </SelectTrigger>
              <SelectContent>
                {selfCareOptions.map((option) => (
                  <SelectItem key={option} value={option}>
                    {option}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>

          <div className="space-y-2">
            <Label htmlFor="location">Location (optional)</Label>
            <Input
              id="location"
              value={formData.location}
              onChange={(e) => setFormData({ ...formData, location: e.target.value })}
              placeholder="Where will you do this?"
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="description">Notes (optional)</Label>
            <Textarea
              id="description"
              value={formData.description}
              onChange={(e) => setFormData({ ...formData, description: e.target.value })}
              placeholder="Any additional notes or intentions..."
              rows={3}
            />
          </div>

          <div className="flex justify-end space-x-2">
            <Button type="button" variant="outline" onClick={() => setOpen(false)}>
              Cancel
            </Button>
            <Button type="submit" disabled={isSubmitting}>
              {isSubmitting ? "Creating..." : "Create Self Care Time"}
            </Button>
          </div>
        </form>
      </DialogContent>
    </Dialog>
  );
}


/* ===== src/app/(authorisedRoute)/omni-rhythm/_components/SessionModal.tsx ===== */

"use client";

import { useState } from "react";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { format, addHours } from "date-fns";
import { Euro } from "lucide-react";
import { SessionModalProps, CalendarEventCreateData } from "./types";

const sessionTypes = [
  "Appointment",
  "Class",
  "Workshop",
  "Group Class",
  "One to One",
  "Consultation",
  "Follow-up",
  "Assessment",
  "Treatment",
  "Therapy Session",
];

export function SessionModal({ onCreateEvent }: SessionModalProps): JSX.Element {
  const [open, setOpen] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);

  // Default to current time and 1 hour duration
  const now = new Date();
  const defaultEndTime = addHours(now, 1);

  const [formData, setFormData] = useState({
    title: "",
    startDate: format(now, "yyyy-MM-dd"),
    startTime: format(now, "HH:mm"),
    endTime: format(defaultEndTime, "HH:mm"),
    sessionType: "",
    description: "",
    location: "",
    attendees: "",
    clientName: "",
  });

  const handleSubmit = async (e: React.FormEvent): Promise<void> => {
    e.preventDefault();
    setIsSubmitting(true);

    try {
      // Create event data for Google Calendar API
      const startDateTime = `${formData.startDate}T${formData.startTime}`;
      const endDateTime = `${formData.startDate}T${formData.endTime}`;

      const eventData: CalendarEventCreateData = {
        summary: formData.title || `${formData.sessionType} Session`,
        description: `Session Type: ${formData.sessionType}\nClient: ${formData.clientName}\n\nAttendees: ${formData.attendees}\n\nNotes: ${formData.description}`,
        ...(formData.location && { location: formData.location }),
        start: {
          dateTime: startDateTime,
          timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone,
        },
        end: {
          dateTime: endDateTime,
          timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone,
        },
        ...(formData.attendees && {
          attendees: formData.attendees.split(",").map((email) => ({ email: email.trim() })),
        }),
      };

      await onCreateEvent(eventData);
      setOpen(false);
      // Reset form
      const newNow = new Date();
      const newDefaultEndTime = addHours(newNow, 1);
      setFormData({
        sessionType: "",
        title: "",
        clientName: "",
        startDate: format(newNow, "yyyy-MM-dd"),
        startTime: format(newNow, "HH:mm"),
        endTime: format(newDefaultEndTime, "HH:mm"),
        location: "",
        attendees: "",
        description: "",
      });
    } catch (error) {
      console.error("Failed to create session event:", error);
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <Dialog open={open} onOpenChange={setOpen}>
      <DialogTrigger asChild>
        <Button variant="outline" size="sm" className="w-full justify-start">
          <Euro className="mr-2 h-4 w-4 text-green-500" />
          Add Client Session
        </Button>
      </DialogTrigger>
      <DialogContent className="sm:max-w-[500px]">
        <DialogHeader>
          <DialogTitle>Schedule New Session</DialogTitle>
        </DialogHeader>
        <form onSubmit={handleSubmit} className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="sessionType">Session Type</Label>
            <Select
              value={formData.sessionType}
              onValueChange={(value) => setFormData({ ...formData, sessionType: value })}
              required
            >
              <SelectTrigger>
                <SelectValue placeholder="Choose session type..." />
              </SelectTrigger>
              <SelectContent>
                {sessionTypes.map((type) => (
                  <SelectItem key={type} value={type}>
                    {type}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>

          <div className="space-y-2">
            <Label htmlFor="title">Title (optional)</Label>
            <Input
              id="title"
              value={formData.title}
              onChange={(e) => setFormData({ ...formData, title: e.target.value })}
              placeholder="Leave blank to auto-generate from session type"
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="clientName">Client Name (optional)</Label>
            <Input
              id="clientName"
              value={formData.clientName}
              onChange={(e) => setFormData({ ...formData, clientName: e.target.value })}
              placeholder="Client or participant name"
            />
          </div>

          <div className="grid grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label htmlFor="startDate">Date</Label>
              <Input
                id="startDate"
                type="date"
                value={formData.startDate}
                onChange={(e) => setFormData({ ...formData, startDate: e.target.value })}
                required
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="startTime">Start Time</Label>
              <Input
                id="startTime"
                type="time"
                value={formData.startTime}
                onChange={(e) => setFormData({ ...formData, startTime: e.target.value })}
                required
              />
            </div>
          </div>

          <div className="space-y-2">
            <Label htmlFor="endTime">End Time</Label>
            <Input
              id="endTime"
              type="time"
              value={formData.endTime}
              onChange={(e) => setFormData({ ...formData, endTime: e.target.value })}
              required
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="location">Location (optional)</Label>
            <Input
              id="location"
              value={formData.location}
              onChange={(e) => setFormData({ ...formData, location: e.target.value })}
              placeholder="Where will this session take place?"
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="attendees">Attendees (optional)</Label>
            <Input
              id="attendees"
              value={formData.attendees}
              onChange={(e) => setFormData({ ...formData, attendees: e.target.value })}
              placeholder="Email addresses separated by commas"
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="description">Notes/Description (optional)</Label>
            <Textarea
              id="description"
              value={formData.description}
              onChange={(e) => setFormData({ ...formData, description: e.target.value })}
              placeholder="Session details, preparation notes, or special requirements..."
              rows={3}
            />
          </div>

          <div className="flex justify-end space-x-2">
            <Button type="button" variant="outline" onClick={() => setOpen(false)}>
              Cancel
            </Button>
            <Button type="submit" disabled={isSubmitting}>
              {isSubmitting ? "Creating..." : "Create Session"}
            </Button>
          </div>
        </form>
      </DialogContent>
    </Dialog>
  );
}


/* ===== src/app/(authorisedRoute)/omni-rhythm/_components/TodayIntelligencePanel.tsx ===== */

"use client";

import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import {
  Calendar,
  Clock,
  MapPin,
  Users,
  FileText,
  TrendingUp,
  AlertCircle,
  CheckCircle,
  User,
} from "lucide-react";
import { format } from "date-fns";
import { Appointment, TodayIntelligencePanelProps } from "./types";

export function TodayIntelligencePanel({
  appointments,
  isLoading = false,
}: TodayIntelligencePanelProps): JSX.Element {
  const today = new Date();
  const todayString = format(today, "EEEE, MMMM d, yyyy");

  if (isLoading) {
    return (
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Calendar className="h-5 w-5" />
            Today&apos;s Intelligence
          </CardTitle>
          <CardDescription>Loading your appointments...</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {[1, 2, 3].map((i) => (
              <div key={i} className="animate-pulse">
                <div className="h-4 bg-gray-200 rounded w-3/4 mb-2"></div>
                <div className="h-3 bg-gray-200 rounded w-1/2"></div>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Calendar className="h-5 w-5" />
          Today&apos;s Intelligence
        </CardTitle>
        <CardDescription>
          {todayString} - {appointments.length} appointment{appointments.length !== 1 ? "s" : ""}
        </CardDescription>
      </CardHeader>
      <CardContent>
        {appointments.length === 0 ? (
          <div className="text-center py-8 text-muted-foreground">
            <Calendar className="h-12 w-12 mx-auto mb-4 opacity-50" />
            <p className="text-lg font-medium">No appointments today</p>
            <p className="text-sm mt-1">Enjoy your day off or focus on client outreach</p>
          </div>
        ) : (
          <div className="space-y-6">
            {appointments.map((appointment) => (
              <AppointmentCard key={appointment.id} appointment={appointment} />
            ))}

            {/* Today's Summary */}
            <div className="border-t pt-4">
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-center">
                <div className="space-y-1">
                  <div className="text-2xl font-bold text-blue-600">{appointments.length}</div>
                  <div className="text-xs text-muted-foreground">Sessions</div>
                </div>
                <div className="space-y-1">
                  <div className="text-2xl font-bold text-green-600">
                    {appointments.filter((a) => a.clientContext?.clientId).length}
                  </div>
                  <div className="text-xs text-muted-foreground">Returning Clients</div>
                </div>
                <div className="space-y-1">
                  <div className="text-2xl font-bold text-purple-600">
                    ${calculateEstimatedRevenue(appointments)}
                  </div>
                  <div className="text-xs text-muted-foreground">Est. Revenue</div>
                </div>
                <div className="space-y-1">
                  <div className="text-2xl font-bold text-orange-600">
                    {calculateTotalHours(appointments)}h
                  </div>
                  <div className="text-xs text-muted-foreground">Total Hours</div>
                </div>
              </div>
            </div>
          </div>
        )}
      </CardContent>
    </Card>
  );
}

function AppointmentCard({ appointment }: { appointment: Appointment }): JSX.Element {
  const startTime = new Date(appointment.startTime);
  const endTime = new Date(appointment.endTime);
  const duration = (endTime.getTime() - startTime.getTime()) / (1000 * 60); // minutes

  return (
    <div className="border rounded-lg p-4 space-y-3">
      {/* Appointment Header */}
      <div className="flex items-start justify-between">
        <div className="flex-1">
          <h3 className="font-semibold text-lg">{appointment.title}</h3>
          <div className="flex items-center gap-4 text-sm text-muted-foreground mt-1">
            <div className="flex items-center gap-1">
              <Clock className="h-4 w-4" />
              {format(startTime, "h:mm a")} - {format(endTime, "h:mm a")}
              <span className="text-xs">({duration}min)</span>
            </div>
            {appointment.location && (
              <div className="flex items-center gap-1">
                <MapPin className="h-4 w-4" />
                {appointment.location}
              </div>
            )}
            {appointment.attendees && (
              <div className="flex items-center gap-1">
                <Users className="h-4 w-4" />
                {appointment.attendees.length} attendee
                {appointment.attendees.length !== 1 ? "s" : ""}
              </div>
            )}
          </div>
        </div>
        <div className="flex gap-2">
          {appointment.eventType && <Badge variant="secondary">{appointment.eventType}</Badge>}
          {appointment.businessCategory && (
            <Badge variant="outline">{appointment.businessCategory}</Badge>
          )}
        </div>
      </div>

      {/* Client Context */}
      {appointment.clientContext && (
        <div className="bg-blue-50 dark:bg-blue-950/20 rounded-lg p-3 space-y-2">
          <div className="flex items-center gap-2">
            <User className="h-4 w-4 text-blue-600" />
            <span className="font-medium text-blue-900 dark:text-blue-100">
              {appointment.clientContext.clientName ?? "Client"}
            </span>
            {appointment.clientContext.sessionNumber && (
              <Badge variant="outline" className="text-xs">
                Session #{appointment.clientContext.sessionNumber}
              </Badge>
            )}
          </div>

          {appointment.clientContext.totalSessions && (
            <div className="flex items-center gap-4 text-sm text-blue-700 dark:text-blue-300">
              <span>Total Sessions: {appointment.clientContext.totalSessions}</span>
              {appointment.clientContext.lastSessionDate && (
                <span>
                  Last: {format(new Date(appointment.clientContext.lastSessionDate), "MMM d")}
                </span>
              )}
            </div>
          )}

          {appointment.clientContext.preparationNeeded &&
            appointment.clientContext.preparationNeeded.length > 0 && (
              <div className="space-y-1">
                <div className="flex items-center gap-1 text-sm font-medium text-blue-900 dark:text-blue-100">
                  <AlertCircle className="h-3 w-3" />
                  Preparation Needed:
                </div>
                <ul className="text-sm text-blue-800 dark:text-blue-200 space-y-1">
                  {appointment.clientContext.preparationNeeded.map((item, index) => (
                    <li key={index} className="flex items-center gap-1">
                      <div className="w-1 h-1 bg-blue-600 rounded-full"></div>
                      {item}
                    </li>
                  ))}
                </ul>
              </div>
            )}

          {appointment.clientContext.notes && (
            <div className="text-sm text-blue-800 dark:text-blue-200">
              <span className="font-medium">Notes:</span> {appointment.clientContext.notes}
            </div>
          )}
        </div>
      )}

      {/* Action Buttons */}
      <div className="flex gap-2 pt-2">
        <Button size="sm" variant="outline" className="flex-1">
          <FileText className="h-4 w-4 mr-1" />
          View Details
        </Button>
        <Button size="sm" variant="outline" className="flex-1">
          <TrendingUp className="h-4 w-4 mr-1" />
          Session Notes
        </Button>
        <Button size="sm" variant="outline" className="flex-1">
          <CheckCircle className="h-4 w-4 mr-1" />
          Mark Complete
        </Button>
      </div>
    </div>
  );
}

function calculateEstimatedRevenue(appointments: Appointment[]): number {
  // Simple estimation based on appointment types and duration
  // In a real implementation, this would use pricing data from the database
  return appointments.reduce((total, appointment) => {
    const duration =
      (new Date(appointment.endTime).getTime() - new Date(appointment.startTime).getTime()) /
      (1000 * 60);
    let ratePerHour = 100; // Default rate

    switch (appointment.eventType) {
      case "consultation":
        ratePerHour = 150;
        break;
      case "workshop":
        ratePerHour = 75;
        break;
      case "class":
        ratePerHour = 50;
        break;
    }

    return total + (ratePerHour * duration) / 60;
  }, 0);
}

function calculateTotalHours(appointments: Appointment[]): number {
  return appointments.reduce((total, appointment) => {
    const duration =
      (new Date(appointment.endTime).getTime() - new Date(appointment.startTime).getTime()) /
      (1000 * 60 * 60);
    return total + duration;
  }, 0);
}


/* ===== src/app/(authorisedRoute)/omni-rhythm/_components/types.ts ===== */

/**
 * Unified calendar and appointment type definitions
 * Consolidates all calendar-related interfaces to prevent type conflicts
 *
 * Contains strict TypeScript interfaces that eliminate all `any` types
 * and provide proper type safety for calendar operations.
 */

// Base calendar event interface
export interface CalendarEvent {
  id: string;
  title: string;
  startTime: string;
  endTime: string;
  location?: string | undefined;
  attendees?: Array<{ email: string; name?: string }> | undefined;
  eventType?: string | undefined;
  businessCategory?: string | undefined;
  description?: string | undefined;
}

// Enhanced appointment interface with business intelligence
export interface Appointment {
  id: string;
  title: string;
  startTime: string;
  endTime: string;
  location?: string | undefined;
  attendees?: Array<{ email: string; name?: string }> | undefined;
  eventType?: string | undefined;
  businessCategory?: string | undefined;
  description?: string | undefined;
  clientContext?:
    | {
        clientId?: string;
        clientName?: string;
        sessionNumber?: number;
        lastSessionDate?: string;
        totalSessions?: number;
        notes?: string;
        preparationNeeded?: string[];
        estimatedRevenue?: number;
      }
    | undefined;
  businessInsights?:
    | {
        isHighValue?: boolean;
        isRepeatClient?: boolean;
        requiresPreparation?: boolean;
        suggestedActions?: string[];
      }
    | undefined;
}

// Calendar sync and connection types
export type CalendarItem = {
  id: string;
  summary: string;
  primary: boolean;
  accessRole: string;
};

// Client management types
export interface Client {
  id: string;
  name: string;
  email: string;
  avatar?: string;
  totalSessions: number;
  totalSpent: number;
  lastSessionDate: string;
  nextSessionDate?: string;
  status: "active" | "inactive" | "prospect";
  satisfaction: number; // 1-5 stars
  preferences?: {
    preferredTimes?: string[];
    preferredServices?: string[];
    goals?: string[];
  };
}

// Session and milestone tracking
export interface SessionMilestone {
  id: string;
  clientId: string;
  sessionNumber: number;
  date: string;
  type: "completed" | "scheduled" | "cancelled" | "no-show";
  duration: number;
  revenue: number;
  notes?: string;
  feedback?: string;
}

// Preparation workflow types
export interface PreparationTask {
  id: string;
  title: string;
  description: string;
  completed: boolean;
  priority: "low" | "medium" | "high";
  estimatedTime: number; // minutes
  category: "client" | "preparation" | "followup" | "administrative";
  dueDate?: Date;
}

export interface UpcomingAppointment {
  id: string;
  title: string;
  clientName: string;
  date: string;
  startTime: string;
  endTime: string;
  serviceType: string;
  preparationTasks: PreparationTask[];
  clientNotes?: string;
  lastSessionNotes?: string;
}

// Component props interfaces
export interface TodayIntelligencePanelProps {
  appointments: Appointment[];
  isLoading?: boolean;
}

export interface WeeklyBusinessFlowProps {
  appointments: Appointment[];
  weeklyStats?: WeeklyStats;
  isLoading?: boolean;
}

export interface ClientSessionTimelineProps {
  clients: Client[];
  milestones: SessionMilestone[];
  isLoading?: boolean;
}

export interface PreparationWorkflowProps {
  upcomingAppointments: UpcomingAppointment[];
  isLoading?: boolean;
}

export interface QuickActionsProps {
  onNewSession?: () => void;
  onScheduleFollowup?: () => void;
  onGenerateInsights?: () => void;
  onSendMessage?: () => void;
  onViewHistory?: () => void;
}

export interface RhythmHeaderProps {
  onLoadInsights?: () => void;
  onSearch?: (query: string) => void;
}

// Calendar event creation data interface for strict typing (Google Calendar API format)
export interface CalendarEventCreateData {
  summary: string; // Google Calendar uses 'summary' instead of 'title'
  description?: string;
  location?: string;
  start: {
    dateTime: string; // ISO string
    timeZone: string;
  };
  end: {
    dateTime: string; // ISO string
    timeZone: string;
  };
  attendees?: Array<{ email: string; name?: string }>;
  calendarId?: string;
  isAllDay?: boolean;
  visibility?: "default" | "public" | "private" | "confidential";
  eventType?: string;
  businessCategory?: string;
}

// Google Calendar API response interface
export interface GoogleCalendarEventResponse {
  id: string;
  htmlLink: string;
  summary: string;
  description?: string;
  location?: string;
  start: {
    dateTime?: string;
    date?: string;
    timeZone?: string;
  };
  end: {
    dateTime?: string;
    date?: string;
    timeZone?: string;
  };
  attendees?: Array<{
    email: string;
    displayName?: string;
    responseStatus?: "needsAction" | "declined" | "tentative" | "accepted";
  }>;
  status?: "confirmed" | "tentative" | "cancelled";
}

export interface SessionModalProps {
  onCreateEvent: (eventData: CalendarEventCreateData) => Promise<void>;
}

export interface SelfCareModalProps {
  onCreateEvent: (eventData: CalendarEventCreateData) => Promise<void>;
}

export interface CalendarConnectionCardProps {
  isConnected: boolean;
  isConnecting: boolean;
  isSyncing: boolean;
  isEmbedding?: boolean;
  upcomingEventsCount?: number;
  importedEventsCount?: number;
  lastSync?: string | null | undefined;
  syncStatus?: string;
  error?: string | null;
  onConnect: () => void;
  onSync: () => void;
  sessionsNext7Days?: number;
  sessionsThisMonth?: number;
}

export interface BusinessMetricsProps {
  totalSessions: number;
  totalRevenue: number;
  newClients: number;
  busiestDay: string;
  utilizationRate: number;
  clientRetention: number;
  isLoading?: boolean;
}

// Weekly stats interface (matches rhythm-intelligence.service.ts)
export interface WeeklyStats {
  totalAppointments: number;
  totalRevenue: number;
  totalHours: number;
  busiestDay: string;
  clientRetention: number;
  newClients: number;
  averageSessionValue: number;
  avgSessionLength: number;
  utilizationRate: number;
}

// Type guard to check if a CalendarEvent has business intelligence data
export function isAppointment(event: CalendarEvent): event is Appointment {
  return "clientContext" in event || "businessInsights" in event;
}

// Type guard to check if API response has expected structure
export function isGoogleCalendarResponse(data: unknown): data is GoogleCalendarEventResponse {
  return (
    typeof data === "object" &&
    data !== null &&
    "id" in data &&
    "htmlLink" in data &&
    typeof (data as Record<string, unknown>)["id"] === "string" &&
    typeof (data as Record<string, unknown>)["htmlLink"] === "string"
  );
}

// Type guard to check if error response has expected structure
export function hasErrorMessage(
  error: unknown,
): error is { error?: { message?: string }; message?: string } {
  return (
    typeof error === "object" &&
    error !== null &&
    (("error" in error &&
      typeof (error as Record<string, unknown>)["error"] === "object" &&
      (error as Record<string, unknown>)["error"] !== null &&
      "message" in ((error as Record<string, unknown>)["error"] as Record<string, unknown>)) ||
      ("message" in error && typeof (error as Record<string, unknown>)["message"] === "string"))
  );
}

// Helper function to safely extract error message from unknown error
export function getErrorMessage(error: unknown): string {
  if (hasErrorMessage(error)) {
    // First try to get nested error.message
    if (error.error?.message) {
      return error.error.message;
    }
    // Fallback to direct message
    if (error.message) {
      return error.message;
    }
  }

  // Final fallback for Error instances
  if (error instanceof Error) {
    return error.message;
  }

  return "An unknown error occurred";
}

// Helper function to safely extract HTML link from API response
export function getHtmlLink(data: unknown): string {
  if (isGoogleCalendarResponse(data)) {
    return data.htmlLink;
  }
  return "Check your calendar";
}

// Helper function to convert CalendarEvent to Appointment
export function toAppointment(event: CalendarEvent): Appointment {
  return {
    ...event,
    clientContext: undefined,
    businessInsights: undefined,
  };
}

// Helper function to convert CalendarEvent array to Appointment array
export function toAppointments(events: CalendarEvent[]): Appointment[] {
  return events.map(toAppointment);
}

// Helper function to safely parse API response data
export function safeParseApiData(data: unknown): { data?: GoogleCalendarEventResponse } {
  if (typeof data === "object" && data !== null && "data" in data) {
    const typedData = data as Record<string, unknown>;
    if (isGoogleCalendarResponse(typedData["data"])) {
      return { data: typedData["data"] };
    }
  }
  return {};
}


/* ===== src/app/(authorisedRoute)/omni-rhythm/_components/WeeklyBusinessFlow.tsx ===== */

"use client";

import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Clock, TrendingUp, Calendar, Users, Target, Zap } from "lucide-react";
import { format, startOfWeek, endOfWeek, eachDayOfInterval, isToday } from "date-fns";
import { Appointment, WeeklyStats, WeeklyBusinessFlowProps } from "./types";

export function WeeklyBusinessFlow({
  appointments,
  weeklyStats,
  isLoading = false,
}: WeeklyBusinessFlowProps): JSX.Element {
  const today = new Date();
  const weekStart = startOfWeek(today, { weekStartsOn: 1 }); // Monday
  const weekEnd = endOfWeek(today, { weekStartsOn: 1 });
  const weekDays = eachDayOfInterval({ start: weekStart, end: weekEnd });

  // Group appointments by day
  const appointmentsByDay = appointments.reduce(
    (acc, appointment) => {
      const dayKey = format(new Date(appointment.startTime), "yyyy-MM-dd");
      acc[dayKey] ??= [];
      acc[dayKey].push(appointment);
      return acc;
    },
    {} as Record<string, Appointment[]>,
  );

  // Calculate basic stats if not provided
  const defaultStats = calculateWeeklyStats(appointments);

  if (isLoading) {
    return (
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Clock className="h-5 w-5" />
            Weekly Business Flow
          </CardTitle>
          <CardDescription>Loading your practice rhythm...</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {[1, 2, 3, 4].map((i) => (
              <div key={i} className="animate-pulse">
                <div className="h-4 bg-gray-200 rounded w-1/4 mb-2"></div>
                <div className="h-8 bg-gray-200 rounded w-full"></div>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Clock className="h-5 w-5" />
          Weekly Business Flow
        </CardTitle>
        <CardDescription>
          {format(weekStart, "MMM d")} - {format(weekEnd, "MMM d, yyyy")}
        </CardDescription>
      </CardHeader>
      <CardContent className="space-y-6">
        {/* Weekly Calendar Grid */}
        <div className="grid grid-cols-7 gap-2">
          {weekDays.map((day) => {
            const dayKey = format(day, "yyyy-MM-dd");
            const dayAppointments = appointmentsByDay[dayKey] ?? [];
            const isDayToday = isToday(day);

            return (
              <div
                key={dayKey}
                className={`p-3 rounded-lg border text-center min-h-[100px] ${
                  isDayToday
                    ? "bg-blue-50 border-blue-200 dark:bg-blue-950/20 dark:border-blue-800"
                    : "bg-gray-50 dark:bg-gray-900/50"
                }`}
              >
                <div
                  className={`text-sm font-medium mb-2 ${isDayToday ? "text-blue-700 dark:text-blue-300" : ""}`}
                >
                  {format(day, "EEE")}
                </div>
                <div
                  className={`text-xs mb-2 ${isDayToday ? "text-blue-600 dark:text-blue-400" : "text-muted-foreground"}`}
                >
                  {format(day, "d")}
                </div>

                {dayAppointments.length > 0 ? (
                  <div className="space-y-1">
                    {dayAppointments.slice(0, 2).map((appointment) => (
                      <div
                        key={appointment.id}
                        className={`text-xs p-1 rounded truncate ${
                          appointment.eventType === "consultation"
                            ? "bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-300"
                            : appointment.eventType === "workshop"
                              ? "bg-purple-100 text-purple-800 dark:bg-purple-900/30 dark:text-purple-300"
                              : "bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-300"
                        }`}
                        title={appointment.title}
                      >
                        {format(new Date(appointment.startTime), "HH:mm")}
                      </div>
                    ))}
                    {dayAppointments.length > 2 && (
                      <div className="text-xs text-muted-foreground">
                        +{dayAppointments.length - 2} more
                      </div>
                    )}
                  </div>
                ) : (
                  <div className="text-xs text-muted-foreground opacity-50">No sessions</div>
                )}
              </div>
            );
          })}
        </div>

        {/* Business Insights */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          {/* Weekly Summary */}
          <div className="space-y-3">
            <h4 className="font-medium flex items-center gap-2">
              <TrendingUp className="h-4 w-4" />
              This Week
            </h4>
            <div className="space-y-2">
              <div className="flex justify-between text-sm">
                <span className="text-muted-foreground">Sessions</span>
                <span className="font-medium">
                  {(weeklyStats ?? defaultStats).totalAppointments}
                </span>
              </div>
              <div className="flex justify-between text-sm">
                <span className="text-muted-foreground">Hours</span>
                <span className="font-medium">{(weeklyStats ?? defaultStats).totalHours}h</span>
              </div>
              <div className="flex justify-between text-sm">
                <span className="text-muted-foreground">Revenue</span>
                <span className="font-medium">${(weeklyStats ?? defaultStats).totalRevenue}</span>
              </div>
            </div>
          </div>

          {/* Performance Indicators */}
          <div className="space-y-3">
            <h4 className="font-medium flex items-center gap-2">
              <Target className="h-4 w-4" />
              Performance
            </h4>
            <div className="space-y-2">
              <div className="flex justify-between text-sm">
                <span className="text-muted-foreground">Busiest Day</span>
                <Badge variant="secondary" className="text-xs">
                  {(weeklyStats ?? defaultStats).busiestDay}
                </Badge>
              </div>
              <div className="flex justify-between text-sm">
                <span className="text-muted-foreground">Avg Session</span>
                <span className="font-medium">
                  {(weeklyStats ?? defaultStats).avgSessionLength}min
                </span>
              </div>
              <div className="flex justify-between text-sm">
                <span className="text-muted-foreground">New Clients</span>
                <span className="font-medium">{(weeklyStats ?? defaultStats).newClients}</span>
              </div>
            </div>
          </div>

          {/* Optimization Suggestions */}
          <div className="space-y-3">
            <h4 className="font-medium flex items-center gap-2">
              <Zap className="h-4 w-4" />
              Suggestions
            </h4>
            <div className="space-y-2">
              {getOptimizationSuggestions(appointments, weeklyStats ?? defaultStats).map(
                (suggestion, index) => (
                  <div key={index} className="flex items-start gap-2 text-xs">
                    <div
                      className={`mt-0.5 w-2 h-2 rounded-full flex-shrink-0 ${
                        suggestion.type === "positive"
                          ? "bg-green-500"
                          : suggestion.type === "warning"
                            ? "bg-yellow-500"
                            : "bg-blue-500"
                      }`}
                    />
                    <span className="text-muted-foreground">{suggestion.text}</span>
                  </div>
                ),
              )}
            </div>
          </div>
        </div>

        {/* Quick Actions */}
        <div className="flex gap-2 pt-4 border-t">
          <Button size="sm" variant="outline" className="flex-1">
            <Calendar className="h-4 w-4 mr-2" />
            Schedule Break
          </Button>
          <Button size="sm" variant="outline" className="flex-1">
            <Users className="h-4 w-4 mr-2" />
            Client Outreach
          </Button>
          <Button size="sm" variant="outline" className="flex-1">
            <TrendingUp className="h-4 w-4 mr-2" />
            View Analytics
          </Button>
        </div>
      </CardContent>
    </Card>
  );
}

function calculateWeeklyStats(appointments: Appointment[]): WeeklyStats {
  const totalAppointments = appointments.length;

  // Calculate total hours
  const totalHours = appointments.reduce((total, appointment) => {
    const duration =
      (new Date(appointment.endTime).getTime() - new Date(appointment.startTime).getTime()) /
      (1000 * 60 * 60);
    return total + duration;
  }, 0);

  // Calculate estimated revenue (simplified)
  const totalRevenue = appointments.reduce((total, appointment) => {
    const duration =
      (new Date(appointment.endTime).getTime() - new Date(appointment.startTime).getTime()) /
      (1000 * 60);
    let ratePerHour = 100;

    switch (appointment.eventType) {
      case "consultation":
        ratePerHour = 150;
        break;
      case "workshop":
        ratePerHour = 75;
        break;
      case "class":
        ratePerHour = 50;
        break;
    }

    return total + (ratePerHour * duration) / 60;
  }, 0);

  // Find busiest day
  const appointmentsByDay = appointments.reduce(
    (acc, appointment) => {
      const dayName = format(new Date(appointment.startTime), "EEEE");
      acc[dayName] = (acc[dayName] ?? 0) + 1;
      return acc;
    },
    {} as Record<string, number>,
  );

  const busiestDay = Object.entries(appointmentsByDay).reduce(
    (max, [day, count]) => (count > max.count ? { day, count } : max),
    { day: "None", count: 0 },
  ).day;

  // Calculate average session length
  const avgSessionLength =
    totalAppointments > 0
      ? appointments.reduce((total, appointment) => {
          const duration =
            (new Date(appointment.endTime).getTime() - new Date(appointment.startTime).getTime()) /
            (1000 * 60);
          return total + duration;
        }, 0) / totalAppointments
      : 0;

  // Calculate average session value and utilization rate
  const averageSessionValue =
    totalAppointments > 0 ? Math.round(totalRevenue / totalAppointments) : 0;
  const utilizationRate = Math.round((totalHours / 40) * 100); // Assuming 40-hour work week

  return {
    totalAppointments,
    totalRevenue: Math.round(totalRevenue),
    totalHours: Math.round(totalHours * 10) / 10,
    busiestDay,
    clientRetention: 85, // Placeholder
    newClients: Math.floor(totalAppointments * 0.3), // Placeholder
    avgSessionLength: Math.round(avgSessionLength),
    averageSessionValue,
    utilizationRate,
  };
}

function getOptimizationSuggestions(
  appointments: Appointment[],
  stats: WeeklyStats,
): Array<{ text: string; type: "positive" | "warning" | "info" }> {
  const suggestions = [];

  // Check for low appointment days
  if (stats.totalAppointments < 10) {
    suggestions.push({
      text: "Consider adding more sessions to increase weekly revenue",
      type: "warning" as const,
    });
  }

  // Check for good performance
  if (stats.totalAppointments > 15) {
    suggestions.push({
      text: "Excellent week! Consider raising prices or adding premium services",
      type: "positive" as const,
    });
  }

  // Check for balanced schedule
  const daysWithAppointments = Object.values(
    appointments.reduce(
      (acc, appointment) => {
        const day = format(new Date(appointment.startTime), "EEEE");
        acc[day] = (acc[day] ?? 0) + 1;
        return acc;
      },
      {} as Record<string, number>,
    ),
  ).length;

  if (daysWithAppointments >= 5) {
    suggestions.push({
      text: "Well-balanced schedule across the week",
      type: "positive" as const,
    });
  } else if (daysWithAppointments <= 2) {
    suggestions.push({
      text: "Consider spreading appointments across more days",
      type: "info" as const,
    });
  }

  // Default suggestions if none above apply
  if (suggestions.length === 0) {
    suggestions.push(
      { text: "Great balance of sessions and rest time", type: "positive" as const },
      { text: "Consider client follow-ups for next week", type: "info" as const },
    );
  }

  return suggestions.slice(0, 3); // Limit to 3 suggestions
}


/* ===== src/app/(authorisedRoute)/omni-rhythm/agenda/page.tsx ===== */

import { Metadata } from "next";

export const metadata: Metadata = {
  title: "Rhythm Agenda - Omni Rhythm",
  description: "Daily agenda view of your wellness practice schedule",
};

export default function RhythmAgendaPage(): JSX.Element {
  return (
    <div className="container mx-auto p-6 space-y-8">
      <div className="text-left space-y-4 mb-8">
        <h1 className="text-4xl font-bold tracking-tight text-teal-900 dark:text-teal-100">
          Rhythm Agenda
        </h1>
        <p className="text-left text-muted-foreground text-lg mx-auto">
          Daily agenda view of your wellness practice schedule
        </p>
      </div>

      <div className="space-y-6">
        <div className="text-center py-12">
          <p className="text-lg text-muted-foreground">Rhythm Agenda view coming soon...</p>
          <p className="text-sm text-muted-foreground mt-2">
            This will show your daily schedule in agenda format
          </p>
        </div>
      </div>
    </div>
  );
}


/* ===== src/app/(authorisedRoute)/omni-rhythm/error.tsx ===== */

"use client";

import { useEffect } from "react";
import { Button } from "@/components/ui/button";
import { AlertTriangle, Calendar, RefreshCw } from "lucide-react";
import { logger } from "@/lib/observability";

export default function CalendarError({
  error,
  reset,
}: {
  error: Error & { digest?: string };
  reset: () => void;
}): JSX.Element {
  useEffect(() => {
    void logger.error(
      "Calendar route error occurred",
      {
        operation: "omni_rhythm_error_boundary",
        additionalData: {
          digest: error.digest,
          errorName: error.name,
          errorMessage: error.message,
        },
      },
      error,
    );
  }, [error]);

  return (
    <div className="flex min-h-[500px] flex-col items-center justify-center space-y-6 p-6">
      <div className="flex flex-col items-center space-y-4 text-center">
        <div className="flex items-center justify-center w-16 h-16 bg-destructive/10 rounded-full">
          <Calendar className="h-8 w-8 text-destructive" />
        </div>

        <div className="space-y-2">
          <div className="flex items-center justify-center space-x-2">
            <AlertTriangle className="h-5 w-5 text-destructive" />
            <h2 className="text-xl font-semibold">Calendar Error</h2>
          </div>

          <p className="text-muted-foreground max-w-md">
            We encountered an issue loading your calendar. This could be due to a connection problem
            or a temporary server issue.
          </p>

          {process.env.NODE_ENV === "development" && error.message && (
            <details className="mt-4 p-4 bg-muted rounded-md text-left">
              <summary className="cursor-pointer text-sm font-medium">
                Error Details (Development)
              </summary>
              <p className="mt-2 text-xs font-mono text-muted-foreground">{error.message}</p>
            </details>
          )}
        </div>
      </div>

      <div className="flex flex-col sm:flex-row gap-3">
        <Button onClick={reset} variant="default" className="min-w-[120px]">
          <RefreshCw className="h-4 w-4 mr-2" />
          Try Again
        </Button>

        <Button
          variant="outline"
          onClick={() => (window.location.href = "/omni-flow")}
          className="min-w-[120px]"
        >
          Go to Dashboard
        </Button>
      </div>
    </div>
  );
}


/* ===== src/app/(authorisedRoute)/omni-rhythm/integrations/page.tsx ===== */

import { Metadata } from "next";

export const metadata: Metadata = {
  title: "Rhythm Integrations - Omni Rhythm",
  description: "Manage your calendar and wellness platform integrations",
};

export default function RhythmIntegrationsPage(): JSX.Element {
  return (
    <div className="container mx-auto p-6 space-y-8">
      <div className="text-left space-y-4 mb-8">
        <h1 className="text-4xl font-bold tracking-tight text-teal-900 dark:text-teal-100">
          Rhythm Integrations
        </h1>
        <p className="text-left text-muted-foreground text-lg mx-auto">
          Manage your calendar and wellness platform integrations
        </p>
      </div>

      <div className="space-y-6">
        <div className="text-center py-12">
          <p className="text-lg text-muted-foreground">Rhythm Integrations coming soon...</p>
          <p className="text-sm text-muted-foreground mt-2">
            Connect Google Calendar, Apple Calendar, Outlook, and wellness platforms
          </p>
        </div>
      </div>
    </div>
  );
}


/* ===== src/app/(authorisedRoute)/omni-rhythm/loading.tsx ===== */

import { Calendar, Clock } from "lucide-react";
import { Skeleton } from "@/components/ui/skeleton";
import { Card, CardContent, CardHeader } from "@/components/ui/card";

export default function CalendarLoading(): JSX.Element {
  return (
    <div className="flex flex-col gap-6 p-6">
      {/* Header Loading */}
      <div className="flex flex-col gap-4 md:flex-row md:items-center md:justify-between">
        <div className="space-y-2">
          <Skeleton className="h-8 w-32" />
          <Skeleton className="h-4 w-64" />
        </div>
        <div className="flex items-center gap-2">
          <Skeleton className="h-9 w-24" />
          <Skeleton className="h-9 w-28" />
        </div>
      </div>

      {/* Calendar Controls Loading */}
      <div className="flex flex-col gap-4 md:flex-row md:items-center md:justify-between">
        <div className="flex items-center gap-2">
          <Skeleton className="h-9 w-9" />
          <Skeleton className="h-6 w-40" />
          <Skeleton className="h-9 w-9" />
        </div>

        <div className="flex items-center gap-2">
          <Skeleton className="h-9 w-60" />
          <Skeleton className="h-9 w-20" />
          <Skeleton className="h-9 w-16" />
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
        {/* Calendar Grid Loading */}
        <div className="lg:col-span-3">
          <Card>
            <CardContent className="p-6">
              {/* Calendar header days */}
              <div className="grid grid-cols-7 gap-1 mb-4">
                {Array.from({ length: 7 }, (_, i) => (
                  <Skeleton key={i} className="h-8 w-full" />
                ))}
              </div>

              {/* Calendar grid */}
              <div className="grid grid-cols-7 gap-1">
                {Array.from({ length: 35 }, (_, i) => (
                  <Skeleton key={i} className="aspect-square" />
                ))}
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Sidebar Loading */}
        <div className="space-y-6">
          {/* Upcoming Events Loading */}
          <Card>
            <CardHeader>
              <div className="flex items-center gap-2">
                <Clock className="h-5 w-5 text-muted-foreground animate-pulse" />
                <Skeleton className="h-5 w-32" />
              </div>
            </CardHeader>
            <CardContent className="space-y-4">
              {Array.from({ length: 3 }, (_, i) => (
                <div key={i} className="flex items-start gap-3">
                  <Skeleton className="w-3 h-3 rounded-full mt-1.5" />
                  <div className="flex-1 space-y-2">
                    <Skeleton className="h-4 w-full" />
                    <Skeleton className="h-3 w-24" />
                  </div>
                </div>
              ))}

              <div className="pt-4 border-t">
                <Skeleton className="h-8 w-full" />
              </div>
            </CardContent>
          </Card>

          {/* Calendar Types Loading */}
          <Card>
            <CardHeader>
              <div className="flex items-center gap-2">
                <Calendar className="h-5 w-5 text-muted-foreground animate-pulse" />
                <Skeleton className="h-5 w-20" />
              </div>
            </CardHeader>
            <CardContent className="space-y-3">
              {Array.from({ length: 3 }, (_, i) => (
                <div key={i} className="flex items-center justify-between">
                  <div className="flex items-center gap-2">
                    <Skeleton className="w-3 h-3 rounded-full" />
                    <Skeleton className="h-4 w-16" />
                  </div>
                  <Skeleton className="h-5 w-6 rounded-full" />
                </div>
              ))}

              <div className="pt-3 border-t">
                <Skeleton className="h-8 w-full" />
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
}


/* ===== src/app/(authorisedRoute)/omni-rhythm/not-found.tsx ===== */

import { Calendar, Home, ArrowLeft } from "lucide-react";
import { Button } from "@/components/ui/button";
import Link from "next/link";

export default function CalendarNotFound(): JSX.Element {
  return (
    <div className="flex min-h-[500px] flex-col items-center justify-center space-y-6 p-6">
      <div className="flex flex-col items-center space-y-4 text-center">
        <div className="flex items-center justify-center w-16 h-16 bg-muted rounded-full">
          <Calendar className="h-8 w-8 text-muted-foreground" />
        </div>

        <div className="space-y-2">
          <h2 className="text-2xl font-semibold">Calendar Not Found</h2>
          <p className="text-muted-foreground max-w-md">
            The calendar page or resource you&apos;re looking for doesn&apos;t exist or may have
            been moved.
          </p>
        </div>
      </div>

      <div className="flex flex-col sm:flex-row gap-3">
        <Button asChild variant="default" className="min-w-[140px]">
          <Link href="/calendar">
            <Calendar className="h-4 w-4 mr-2" />
            Go to Calendar
          </Link>
        </Button>

        <Button asChild variant="outline" className="min-w-[140px]">
          <Link href="/omni-flow">
            <Home className="h-4 w-4 mr-2" />
            Back to Dashboard
          </Link>
        </Button>
      </div>

      <Button
        variant="ghost"
        size="sm"
        onClick={() => window.history.back()}
        className="text-muted-foreground"
      >
        <ArrowLeft className="h-4 w-4 mr-2" />
        Go Back
      </Button>
    </div>
  );
}


/* ===== src/app/(authorisedRoute)/omni-rhythm/page.tsx ===== */

import { Metadata } from "next";
import { OmniRhythmPage } from "./_components/OmniRhythmPage";

export const metadata: Metadata = {
  title: "OmniCRM",
  description: "Rhythm: Intelligent insights about your wellness practice calendar and schedule",
};

export default function Page(): JSX.Element {
  return <OmniRhythmPage />;
}


/* ===== src/app/(authorisedRoute)/omni-rhythm/schedule/page.tsx ===== */

import { Metadata } from "next";

export const metadata: Metadata = {
  title: "Rhythm Schedule - Omni Rhythm",
  description: "Calendar schedule view of your wellness practice",
};

export default function RhythmSchedulePage(): JSX.Element {
  return (
    <div className="container mx-auto p-6 space-y-8">
      <div className="text-left space-y-4 mb-8">
        <h1 className="text-4xl font-bold tracking-tight text-teal-900 dark:text-teal-100">
          Rhythm Schedule
        </h1>
        <p className="text-left text-muted-foreground text-lg mx-auto">
          Calendar schedule view of your wellness practice
        </p>
      </div>

      <div className="space-y-6">
        <div className="text-center py-12">
          <p className="text-lg text-muted-foreground">Rhythm Schedule view coming soon...</p>
          <p className="text-sm text-muted-foreground mt-2">
            This will show your calendar in schedule format with time slots
          </p>
        </div>
      </div>
    </div>
  );
}


/* ===== src/app/(authorisedRoute)/settings/_components/AccountDataManagement.tsx ===== */

"use client";

import { useState } from "react";
import { Download, Trash2, AlertTriangle, Shield, FileText } from "lucide-react";
import {
  Button,
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
  Alert,
  AlertDescription,
  Badge,
} from "@/components/ui";

import { DataExportDialog } from "./DataExportDialog";
import { AccountDeletionDialog } from "./AccountDeletionDialog";

export function AccountDataManagement(): JSX.Element {
  const [showExportDialog, setShowExportDialog] = useState(false);
  const [showDeletionDialog, setShowDeletionDialog] = useState(false);

  return (
    <div className="space-y-6">
      {/* Privacy Notice */}
      <Alert className="bg-sky-500/10 border-sky-500/20">
        <Shield className="h-4 w-4" />
        <AlertDescription>
          Your privacy is important to us. You have full control over your data and can export or
          delete it at any time. All operations comply with GDPR and other privacy regulations.
        </AlertDescription>
      </Alert>

      {/* Data Export Section */}
      <Card className="bg-sky-500/10 border-sky-500/20">
        <CardHeader>
          <div className="flex items-center gap-2 text-sky-500">
            <Download className="h-5 w-5" />
            <CardTitle>Export Your Data</CardTitle>
          </div>
          <CardDescription>
            Download a complete copy of all your data in JSON format. This includes contacts,
            interactions, AI states, and manual overrides.
          </CardDescription>
        </CardHeader>
        <CardContent className="text-sky-500 space-y-4">
          <div className="flex items-center justify-between">
            <div>
              <p className="font-medium">Complete Data Export</p>
              <p className="text-sm text-muted-foreground">
                Includes all contacts, interactions, AI analysis, and settings
              </p>
            </div>
            <Button onClick={() => setShowExportDialog(true)} variant="outline" className="gap-2">
              <Download className="h-4 w-4" />
              Export Data
            </Button>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 pt-4 border-t">
            <div className="text-center">
              <Badge variant="outline" className="mb-2 text-violet-400">
                <FileText className="h-3 w-3 mr-1" />
                Contacts
              </Badge>
              <p className="text-sm text-muted-foreground">All contact information and profiles</p>
            </div>
            <div className="text-center">
              <Badge variant="outline" className="mb-2 text-violet-400">
                <FileText className="h-3 w-3 mr-1" />
                Interactions
              </Badge>
              <p className="text-sm text-muted-foreground">Communication history and logs</p>
            </div>
            <div className="text-center">
              <Badge variant="outline" className="mb-2 text-violet-400">
                <FileText className="h-3 w-3 mr-1" />
                AI Analysis
              </Badge>
              <p className="text-sm text-muted-foreground">AI-generated insights and overrides</p>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Data Deletion Section */}
      <Card className="bg-red-500/10 border-red-500/20">
        <CardHeader>
          <div className="flex items-center gap-2">
            <Trash2 className="h-5 w-5 text-destructive" />
            <CardTitle className="text-destructive">Delete Your Account</CardTitle>
          </div>
          <CardDescription>
            Permanently delete your account and all associated data. This action cannot be undone.
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <Alert className="bg-red-500/20 border-red-500/30">
            <AlertTriangle className="h-4 w-4" />
            <AlertDescription>
              <strong>Warning:</strong> Account deletion is permanent and irreversible. All your
              contacts, interactions, AI analysis, and settings will be permanently removed from our
              systems.
            </AlertDescription>
          </Alert>

          <div className="space-y-3">
            <h4 className="font-medium">What will be deleted:</h4>
            <ul className="space-y-1 text-sm text-muted-foreground">
              <li>• All contact profiles and information</li>
              <li>• Complete interaction history</li>
              <li>• AI-generated insights and analysis</li>
              <li>• Manual overrides and customizations</li>
              <li>• Account settings and preferences</li>
              <li>• Uploaded files and attachments</li>
            </ul>
          </div>

          <div className="space-y-3">
            <h4 className="font-medium">Before you delete:</h4>
            <ul className="space-y-1 text-sm text-muted-foreground">
              <li>• Export your data if you want to keep a copy</li>
              <li>• Cancel any active subscriptions</li>
              <li>• Inform team members if this is a shared account</li>
            </ul>
          </div>

          <div className="pt-4 border-t">
            <Button
              onClick={() => setShowDeletionDialog(true)}
              variant="destructive"
              className="gap-2"
            >
              <Trash2 className="h-4 w-4" />
              Delete My Account
            </Button>
          </div>
        </CardContent>
      </Card>

      {/* Privacy Information */}
      <Card className="bg-sky-500/10 border-sky-500/20">
        <CardHeader>
          <CardTitle className="text-sm text-sky-500">Privacy & Data Retention</CardTitle>
        </CardHeader>
        <CardContent className="space-y-3 text-sm text-muted-foreground">
          <p>
            <strong>Backup Retention:</strong> Deleted data may remain in encrypted backups for up
            to 30 days before being permanently purged from all systems.
          </p>
          <p>
            <strong>Third-party Services:</strong> We will also request deletion of your data from
            integrated services like email providers and analytics platforms.
          </p>
          <p>
            <strong>Audit Logs:</strong> For security and compliance, we maintain minimal audit logs
            of deletion requests (without personal information) for regulatory purposes.
          </p>
        </CardContent>
      </Card>

      {/* Dialogs */}
      <DataExportDialog open={showExportDialog} onOpenChange={setShowExportDialog} />
      <AccountDeletionDialog open={showDeletionDialog} onOpenChange={setShowDeletionDialog} />
    </div>
  );
}


/* ===== src/app/(authorisedRoute)/settings/_components/AccountDeletionDialog.tsx ===== */

"use client";

import { useState } from "react";
import { Trash2, Loader2, AlertTriangle, Download } from "lucide-react";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  Button,
  Input,
  Label,
  Alert,
  AlertDescription,
  Checkbox,
} from "@/components/ui";
import { apiClient } from "@/lib/api/client";
import { useRouter } from "next/navigation";

interface AccountDeletionDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
}

export function AccountDeletionDialog({
  open,
  onOpenChange,
}: AccountDeletionDialogProps): JSX.Element {
  const [step, setStep] = useState<"warning" | "export" | "confirm" | "deleting">("warning");
  const [confirmationText, setConfirmationText] = useState("");
  const [hasExported, setHasExported] = useState(false);
  const [acknowledgeWarning, setAcknowledgeWarning] = useState(false);
  const [deleteError, setDeleteError] = useState<string | null>(null);
  const [isExporting, setIsExporting] = useState(false);
  const [isDeleting, setIsDeleting] = useState(false);

  const router = useRouter();

  const handleExportBeforeDelete = async (): Promise<void> => {
    try {
      setIsExporting(true);
      // Export contacts as a minimal dataset for now
      const contacts = await apiClient.get<{ items: unknown[]; total: number }>(
        apiClient.buildUrl("/api/contacts", { page: 1, pageSize: 1000 }),
      );

      const payload = {
        exportedAt: new Date().toISOString(),
        version: 1,
        contacts: contacts.items,
        totals: { contacts: contacts.total },
      };

      const blob = new Blob([JSON.stringify(payload, null, 2)], {
        type: "application/json",
      });
      const url = URL.createObjectURL(blob);
      const link = document.createElement("a");
      link.href = url;
      link.download = `codexcrm-final-export-${new Date().toISOString().split("T")[0]}.json`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      URL.revokeObjectURL(url);

      setHasExported(true);
    } catch (e: unknown) {
      // Export failure should not crash the dialog; show inline error
      const err = e as { message?: string };
      setDeleteError(err.message ?? "Failed to export data");
    } finally {
      setIsExporting(false);
    }
  };

  const handleFinalDelete = async (): Promise<void> => {
    if (confirmationText === "DELETE MY DATA") {
      setStep("deleting");
      setDeleteError(null);
      setIsDeleting(true);

      try {
        const response = await fetch("/api/user/delete", {
          method: "DELETE",
          credentials: "same-origin",
          headers: {
            "Content-Type": "application/json",
            "x-csrf-token":
              document.cookie
                .split("; ")
                .find((row) => row.startsWith("csrf="))
                ?.split("=")[1] ?? "",
          },
          body: JSON.stringify({
            confirmation: "DELETE MY DATA",
            acknowledgeIrreversible: true,
          }),
        });

        if (!response.ok) {
          const errorText = await response.text();
          throw new Error(`Deletion failed: ${errorText}`);
        }

        // Deletion successful - redirect after short delay
        setTimeout(() => {
          router.push("/auth/goodbye");
        }, 1200);
      } catch (error) {
        const msg = error instanceof Error ? error.message : String(error);
        setDeleteError(msg);
        setStep("confirm");
        setIsDeleting(false);
      }
    }
  };

  const handleClose = (): void => {
    if (step !== "deleting") {
      setStep("warning");
      setConfirmationText("");
      setHasExported(false);
      setAcknowledgeWarning(false);
      setDeleteError(null);
      onOpenChange(false);
    }
  };

  const isConfirmationValid = confirmationText === "DELETE MY DATA";

  return (
    <Dialog open={open} onOpenChange={handleClose}>
      <DialogContent className="sm:max-w-lg">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2 text-destructive">
            <Trash2 className="h-5 w-5" />
            Delete Account
          </DialogTitle>
          <DialogDescription>
            {step === "warning" && "This action will permanently delete your account and all data."}
            {step === "export" && "Export your data before deletion (recommended)."}
            {step === "confirm" && "Final confirmation required to delete your account."}
            {step === "deleting" && "Deleting your account and all associated data..."}
          </DialogDescription>
        </DialogHeader>

        <div className="space-y-4">
          {step === "warning" && (
            <>
              <Alert variant="destructive">
                <AlertTriangle className="h-4 w-4" />
                <AlertDescription>
                  <strong>Warning:</strong> This action is permanent and cannot be undone. All your
                  data will be permanently deleted from our systems.
                </AlertDescription>
              </Alert>

              <div className="space-y-3">
                <h4 className="font-medium">What will be permanently deleted:</h4>
                <ul className="space-y-1 text-sm text-muted-foreground pl-4">
                  <li>• All contact profiles and information</li>
                  <li>• Complete interaction history and communications</li>
                  <li>• AI-generated insights and analysis</li>
                  <li>• Manual overrides and customizations</li>
                  <li>• Account settings and preferences</li>
                  <li>• Uploaded files and attachments</li>
                </ul>
              </div>

              <div className="flex items-center space-x-2">
                <Checkbox
                  id="acknowledge"
                  checked={acknowledgeWarning}
                  onCheckedChange={(checked: boolean | "indeterminate") =>
                    setAcknowledgeWarning(checked === true)
                  }
                />
                <Label htmlFor="acknowledge" className="text-sm">
                  I understand this action is permanent and cannot be undone
                </Label>
              </div>
            </>
          )}

          {step === "export" && (
            <>
              <Alert>
                <Download className="h-4 w-4" />
                <AlertDescription>
                  <strong>Recommended:</strong> Export your data before deletion so you have a copy
                  for your records.
                </AlertDescription>
              </Alert>

              <div className="space-y-3">
                <Button
                  onClick={handleExportBeforeDelete}
                  disabled={isExporting}
                  className="w-full gap-2"
                  variant="outline"
                >
                  {isExporting ? (
                    <>
                      <Loader2 className="h-4 w-4 animate-spin" />
                      Exporting...
                    </>
                  ) : (
                    <>
                      <Download className="h-4 w-4" />
                      Export My Data
                    </>
                  )}
                </Button>

                {hasExported && (
                  <Alert>
                    <AlertDescription>
                      ✓ Data exported successfully. You can now proceed with deletion.
                    </AlertDescription>
                  </Alert>
                )}
              </div>
            </>
          )}

          {step === "confirm" && (
            <>
              <Alert variant="destructive">
                <AlertTriangle className="h-4 w-4" />
                <AlertDescription>
                  <strong>Final Warning:</strong> You are about to permanently delete your account.
                  This cannot be undone.
                </AlertDescription>
              </Alert>

              <div className="space-y-3">
                <Label htmlFor="confirmation">
                  Type <strong>DELETE MY DATA</strong> to confirm:
                </Label>
                <Input
                  id="confirmation"
                  value={confirmationText}
                  onChange={(e) => setConfirmationText(e.target.value)}
                  placeholder="DELETE MY DATA"
                  className={isConfirmationValid ? "border-green-500" : ""}
                />
              </div>

              {deleteError && (
                <Alert variant="destructive">
                  <AlertTriangle className="h-4 w-4" />
                  <AlertDescription>
                    <strong>Deletion failed:</strong> {deleteError}
                  </AlertDescription>
                </Alert>
              )}
            </>
          )}

          {step === "deleting" && (
            <div className="space-y-3 text-center">
              <Loader2 className="h-8 w-8 animate-spin mx-auto" />
              <p className="text-sm">Deleting your account and all associated data...</p>
              <p className="text-xs text-muted-foreground">
                This may take a few moments. Please do not close this window.
              </p>
            </div>
          )}
        </div>

        <DialogFooter className="gap-2">
          {step === "warning" && (
            <>
              <Button variant="outline" onClick={handleClose}>
                Cancel
              </Button>
              <Button
                onClick={() => setStep("export")}
                disabled={!acknowledgeWarning}
                variant="destructive"
              >
                Continue
              </Button>
            </>
          )}

          {step === "export" && (
            <>
              <Button variant="outline" onClick={handleClose}>
                Cancel
              </Button>
              <Button onClick={() => setStep("confirm")} variant="destructive">
                {hasExported ? "Proceed to Delete" : "Skip Export & Delete"}
              </Button>
            </>
          )}

          {step === "confirm" && (
            <>
              <Button variant="outline" onClick={handleClose}>
                Cancel
              </Button>
              <Button
                onClick={handleFinalDelete}
                disabled={!isConfirmationValid || isDeleting}
                variant="destructive"
                className="gap-2"
              >
                {isDeleting ? (
                  <>
                    <Loader2 className="h-4 w-4 animate-spin" />
                    Deleting...
                  </>
                ) : (
                  <>
                    <Trash2 className="h-4 w-4" />
                    Delete My Account
                  </>
                )}
              </Button>
            </>
          )}
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}


/* ===== src/app/(authorisedRoute)/settings/_components/DataExportDialog.tsx ===== */

"use client";

import { useState } from "react";
import { Download, Loader2, CheckCircle, AlertCircle } from "lucide-react";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  Button,
  Alert,
  AlertDescription,
} from "@/components/ui";

interface DataExportDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
}

export function DataExportDialog({ open, onOpenChange }: DataExportDialogProps): JSX.Element {
  const [isExporting, setIsExporting] = useState(false);
  const [exportComplete, setExportComplete] = useState(false);
  const [exportError, setExportError] = useState<string | null>(null);

  const handleExport = (): void => {
    setIsExporting(true);
    setExportError(null);
    setExportComplete(false);
    void (async (): Promise<void> => {
      try {
        // Use the comprehensive data export API endpoint
        const response = await fetch("/api/user/export", {
          method: "GET",
          credentials: "same-origin",
          headers: {
            "x-csrf-token":
              document.cookie
                .split("; ")
                .find((row) => row.startsWith("csrf="))
                ?.split("=")[1] ?? "",
          },
        });

        if (!response.ok) {
          throw new Error(`Export failed: ${response.statusText}`);
        }

        // Get the filename from Content-Disposition header or use default
        const contentDisposition = response.headers.get("Content-Disposition");
        const filenameMatch = contentDisposition?.match(/filename="([^"]+)"/);
        const filename =
          filenameMatch?.[1] ??
          `omnicrm-data-export-${new Date().toISOString().split("T")[0]}.json`;

        const blob = await response.blob();
        const url = URL.createObjectURL(blob);
        const link = document.createElement("a");
        link.href = url;
        link.download = filename;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        URL.revokeObjectURL(url);

        setExportComplete(true);
      } catch (error) {
        const msg = error instanceof Error ? error.message : String(error);
        setExportError(msg);
      } finally {
        setIsExporting(false);
      }
    })();
  };

  const handleClose = (): void => {
    if (!isExporting) {
      setExportComplete(false);
      setExportError(null);
      onOpenChange(false);
    }
  };

  return (
    <Dialog open={open} onOpenChange={handleClose}>
      <DialogContent className="sm:max-w-md">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <Download className="h-5 w-5" />
            Export Your Data
          </DialogTitle>
          <DialogDescription>
            Download a complete copy of all your data in JSON format.
          </DialogDescription>
        </DialogHeader>

        <div className="space-y-4">
          {!isExporting && !exportComplete && !exportError && (
            <Alert>
              <AlertCircle className="h-4 w-4" />
              <AlertDescription>
                This will create a JSON file containing all your contacts, interactions, AI
                analysis, and settings. The file will be downloaded to your device.
              </AlertDescription>
            </Alert>
          )}

          {isExporting && (
            <div className="space-y-3">
              <div className="flex items-center gap-2">
                <Loader2 className="h-4 w-4 animate-spin" />
                <span className="text-sm">Preparing your data export...</span>
              </div>
              <div className="h-1.5 w-full rounded bg-muted overflow-hidden">
                <div className="h-full w-1/3 animate-pulse bg-primary/60" />
              </div>
              <p className="text-xs text-muted-foreground">
                This may take a few moments depending on the amount of data.
              </p>
            </div>
          )}

          {exportComplete && (
            <Alert>
              <CheckCircle className="h-4 w-4 text-green-600" />
              <AlertDescription>
                <strong>Export completed successfully!</strong> Your data has been downloaded as a
                JSON file. You can now safely close this dialog.
              </AlertDescription>
            </Alert>
          )}

          {exportError && (
            <Alert variant="destructive">
              <AlertCircle className="h-4 w-4" />
              <AlertDescription>
                <strong>Export failed:</strong> {exportError}
              </AlertDescription>
            </Alert>
          )}
        </div>

        <DialogFooter className="gap-2">
          <Button variant="outline" onClick={handleClose} disabled={isExporting}>
            {exportComplete ? "Close" : "Cancel"}
          </Button>
          {!exportComplete && (
            <Button onClick={handleExport} disabled={isExporting} className="gap-2">
              {isExporting ? (
                <>
                  <Loader2 className="h-4 w-4 animate-spin" />
                  Exporting...
                </>
              ) : (
                <>
                  <Download className="h-4 w-4" />
                  Export Data
                </>
              )}
            </Button>
          )}
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}


/* ===== src/app/(authorisedRoute)/settings/_components/GmailSyncStatusPanel.tsx ===== */

"use client";

import { useState, useEffect } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Progress } from "@/components/ui/progress";
import { Badge } from "@/components/ui/badge";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Mail, Play, CheckCircle, XCircle, Clock, AlertCircle } from "lucide-react";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { apiClient } from "@/lib/api/client";

// Job status tracking types
interface JobStatus {
  id: string;
  kind: string;
  status: "queued" | "running" | "completed" | "error";
  progress?: number;
  message?: string;
  batchId?: string;
  createdAt: string;
  updatedAt: string;
  totalEmails?: number;
  processedEmails?: number;
  newEmails?: number;
  chunkSize?: number;
  chunksTotal?: number;
  chunksProcessed?: number;
}

interface SyncJobsResponse {
  jobs: JobStatus[];
  currentBatch?: string;
  totalEmails?: number;
  processedEmails?: number;
}

// Job flow status phases for Gmail sync
type SyncPhase =
  | "idle"
  | "starting"
  | "syncing_gmail"
  | "processing_data"
  | "structuring_data"
  | "embedding_data"
  | "completed"
  | "error";

interface SyncPhaseStatus {
  phase: SyncPhase;
  message: string;
  progress: number;
  isActive: boolean;
  isComplete: boolean;
  isError: boolean;
}

export function GmailSyncStatusPanel(): JSX.Element {
  const [isPolling, setIsPolling] = useState(false);
  const [currentBatchId, setCurrentBatchId] = useState<string | null>(null);
  const [syncPhase, setSyncPhase] = useState<SyncPhase>("idle");
  const [emailsProcessed, setEmailsProcessed] = useState(0);
  const [totalEmails, setTotalEmails] = useState(0);
  const [newEmails, setNewEmails] = useState(0);

  const queryClient = useQueryClient();

  // Poll for job status updates when sync is active
  const { data: jobsData, error: jobsError } = useQuery({
    queryKey: ["jobs", "status", currentBatchId],
    queryFn: async (): Promise<SyncJobsResponse> =>
      await apiClient.get<SyncJobsResponse>("/api/jobs/status", { showErrorToast: false }),
    enabled: isPolling && !!currentBatchId,
    refetchInterval: 2000, // Poll every 2 seconds during sync
    staleTime: 1000,
  });

  // Mutation to start Gmail sync
  const startSyncMutation = useMutation({
    mutationFn: async () =>
      await apiClient.post<{ batchId: string }>(
        "/api/sync/approve/gmail",
        {},
        {
          showErrorToast: false,
          errorToastTitle: "Failed to start Gmail sync",
        },
      ),
    onSuccess: (data) => {
      setCurrentBatchId(data.batchId);
      setIsPolling(true);
      setSyncPhase("starting");
      setEmailsProcessed(0);
      setTotalEmails(0);
      setNewEmails(0);

      // Invalidate sync status to refresh connection state
      void queryClient.invalidateQueries({ queryKey: ["sync", "status"] });
    },
    onError: (error) => {
      console.error("Gmail sync error:", error);
      setSyncPhase("error");
      setIsPolling(false);
    },
  });

  // Update sync phase based on job status
  useEffect(() => {
    if (!jobsData?.jobs.length) return;

    const jobs = jobsData.jobs;
    const gmailSyncJob = jobs.find((job) => job.kind === "google_gmail_sync");
    const normalizeJob = jobs.find((job) => job.kind === "normalize_google_email");
    const embedJob = jobs.find((job) => job.kind === "embed");
    const extractJob = jobs.find((job) => job.kind === "extract_contacts");

    // Update totals if available
    if (gmailSyncJob?.totalEmails) setTotalEmails(gmailSyncJob.totalEmails);
    if (gmailSyncJob?.processedEmails) setEmailsProcessed(gmailSyncJob.processedEmails);
    if (gmailSyncJob?.newEmails !== undefined) setNewEmails(gmailSyncJob.newEmails);

    // Determine current phase based on job statuses
    if (
      gmailSyncJob?.status === "error" ||
      normalizeJob?.status === "error" ||
      embedJob?.status === "error"
    ) {
      setSyncPhase("error");
      setIsPolling(false);
    } else if (gmailSyncJob?.status === "running") {
      setSyncPhase("syncing_gmail");
    } else if (gmailSyncJob?.status === "completed" && normalizeJob?.status === "running") {
      setSyncPhase("processing_data");
    } else if (normalizeJob?.status === "completed" && extractJob?.status === "running") {
      setSyncPhase("structuring_data");
    } else if (extractJob?.status === "completed" && embedJob?.status === "running") {
      setSyncPhase("embedding_data");
    } else if (embedJob?.status === "completed") {
      setSyncPhase("completed");
      setIsPolling(false);
      // Auto-clear after 10 seconds
      setTimeout(() => {
        setSyncPhase("idle");
        setCurrentBatchId(null);
      }, 10000);
    }
  }, [jobsData]);

  // Kick the job runner once when polling starts
  useEffect(() => {
    if (!isPolling) return;
    void apiClient.post<{ message: string }>(
      "/api/jobs/runner",
      {},
      { showErrorToast: false, errorToastTitle: "Job runner failed" },
    );
  }, [isPolling]);

  const getSyncPhaseStatus = (phase: SyncPhase): SyncPhaseStatus => {
    const phases: Record<SyncPhase, SyncPhaseStatus> = {
      idle: {
        phase: "idle",
        message: "Ready to sync Gmail data",
        progress: 0,
        isActive: false,
        isComplete: false,
        isError: false,
      },
      starting: {
        phase: "starting",
        message: "Initializing Gmail sync...",
        progress: 5,
        isActive: true,
        isComplete: false,
        isError: false,
      },
      syncing_gmail: {
        phase: "syncing_gmail",
        message:
          totalEmails > 0
            ? `Checking ${emailsProcessed}/${totalEmails} emails • ${newEmails} new found`
            : `Checking for new Gmail messages...`,
        progress: totalEmails > 0 ? Math.min((emailsProcessed / totalEmails) * 30, 30) + 10 : 15,
        isActive: true,
        isComplete: false,
        isError: false,
      },
      processing_data: {
        phase: "processing_data",
        message: "Processing Gmail data...",
        progress: 45,
        isActive: true,
        isComplete: false,
        isError: false,
      },
      structuring_data: {
        phase: "structuring_data",
        message: "Structuring data...",
        progress: 65,
        isActive: true,
        isComplete: false,
        isError: false,
      },
      embedding_data: {
        phase: "embedding_data",
        message: "Embedding data for AI analysis...",
        progress: 85,
        isActive: true,
        isComplete: false,
        isError: false,
      },
      completed: {
        phase: "completed",
        message:
          newEmails > 0
            ? `Sync completed • ${newEmails} new emails processed`
            : `Sync completed • No new emails found`,
        progress: 100,
        isActive: false,
        isComplete: true,
        isError: false,
      },
      error: {
        phase: "error",
        message: "Sync failed - please try again",
        progress: 0,
        isActive: false,
        isComplete: false,
        isError: true,
      },
    };

    return phases[phase];
  };

  const phaseStatus = getSyncPhaseStatus(syncPhase);
  const isSyncing = isPolling || startSyncMutation.isPending;

  const getStatusIcon = (): JSX.Element => {
    if (phaseStatus.isError) return <XCircle className="h-5 w-5 text-red-500" />;
    if (phaseStatus.isComplete) return <CheckCircle className="h-5 w-5 text-green-500" />;
    if (phaseStatus.isActive) return <Clock className="h-5 w-5 text-blue-500 animate-pulse" />;
    return <Mail className="h-5 w-5 text-gray-500" />;
  };

  const getStatusBadge = (): JSX.Element => {
    if (phaseStatus.isError) return <Badge variant="destructive">Error</Badge>;
    if (phaseStatus.isComplete)
      return (
        <Badge variant="default" className="bg-green-500">
          Complete
        </Badge>
      );
    if (phaseStatus.isActive)
      return (
        <Badge variant="default" className="bg-blue-500">
          Processing
        </Badge>
      );
    return <Badge variant="secondary">Ready</Badge>;
  };

  return (
    <Card className="bg-teal-500/10 border-teal-500/20">
      <CardHeader>
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-2 text-teal-500">
            {getStatusIcon()}
            <CardTitle>Gmail Data Ingestion</CardTitle>
          </div>
          {getStatusBadge()}
        </div>
        <CardDescription>
          Sync and process Gmail data for AI analysis. We process up to 2,000 emails per batch in
          chunks of 50 to ensure optimal performance.
        </CardDescription>
      </CardHeader>

      <CardContent className="space-y-4">
        {/* Status Message */}
        <div className="flex items-center justify-between">
          <p className="text-sm font-medium text-gray-900 dark:text-gray-100">
            {phaseStatus.message}
          </p>
          {totalEmails > 0 && syncPhase === "syncing_gmail" && (
            <span className="text-xs text-gray-500">
              {emailsProcessed}/{totalEmails} checked • {newEmails} new
            </span>
          )}
        </div>

        {/* Progress Bar */}
        {phaseStatus.isActive && (
          <div className="space-y-2">
            <Progress
              value={phaseStatus.progress}
              className="h-3 transition-all duration-500 ease-in-out"
            />
            <p className="text-xs text-gray-500 text-center">
              {Math.round(phaseStatus.progress)}% complete
            </p>
          </div>
        )}

        {/* Error Alert */}
        {phaseStatus.isError && (
          <Alert variant="destructive">
            <AlertCircle className="h-4 w-4" />
            <AlertDescription>
              {jobsError?.message ??
                "An error occurred during sync. Please check your Gmail connection and try again."}
            </AlertDescription>
          </Alert>
        )}

        {/* Success Alert */}
        {phaseStatus.isComplete && (
          <Alert className="border-green-200 text-green-800 bg-green-50">
            <CheckCircle className="h-4 w-4" />
            <AlertDescription>
              {newEmails > 0
                ? `Successfully processed ${newEmails} new emails. Your data is now available for AI analysis.`
                : `Gmail sync completed. All your emails are up to date - no new messages found.`}
            </AlertDescription>
          </Alert>
        )}

        {/* Action Button */}
        <div className="flex justify-center pt-2">
          <Button
            onClick={() => startSyncMutation.mutate()}
            disabled={isSyncing || phaseStatus.isActive}
            variant={phaseStatus.isError ? "destructive" : "default"}
            className="gap-2"
          >
            <Play className="h-4 w-4" />
            {isSyncing ? "Syncing..." : phaseStatus.isError ? "Retry Sync" : "Start Gmail Sync"}
          </Button>
        </div>

        {/* Processing Details */}
        {phaseStatus.isActive && (
          <div className="bg-gray-50 dark:bg-gray-800 rounded-lg p-4 space-y-3 border border-gray-200 dark:border-gray-700 transition-all duration-300">
            <h4 className="text-sm font-medium text-gray-900 dark:text-gray-100">
              Processing Steps:
            </h4>
            <div className="space-y-2 text-xs">
              <div
                className={`flex items-center gap-3 transition-all duration-300 ${syncPhase === "syncing_gmail" ? "text-blue-600 font-medium" : syncPhase === "processing_data" || syncPhase === "structuring_data" || syncPhase === "embedding_data" || syncPhase === "completed" ? "text-green-600" : "text-gray-600 dark:text-gray-400"}`}
              >
                <div
                  className={`w-3 h-3 rounded-full transition-all duration-300 ${syncPhase === "syncing_gmail" ? "bg-blue-500 animate-pulse shadow-blue-500/50 shadow-lg" : syncPhase === "processing_data" || syncPhase === "structuring_data" || syncPhase === "embedding_data" || syncPhase === "completed" ? "bg-green-500" : "bg-gray-300"}`}
                />
                <span className="flex-1">Gmail Sync</span>
                {(syncPhase === "processing_data" ||
                  syncPhase === "structuring_data" ||
                  syncPhase === "embedding_data" ||
                  syncPhase === "completed") && <CheckCircle className="w-4 h-4 text-green-500" />}
              </div>
              <div
                className={`flex items-center gap-3 transition-all duration-300 ${syncPhase === "processing_data" ? "text-blue-600 font-medium" : syncPhase === "structuring_data" || syncPhase === "embedding_data" || syncPhase === "completed" ? "text-green-600" : "text-gray-600 dark:text-gray-400"}`}
              >
                <div
                  className={`w-3 h-3 rounded-full transition-all duration-300 ${syncPhase === "processing_data" ? "bg-blue-500 animate-pulse shadow-blue-500/50 shadow-lg" : syncPhase === "structuring_data" || syncPhase === "embedding_data" || syncPhase === "completed" ? "bg-green-500" : "bg-gray-300"}`}
                />
                <span className="flex-1">Processing Gmail</span>
                {(syncPhase === "structuring_data" ||
                  syncPhase === "embedding_data" ||
                  syncPhase === "completed") && <CheckCircle className="w-4 h-4 text-green-500" />}
              </div>
              <div
                className={`flex items-center gap-3 transition-all duration-300 ${syncPhase === "structuring_data" ? "text-blue-600 font-medium" : syncPhase === "embedding_data" || syncPhase === "completed" ? "text-green-600" : "text-gray-600 dark:text-gray-400"}`}
              >
                <div
                  className={`w-3 h-3 rounded-full transition-all duration-300 ${syncPhase === "structuring_data" ? "bg-blue-500 animate-pulse shadow-blue-500/50 shadow-lg" : syncPhase === "embedding_data" || syncPhase === "completed" ? "bg-green-500" : "bg-gray-300"}`}
                />
                <span className="flex-1">Structuring Data</span>
                {(syncPhase === "embedding_data" || syncPhase === "completed") && (
                  <CheckCircle className="w-4 h-4 text-green-500" />
                )}
              </div>
              <div
                className={`flex items-center gap-3 transition-all duration-300 ${syncPhase === "embedding_data" ? "text-blue-600 font-medium" : syncPhase === "completed" ? "text-green-600" : "text-gray-600 dark:text-gray-400"}`}
              >
                <div
                  className={`w-3 h-3 rounded-full transition-all duration-300 ${syncPhase === "embedding_data" ? "bg-blue-500 animate-pulse shadow-blue-500/50 shadow-lg" : syncPhase === "completed" ? "bg-green-500" : "bg-gray-300"}`}
                />
                <span className="flex-1">Embedding Data</span>
                {syncPhase === "completed" && <CheckCircle className="w-4 h-4 text-green-500" />}
              </div>
            </div>
          </div>
        )}
      </CardContent>
    </Card>
  );
}


/* ===== src/app/(authorisedRoute)/settings/_components/SettingsSidebar.tsx ===== */

"use client";

import Link from "next/link";
import { usePathname } from "next/navigation";
import { useQuery } from "@tanstack/react-query";

import {
  SidebarContent,
  SidebarGroup,
  SidebarGroupLabel,
  SidebarMenu,
  SidebarMenuButton,
  SidebarMenuItem,
} from "@/components/ui/sidebar";

// Icons for the settings navigation
import { User, CreditCard, Bell, Mail, Calendar as CalendarIcon } from "lucide-react";
import { getSyncStatus } from "@/lib/services/client/sync.service";

// Navigation items for the settings section
const settingsNavItems = [
  { title: "Account", href: "/settings/account", icon: User },
  { title: "Billing", href: "/settings/billing", icon: CreditCard },
  { title: "Notifications", href: "/settings/notifications", icon: Bell },
];

export function SettingsSidebar(): JSX.Element {
  const pathname = usePathname();
  const { data: syncStatus } = useQuery({
    queryKey: ["sync", "status"],
    queryFn: getSyncStatus,
    staleTime: 30_000,
  });

  return (
    <SidebarContent>
      <SidebarGroup>
        <SidebarGroupLabel>Settings</SidebarGroupLabel>
        <SidebarMenu>
          {settingsNavItems.map((item) => (
            <SidebarMenuItem key={item.href}>
              <SidebarMenuButton asChild isActive={pathname === item.href}>
                <Link href={{ pathname: item.href }} className="flex items-center w-full">
                  <item.icon className="w-4 h-4 mr-3" />
                  <span>{item.title}</span>
                </Link>
              </SidebarMenuButton>
            </SidebarMenuItem>
          ))}
        </SidebarMenu>
      </SidebarGroup>

      <SidebarGroup>
        <SidebarGroupLabel>Integrations</SidebarGroupLabel>
        <SidebarMenu>
          <SidebarMenuItem>
            <div className="flex items-center justify-between w-full px-2 py-1.5 rounded-md">
              <div className="flex items-center">
                <Mail className="w-4 h-4 mr-3" />
                <span>Gmail</span>
              </div>
              <div className="text-xs">
                {syncStatus?.serviceTokens?.gmail ? (
                  <span className="text-green-600">Connected</span>
                ) : (
                  <a href="/api/google/gmail/oauth" className="text-blue-600 hover:underline">
                    Connect
                  </a>
                )}
              </div>
            </div>
          </SidebarMenuItem>

          <SidebarMenuItem>
            <div className="flex items-center justify-between w-full px-2 py-1.5 rounded-md">
              <div className="flex items-center">
                <CalendarIcon className="w-4 h-4 mr-3" />
                <span>Calendar</span>
              </div>
              <div className="text-xs">
                {syncStatus?.serviceTokens?.calendar ? (
                  <span className="text-green-600">Connected</span>
                ) : (
                  <a href="/api/google/calendar/oauth" className="text-blue-600 hover:underline">
                    Connect
                  </a>
                )}
              </div>
            </div>
          </SidebarMenuItem>
        </SidebarMenu>
      </SidebarGroup>
    </SidebarContent>
  );
}


/* ===== src/app/(authorisedRoute)/settings/account/page.tsx ===== */

"use client";

import type { User } from "@supabase/supabase-js";
import Link from "next/link";
import { useRouter } from "next/navigation";
import { useState, useEffect, useReducer } from "react";

import {
  Button,
  Card,
  CardHeader,
  CardTitle,
  CardDescription,
  CardContent,
  Input,
  Label,
  Separator,
} from "@/components/ui";
import {
  fetchCurrentUser,
  updateUserPassword,
  mapAuthErrorMessage,
} from "@/lib/services/client/auth.service";
import { signOut } from "@/lib/actions/auth";
import { AccountDataManagement } from "../_components/AccountDataManagement";

// Constants
const MIN_PASSWORD_LENGTH = 6;
const ROUTES = {
  LogIn: "/log-in",
  dashboard: "/omni-flow",
};

// Message state management with useReducer
type MessageState = {
  text: string;
  type: "error" | "success";
};

type MessageAction =
  | { type: "SET_MESSAGE"; payload: { text: string; type: "error" | "success" } }
  | { type: "CLEAR_MESSAGE" };

const initialMessageState: MessageState = {
  text: "",
  type: "error",
};

function messageReducer(state: MessageState, action: MessageAction): MessageState {
  switch (action.type) {
    case "SET_MESSAGE":
      return {
        text: action.payload.text,
        type: action.payload.type,
      };
    case "CLEAR_MESSAGE":
      return initialMessageState;
    default:
      return state;
  }
}

export default function AccountPage(): JSX.Element {
  const router = useRouter();
  const [user, setUser] = useState<User | null>(null);
  const [isFetchingUser, setIsFetchingUser] = useState(true);
  const [isLoggingOut, setIsLoggingOut] = useState(false);
  const [newPassword, setNewPassword] = useState("");
  const [confirmNewPassword, setConfirmNewPassword] = useState("");
  const [isPasswordLoading, setIsPasswordLoading] = useState(false);
  const [messageState, dispatchMessage] = useReducer(messageReducer, initialMessageState);

  // Fetch user data on component mount
  useEffect(() => {
    const getUserData = async (): Promise<void> => {
      setIsFetchingUser(true);

      const { user: currentUser, error } = await fetchCurrentUser();

      if (error || !currentUser) {
        dispatchMessage({
          type: "SET_MESSAGE",
          payload: {
            text: "Could not fetch user data. Please sign in again.",
            type: "error",
          },
        });
        router.push(ROUTES.LogIn);
      } else {
        setUser(currentUser);
      }

      setIsFetchingUser(false);
    };

    void getUserData();
  }, [router]);

  // Handle password update
  const handlePasswordUpdate = async (e: React.FormEvent): Promise<void> => {
    e.preventDefault();
    setIsPasswordLoading(true);
    dispatchMessage({ type: "CLEAR_MESSAGE" });

    // Validate passwords
    if (!newPassword) {
      dispatchMessage({
        type: "SET_MESSAGE",
        payload: {
          text: "Password cannot be empty.",
          type: "error",
        },
      });
      setIsPasswordLoading(false);
      return;
    }

    if (newPassword.length < MIN_PASSWORD_LENGTH) {
      dispatchMessage({
        type: "SET_MESSAGE",
        payload: {
          text: `Password must be at least ${MIN_PASSWORD_LENGTH} characters long.`,
          type: "error",
        },
      });
      setIsPasswordLoading(false);
      return;
    }

    if (newPassword !== confirmNewPassword) {
      dispatchMessage({
        type: "SET_MESSAGE",
        payload: {
          text: "New passwords do not match.",
          type: "error",
        },
      });
      setIsPasswordLoading(false);
      return;
    }

    // Update password
    const { error } = await updateUserPassword(newPassword);

    if (error) {
      dispatchMessage({
        type: "SET_MESSAGE",
        payload: {
          text: `Password update failed: ${mapAuthErrorMessage(error.message)}`,
          type: "error",
        },
      });
    } else {
      dispatchMessage({
        type: "SET_MESSAGE",
        payload: {
          text: "Password updated successfully!",
          type: "success",
        },
      });
    }

    // Always clear password fields after attempt
    setNewPassword("");
    setConfirmNewPassword("");
    setIsPasswordLoading(false);
  };

  // Handle sign out
  const handleSignOut = async (): Promise<void> => {
    setIsLoggingOut(true);
    dispatchMessage({ type: "CLEAR_MESSAGE" });

    const { error } = await signOut();

    if (error) {
      const errorMessage = error instanceof Error ? error.message : "An unknown error occurred";
      dispatchMessage({
        type: "SET_MESSAGE",
        payload: {
          text: `Sign out failed: ${mapAuthErrorMessage(errorMessage)}`,
          type: "error",
        },
      });
      setIsLoggingOut(false);
    } else {
      router.push(ROUTES.LogIn);
    }
  };

  // Loading state
  if (isFetchingUser && !user) {
    return (
      <div className="flex min-h-screen items-center justify-center bg-gray-100">
        <p>Loading account information...</p>
      </div>
    );
  }

  // No user state (fallback if redirect in useEffect fails)
  if (!user) {
    return (
      <div className="flex min-h-screen items-center justify-center bg-gray-100">
        <p>
          Please{" "}
          <Link href={ROUTES.LogIn} className="underline">
            log in
          </Link>{" "}
          to view your account.
        </p>
      </div>
    );
  }

  return (
    <div className="container mx-auto max-w-4xl py-8">
      <div className="space-y-8">
        <div>
          <h1 className="text-3xl font-bold tracking-tight text-sky-500">Account Settings</h1>
          <p className="text-muted-foreground mt-2">
            Manage your account details, security settings, and privacy controls.
          </p>
        </div>

        <div className="grid gap-8 md:grid-cols-2">
          {/* Account Information & Security */}
          <Card className="bg-sky-500/10 border-sky-500/20 shadow-lg">
            <CardHeader>
              <CardTitle className="text-xl font-bold text-sky-500">Account & Security</CardTitle>
              <CardDescription>Manage your account details and password.</CardDescription>
            </CardHeader>

            <CardContent className="space-y-6">
              <div className="space-y-2">
                <h3 className="text-lg font-semibold text-sky-500">Account Information</h3>
                <p>
                  <span className="font-medium text-violet-400">Email:</span> {user.email}
                </p>
                <p>
                  <span className="font-medium text-violet-400">Account Created:</span>{" "}
                  {user.created_at ? new Date(user.created_at).toLocaleDateString() : "N/A"}
                </p>
                {user.last_sign_in_at && (
                  <p>
                    <span className="font-medium text-violet-400">Last Sign In:</span>{" "}
                    {new Date(user.last_sign_in_at).toLocaleString()}
                  </p>
                )}
              </div>

              <Separator />

              <div className="space-y-4">
                <h3 className="text-lg font-semibold text-sky-500">Change Password</h3>
                <form onSubmit={handlePasswordUpdate} className="space-y-4">
                  <div>
                    <Label htmlFor="new_password" className="text-violet-400">
                      New Password
                    </Label>
                    <Input
                      id="new_password"
                      type="password"
                      value={newPassword}
                      onChange={(e) => setNewPassword(e.target.value)}
                      placeholder="Enter new password"
                      required
                    />
                  </div>
                  <div>
                    <Label htmlFor="confirm_new_password" className="text-violet-400">
                      Confirm New Password
                    </Label>
                    <Input
                      id="confirm_new_password"
                      type="password"
                      value={confirmNewPassword}
                      onChange={(e) => setConfirmNewPassword(e.target.value)}
                      placeholder="Confirm new password"
                      required
                    />
                  </div>
                  <Button type="submit" className="w-full sm:w-auto" disabled={isPasswordLoading}>
                    {isPasswordLoading ? "Updating..." : "Update Password"}
                  </Button>
                </form>
              </div>

              {messageState.text && (
                <p
                  className={`mt-4 text-sm ${messageState.type === "error" ? "text-red-600" : "text-green-600"}`}
                >
                  {messageState.text}
                </p>
              )}

              <Separator />

              <div>
                <Button
                  variant="destructive"
                  onClick={handleSignOut}
                  className="w-full sm:w-auto"
                  disabled={isLoggingOut || isPasswordLoading}
                >
                  {isLoggingOut ? "Logging out..." : "Log Out"}
                </Button>
              </div>
            </CardContent>
          </Card>

          {/* GDPR Data Management */}
          <div>
            <AccountDataManagement />
          </div>
        </div>

        <div className="text-center">
          <Link
            href={ROUTES.dashboard}
            className="text-sm font-medium text-sky-500 hover:underline"
          >
            Back to Dashboard
          </Link>
        </div>
      </div>
    </div>
  );
}


/* ===== src/app/(authorisedRoute)/settings/page.tsx ===== */

"use client";

import { useEffect, useState } from "react";
import { useSearchParams } from "next/navigation";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Switch } from "@/components/ui/switch";
import { Textarea } from "@/components/ui/textarea";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Alert, AlertDescription } from "@/components/ui/alert";
import {
  ArrowRight,
  Cog,
  Mail,
  User,
  Bell,
  Shield,
  Database,
  Phone,
  Globe,
  Calendar,
  RefreshCw,
  Settings as SettingsIcon,
  RotateCcw,
  Brain,
  CheckCircle,
} from "lucide-react";
import Link from "next/link";
import { GmailSyncStatusPanel } from "./_components/GmailSyncStatusPanel";

interface SettingsSectionProps {
  title: string;
  description: string;
  icon: React.ComponentType<{ className?: string }>;
  href: string;
  buttonText: string;
}

function SettingsSection({
  title,
  description,
  icon: Icon,
  href,
  buttonText,
}: SettingsSectionProps): JSX.Element {
  return (
    <Card>
      <CardHeader>
        <div className="flex items-center gap-3">
          <Icon className="h-5 w-5 text-sky-500" />
          <div>
            <CardTitle className="text-lg">{title}</CardTitle>
            <CardDescription>{description}</CardDescription>
          </div>
        </div>
      </CardHeader>
      <CardContent>
        <Button asChild>
          <Link href={href} className="flex items-center gap-2">
            {buttonText}
            <ArrowRight className="h-4 w-4" />
          </Link>
        </Button>
      </CardContent>
    </Card>
  );
}

export default function SettingsPage(): JSX.Element {
  const searchParams = useSearchParams();
  const [successMessage, setSuccessMessage] = useState<string | null>(null);

  useEffect(() => {
    const connected = searchParams.get("connected");

    if (connected === "gmail") {
      setSuccessMessage(
        "Gmail has been successfully connected! You can now configure your sync settings.",
      );
    } else if (connected === "calendar") {
      setSuccessMessage(
        "Google Calendar has been successfully connected! You can now sync your rhythm events.",
      );
    }
    // If tab is specified, it will be handled by the Tabs component
  }, [searchParams]);

  const settingsSections: SettingsSectionProps[] = [
    {
      title: "Account Settings",
      description: "Update your profile, password, and account preferences",
      icon: Cog,
      href: "/settings/account",
      buttonText: "Manage Account",
    },
  ];

  return (
    <div className="container max-w-6xl mx-auto py-8 space-y-8">
      {/* ENHANCED SETTINGS SYSTEM - PRIMARY IMPLEMENTATION */}
      <div className="space-y-8">
        <div>
          <h1 className="text-3xl font-bold tracking-tight flex items-center gap-2">
            <SettingsIcon className="h-8 w-8 text-sky-500" />
            Settings & Integrations
          </h1>
          <p className="text-muted-foreground mt-2">
            Manage your account, sync preferences, and AI integrations for optimal CRM performance
          </p>
        </div>

        {/* Success Message */}
        {successMessage && (
          <Alert className="mb-6 border-green-200 bg-green-50">
            <CheckCircle className="h-4 w-4 text-green-600" />
            <AlertDescription className="text-green-800">{successMessage}</AlertDescription>
          </Alert>
        )}

        <Tabs defaultValue={searchParams.get("tab") ?? "integrations"} className="w-full">
          <TabsList className="grid w-full grid-cols-6">
            <TabsTrigger value="integrations">Integrations</TabsTrigger>
            <TabsTrigger value="sync">Sync Settings</TabsTrigger>
            <TabsTrigger value="profile">Profile</TabsTrigger>
            <TabsTrigger value="notifications">Notifications</TabsTrigger>
            <TabsTrigger value="security">Security</TabsTrigger>
            <TabsTrigger value="system">System</TabsTrigger>
          </TabsList>

          {/* Integrations Settings - Primary Tab */}
          <TabsContent value="integrations" className="space-y-6">
            {/* Google Services Integration */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Globe className="h-5 w-5" />
                  Google Workspace Integration
                </CardTitle>
                <CardDescription>
                  Connect your Google services for comprehensive business intelligence
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="grid gap-4">
                  {/* Gmail Integration */}
                  <div className="flex items-center justify-between p-4 border rounded-lg bg-gradient-to-r from-blue-50 to-blue-100 dark:from-blue-900/20 dark:to-blue-800/20">
                    <div className="flex items-center gap-3">
                      <Mail className="h-8 w-8 text-blue-600" />
                      <div>
                        <div className="font-medium">Gmail Sync</div>
                        <div className="text-sm text-muted-foreground">
                          Sync contacts and analyze email interactions
                        </div>
                      </div>
                    </div>
                    <div className="flex items-center gap-2">
                      <Button variant="outline" size="sm">
                        <SettingsIcon className="h-4 w-4 mr-2" />
                        Configure
                      </Button>
                      <Button>
                        <RotateCcw className="h-4 w-4 mr-2" />
                        Connect
                      </Button>
                    </div>
                  </div>

                  {/* Rhythm Integration */}
                  <div className="flex items-center justify-between p-4 border rounded-lg bg-gradient-to-r from-green-50 to-green-100 dark:from-green-900/20 dark:to-green-800/20">
                    <div className="flex items-center gap-3">
                      <Calendar className="h-8 w-8 text-green-600" />
                      <div>
                        <div className="font-medium">Google Calendar</div>
                        <div className="text-sm text-muted-foreground">
                          Track events and build client timelines
                        </div>
                      </div>
                    </div>
                    <div className="flex items-center gap-2">
                      <Button variant="outline" size="sm">
                        <SettingsIcon className="h-4 w-4 mr-2" />
                        Configure
                      </Button>
                      <Button>
                        <RotateCcw className="h-4 w-4 mr-2" />
                        Connect
                      </Button>
                    </div>
                  </div>

                  {/* Drive Integration */}
                  <div className="flex items-center justify-between p-4 border rounded-lg bg-gradient-to-r from-yellow-50 to-yellow-100 dark:from-yellow-900/20 dark:to-yellow-800/20">
                    <div className="flex items-center gap-3">
                      <Database className="h-8 w-8 text-yellow-600" />
                      <div>
                        <div className="font-medium">Google Drive</div>
                        <div className="text-sm text-muted-foreground">
                          Import attendance sheets and documents
                        </div>
                      </div>
                    </div>
                    <div className="flex items-center gap-2">
                      <Button variant="outline" size="sm">
                        <SettingsIcon className="h-4 w-4 mr-2" />
                        Configure
                      </Button>
                      <Button variant="outline">
                        <RotateCcw className="h-4 w-4 mr-2" />
                        Coming Soon
                      </Button>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* AI Services Integration */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Brain className="h-5 w-5" />
                  AI & Intelligence Services
                </CardTitle>
                <CardDescription>
                  Configure AI-powered features and analysis capabilities
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="grid gap-4">
                  <div className="flex items-center justify-between p-4 border rounded-lg">
                    <div className="flex items-center gap-3">
                      <Brain className="h-8 w-8 text-purple-600" />
                      <div>
                        <div className="font-medium">OpenAI Integration</div>
                        <div className="text-sm text-muted-foreground">
                          AI insights, embeddings, and semantic search
                        </div>
                      </div>
                    </div>
                    <Button variant="outline">
                      <SettingsIcon className="h-4 w-4 mr-2" />
                      Configure API
                    </Button>
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* Communication Platforms */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Phone className="h-5 w-5" />
                  Communication Platforms
                </CardTitle>
                <CardDescription>Connect messaging and communication services</CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="grid gap-4">
                  <div className="flex items-center justify-between p-4 border rounded-lg">
                    <div className="flex items-center gap-3">
                      <Phone className="h-8 w-8 text-green-600" />
                      <div>
                        <div className="font-medium">WhatsApp Business</div>
                        <div className="text-sm text-muted-foreground">
                          Send messages to contacts
                        </div>
                      </div>
                    </div>
                    <Button variant="outline">Connect</Button>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* Sync Settings Tab */}
          <TabsContent value="sync" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <RefreshCw className="h-5 w-5" />
                  Data Synchronization Settings
                </CardTitle>
                <CardDescription>
                  Configure how your data syncs across different platforms and services
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="space-y-4">
                  <div className="flex items-center justify-between">
                    <div className="space-y-0.5">
                      <Label>Auto-sync Gmail Contacts</Label>
                      <div className="text-sm text-muted-foreground">
                        Automatically sync new contacts from Gmail
                      </div>
                    </div>
                    <Switch defaultChecked />
                  </div>
                  <div className="flex items-center justify-between">
                    <div className="space-y-0.5">
                      <Label>Rhythm Event Processing</Label>
                      <div className="text-sm text-muted-foreground">
                        Generate AI insights from rhythm events
                      </div>
                    </div>
                    <Switch defaultChecked />
                  </div>
                  <div className="flex items-center justify-between">
                    <div className="space-y-0.5">
                      <Label>Background AI Analysis</Label>
                      <div className="text-sm text-muted-foreground">
                        Run AI analysis on new data automatically
                      </div>
                    </div>
                    <Switch defaultChecked />
                  </div>
                </div>

                {/* Sync Frequency */}
                <div className="space-y-2">
                  <Label>Sync Frequency</Label>
                  <select className="w-full p-2 border rounded-md">
                    <option value="realtime">Real-time (recommended)</option>
                    <option value="hourly">Every hour</option>
                    <option value="daily">Daily</option>
                    <option value="manual">Manual only</option>
                  </select>
                </div>

                <Button>Save Sync Settings</Button>
              </CardContent>
            </Card>

            {/* Gmail Sync Status - Original Component */}
            <GmailSyncStatusPanel />
          </TabsContent>

          {/* Profile Settings */}
          <TabsContent value="profile" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <User className="h-5 w-5" />
                  Profile Information
                </CardTitle>
                <CardDescription>
                  Update your personal information and profile details
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="grid grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="firstName">First Name</Label>
                    <Input id="firstName" placeholder="Enter your first name" />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="lastName">Last Name</Label>
                    <Input id="lastName" placeholder="Enter your last name" />
                  </div>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="email">Email</Label>
                  <Input id="email" type="email" placeholder="Enter your email" />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="bio">Bio</Label>
                  <Textarea id="bio" placeholder="Tell us about yourself" rows={3} />
                </div>
                <Button>Save Changes</Button>
              </CardContent>
            </Card>
          </TabsContent>

          {/* Notifications Settings */}
          <TabsContent value="notifications" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Bell className="h-5 w-5" />
                  Notification Preferences
                </CardTitle>
                <CardDescription>Choose how you want to receive notifications</CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="flex items-center justify-between">
                  <div className="space-y-0.5">
                    <Label>Email Notifications</Label>
                    <div className="text-sm text-muted-foreground">
                      Receive notifications via email
                    </div>
                  </div>
                  <Switch />
                </div>
                <div className="flex items-center justify-between">
                  <div className="space-y-0.5">
                    <Label>Contact Updates</Label>
                    <div className="text-sm text-muted-foreground">
                      Get notified when contacts are updated
                    </div>
                  </div>
                  <Switch />
                </div>
                <div className="flex items-center justify-between">
                  <div className="space-y-0.5">
                    <Label>AI Insight Alerts</Label>
                    <div className="text-sm text-muted-foreground">
                      Receive notifications about new AI insights
                    </div>
                  </div>
                  <Switch defaultChecked />
                </div>
                <div className="flex items-center justify-between">
                  <div className="space-y-0.5">
                    <Label>Task Reminders</Label>
                    <div className="text-sm text-muted-foreground">
                      Receive reminders for upcoming tasks
                    </div>
                  </div>
                  <Switch defaultChecked />
                </div>
                <Button>Save Preferences</Button>
              </CardContent>
            </Card>
          </TabsContent>

          {/* Security Settings */}
          <TabsContent value="security" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Shield className="h-5 w-5" />
                  Security Settings
                </CardTitle>
                <CardDescription>Manage your account security and privacy</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="space-y-2">
                  <Label htmlFor="currentPassword">Current Password</Label>
                  <Input id="currentPassword" type="password" />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="newPassword">New Password</Label>
                  <Input id="newPassword" type="password" />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="confirmPassword">Confirm New Password</Label>
                  <Input id="confirmPassword" type="password" />
                </div>
                <Button>Update Password</Button>

                {/* API Security */}
                <div className="mt-6 pt-6 border-t">
                  <h3 className="text-lg font-semibold mb-4">API Security</h3>
                  <div className="space-y-4">
                    <div className="flex items-center justify-between">
                      <div className="space-y-0.5">
                        <Label>Two-Factor Authentication</Label>
                        <div className="text-sm text-muted-foreground">
                          Add an extra layer of security
                        </div>
                      </div>
                      <Switch />
                    </div>
                    <div className="flex items-center justify-between">
                      <div className="space-y-0.5">
                        <Label>API Access Logging</Label>
                        <div className="text-sm text-muted-foreground">
                          Log all API access attempts
                        </div>
                      </div>
                      <Switch defaultChecked />
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* System Settings */}
          <TabsContent value="system" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Database className="h-5 w-5" />
                  System Preferences
                </CardTitle>
                <CardDescription>Configure system-wide settings and preferences</CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="flex items-center justify-between">
                  <div className="space-y-0.5">
                    <Label>Dark Mode</Label>
                    <div className="text-sm text-muted-foreground">
                      Toggle between light and dark themes
                    </div>
                  </div>
                  <Switch />
                </div>
                <div className="flex items-center justify-between">
                  <div className="space-y-0.5">
                    <Label>Auto-save</Label>
                    <div className="text-sm text-muted-foreground">
                      Automatically save changes as you work
                    </div>
                  </div>
                  <Switch defaultChecked />
                </div>
                <div className="space-y-2">
                  <Label>Data Export</Label>
                  <div className="text-sm text-muted-foreground mb-2">
                    Export your data for backup or migration
                  </div>
                  <div className="flex gap-2">
                    <Button variant="outline">Export Contacts</Button>
                    <Button variant="outline">Export Rhythm Data</Button>
                    <Button variant="outline">Export All Data</Button>
                  </div>
                </div>
                <Button>Save System Settings</Button>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </div>

      {/* LEGACY SETTINGS SYSTEM - PRESERVED AT BOTTOM */}
      <div className="mt-12 pt-8 border-t border-gray-200">
        <div className="text-center mb-6">
          <h2 className="text-2xl font-bold tracking-tight text-gray-500">Legacy Settings</h2>
          <p className="text-muted-foreground">
            Original settings interface (to be integrated later)
          </p>
        </div>

        <div>
          <h3 className="text-xl font-semibold tracking-tight text-sky-500 mb-4">Settings</h3>
          <p className="text-muted-foreground mb-6">
            Manage your account preferences and application settings.
          </p>
        </div>

        <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-1">
          {settingsSections.map((section) => (
            <SettingsSection
              key={section.href}
              title={section.title}
              description={section.description}
              icon={section.icon}
              href={section.href}
              buttonText={section.buttonText}
            />
          ))}
        </div>

        {/* Legacy Data Ingestion Section */}
        <div className="space-y-4 mt-8">
          <div>
            <h4 className="text-lg font-semibold tracking-tight text-teal-500 flex items-center gap-2">
              <Mail className="h-5 w-5" />
              Legacy Data Ingestion
            </h4>
            <p className="text-muted-foreground mt-1">Original Gmail sync interface</p>
          </div>

          <GmailSyncStatusPanel />
        </div>
      </div>
    </div>
  );
}


/* ===== src/app/(authorisedRoute)/settings/pagenew.tsx ===== */

"use client";

import { 
  User, 
  Bell, 
  Shield, 
  Database,
  Mail,
  Phone,
  Globe
} from "lucide-react";

import {
  Button,
} from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import {
  Tabs,
  TabsContent,
  TabsList,
  TabsTrigger,
} from "@/components/ui/tabs";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Switch } from "@/components/ui/switch";
import { Textarea } from "@/components/ui/textarea";

export default function SettingsPage(): JSX.Element {
  return (
    <div className="py-6">
      <div className="flex flex-col space-y-8">
        {/* Header */}
        <div>
          <h1 className="text-3xl font-bold tracking-tight">Settings</h1>
          <p className="text-muted-foreground mt-1">Manage your account and application preferences</p>
        </div>

        <Tabs defaultValue="profile" className="w-full">
          <TabsList className="grid w-full grid-cols-5">
            <TabsTrigger value="profile">Profile</TabsTrigger>
            <TabsTrigger value="notifications">Notifications</TabsTrigger>
            <TabsTrigger value="security">Security</TabsTrigger>
            <TabsTrigger value="integrations">Integrations</TabsTrigger>
            <TabsTrigger value="system">System</TabsTrigger>
          </TabsList>

          {/* Profile Settings */}
          <TabsContent value="profile" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <User className="h-5 w-5" />
                  Profile Information
                </CardTitle>
                <CardDescription>
                  Update your personal information and profile details
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="grid grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="firstName">First Name</Label>
                    <Input id="firstName" placeholder="Enter your first name" />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="lastName">Last Name</Label>
                    <Input id="lastName" placeholder="Enter your last name" />
                  </div>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="email">Email</Label>
                  <Input id="email" type="email" placeholder="Enter your email" />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="bio">Bio</Label>
                  <Textarea id="bio" placeholder="Tell us about yourself" rows={3} />
                </div>
                <Button>Save Changes</Button>
              </CardContent>
            </Card>
          </TabsContent>

          {/* Notifications Settings */}
          <TabsContent value="notifications" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Bell className="h-5 w-5" />
                  Notification Preferences
                </CardTitle>
                <CardDescription>
                  Choose how you want to receive notifications
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="flex items-center justify-between">
                  <div className="space-y-0.5">
                    <Label>Email Notifications</Label>
                    <div className="text-sm text-muted-foreground">
                      Receive notifications via email
                    </div>
                  </div>
                  <Switch />
                </div>
                <div className="flex items-center justify-between">
                  <div className="space-y-0.5">
                    <Label>Contact Updates</Label>
                    <div className="text-sm text-muted-foreground">
                      Get notified when contacts are updated
                    </div>
                  </div>
                  <Switch />
                </div>
                <div className="flex items-center justify-between">
                  <div className="space-y-0.5">
                    <Label>Task Reminders</Label>
                    <div className="text-sm text-muted-foreground">
                      Receive reminders for upcoming tasks
                    </div>
                  </div>
                  <Switch defaultChecked />
                </div>
                <Button>Save Preferences</Button>
              </CardContent>
            </Card>
          </TabsContent>

          {/* Security Settings */}
          <TabsContent value="security" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Shield className="h-5 w-5" />
                  Security Settings
                </CardTitle>
                <CardDescription>
                  Manage your account security and privacy
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="space-y-2">
                  <Label htmlFor="currentPassword">Current Password</Label>
                  <Input id="currentPassword" type="password" />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="newPassword">New Password</Label>
                  <Input id="newPassword" type="password" />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="confirmPassword">Confirm New Password</Label>
                  <Input id="confirmPassword" type="password" />
                </div>
                <Button>Update Password</Button>
              </CardContent>
            </Card>
          </TabsContent>

          {/* Integrations Settings */}
          <TabsContent value="integrations" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Globe className="h-5 w-5" />
                  External Integrations
                </CardTitle>
                <CardDescription>
                  Connect with external services and platforms
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="flex items-center justify-between p-4 border rounded-lg">
                  <div className="flex items-center gap-3">
                    <Mail className="h-8 w-8 text-blue-600" />
                    <div>
                      <div className="font-medium">Google Gmail</div>
                      <div className="text-sm text-muted-foreground">Sync contacts and emails</div>
                    </div>
                  </div>
                  <Button variant="outline">Connect</Button>
                </div>
                <div className="flex items-center justify-between p-4 border rounded-lg">
                  <div className="flex items-center gap-3">
                    <Phone className="h-8 w-8 text-green-600" />
                    <div>
                      <div className="font-medium">WhatsApp Business</div>
                      <div className="text-sm text-muted-foreground">Send messages to contacts</div>
                    </div>
                  </div>
                  <Button variant="outline">Connect</Button>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* System Settings */}
          <TabsContent value="system" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Database className="h-5 w-5" />
                  System Preferences
                </CardTitle>
                <CardDescription>
                  Configure system-wide settings and preferences
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="flex items-center justify-between">
                  <div className="space-y-0.5">
                    <Label>Dark Mode</Label>
                    <div className="text-sm text-muted-foreground">
                      Toggle between light and dark themes
                    </div>
                  </div>
                  <Switch />
                </div>
                <div className="flex items-center justify-between">
                  <div className="space-y-0.5">
                    <Label>Auto-save</Label>
                    <div className="text-sm text-muted-foreground">
                      Automatically save changes as you work
                    </div>
                  </div>
                  <Switch defaultChecked />
                </div>
                <div className="space-y-2">
                  <Label>Data Export</Label>
                  <div className="text-sm text-muted-foreground mb-2">
                    Export your data for backup or migration
                  </div>
                  <Button variant="outline">Export Data</Button>
                </div>
                <Button>Save System Settings</Button>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
}
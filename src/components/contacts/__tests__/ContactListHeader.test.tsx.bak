import React from "react";
import { describe, it, expect, vi, beforeEach } from "vitest";
import { render, screen, fireEvent } from "@testing-library/react";
import userEvent from "@testing-library/user-event";
import { ContactListHeader } from "../ContactListHeader";
import { toast } from "sonner";

// Mock all dependencies
vi.mock("sonner", () => ({
  toast: {
    info: vi.fn(),
  },
}));

vi.mock("next/link", () => ({
  default: ({ children, href, ...props }: any) => 
    React.createElement("a", { href, ...props }, children),
}));

vi.mock("../NewContactDialog", () => ({
  NewContactDialog: ({ open, onOpenChange, onContactCreated }: any) =>
    open ? React.createElement(
      "div",
      { "data-testid": "new-contact-dialog" },
      React.createElement("button", { onClick: () => onOpenChange(false) }, "Close"),
      React.createElement(
        "button",
        {
          onClick: () => {
            onContactCreated?.({
              id: "test-id",
              displayName: "Test Contact",
              primaryEmail: "test@example.com",
            });
            onOpenChange(false);
          }
        },
        "Create Contact"
      )
    ) : null,
}));

// Mock UI components
vi.mock("@/components/ui/button", () => ({
  Button: ({ children, ...props }: any) => 
    React.createElement("button", props, children),
}));

vi.mock("@/components/ui/input", () => ({
  Input: (props: any) => React.createElement("input", props),
}));

vi.mock("@/components/ui/card", () => ({
  CardDescription: ({ children, ...props }: any) => 
    React.createElement("p", props, children),
}));

vi.mock("@/components/ui/dropdown-menu", () => ({
  DropdownMenu: ({ children }: any) => React.createElement("div", {}, children),
  DropdownMenuContent: ({ children }: any) => React.createElement("div", {}, children),
  DropdownMenuItem: ({ children, onClick }: any) => 
    React.createElement("button", { onClick }, children),
  DropdownMenuTrigger: ({ children }: any) => children,
}));

describe("ContactListHeader", () => {
  const defaultProps = {
    searchQuery: "",
    onSearch: vi.fn(),
  };

  beforeEach(() => {
    vi.clearAllMocks();
  });

  describe("rendering", () => {
    it("renders header content", () => {
      render(<ContactListHeader {...defaultProps} />);

      expect(screen.getByText("Contacts")).toBeInTheDocument();
      expect(screen.getByText("Search, filter and manage your contacts.")).toBeInTheDocument();
    });

    it("renders search input", () => {
      render(<ContactListHeader {...defaultProps} searchQuery="test search" />);

      const searchInput = screen.getByRole("textbox");
      expect(searchInput).toBeInTheDocument();
      expect(searchInput).toHaveValue("test search");
    });

    it("renders action buttons", () => {
      render(<ContactListHeader {...defaultProps} />);

      expect(screen.getByText("New Contact")).toBeInTheDocument();
      expect(screen.getByText("More")).toBeInTheDocument();
      expect(screen.getByText("Connect Google")).toBeInTheDocument();
    });

    it("does not show bulk actions when no items selected", () => {
      render(<ContactListHeader {...defaultProps} selectedCount={0} />);

      expect(screen.queryByText("0 selected")).not.toBeInTheDocument();
    });

    it("shows bulk actions when items are selected", () => {
      render(<ContactListHeader {...defaultProps} selectedCount={3} />);

      expect(screen.getByText("3 selected")).toBeInTheDocument();
      expect(screen.getByText("Send Email")).toBeInTheDocument();
      expect(screen.getByText("Add Tags")).toBeInTheDocument();
      expect(screen.getByText("Export")).toBeInTheDocument();
      expect(screen.getByText("Delete")).toBeInTheDocument();
    });
  });

  describe("search functionality", () => {
    it("calls onSearch when typing", async () => {
      const user = userEvent.setup();
      const onSearch = vi.fn();

      render(<ContactListHeader {...defaultProps} onSearch={onSearch} />);

      const searchInput = screen.getByRole("textbox");
      await user.type(searchInput, "test");

      expect(onSearch).toHaveBeenCalledWith("t");
      expect(onSearch).toHaveBeenCalledWith("te");
      expect(onSearch).toHaveBeenCalledWith("tes");
      expect(onSearch).toHaveBeenCalledWith("test");
    });

    it("focuses search input on keyboard shortcut", async () => {
      render(<ContactListHeader {...defaultProps} />);

      const searchInput = screen.getByRole("textbox");

      fireEvent.keyDown(window, { key: "k", metaKey: true });

      expect(searchInput).toHaveFocus();
    });
  });

  describe("new contact functionality", () => {
    it("opens new contact dialog", async () => {
      const user = userEvent.setup();

      render(<ContactListHeader {...defaultProps} />);

      const newContactButton = screen.getByText("New Contact");
      await user.click(newContactButton);

      expect(screen.getByTestId("new-contact-dialog")).toBeInTheDocument();
    });

    it("calls custom onNewContact handler", async () => {
      const user = userEvent.setup();
      const onNewContact = vi.fn();

      render(<ContactListHeader {...defaultProps} onNewContact={onNewContact} />);

      const newContactButton = screen.getByText("New Contact");
      await user.click(newContactButton);

      expect(onNewContact).toHaveBeenCalled();
    });
  });

  describe("dropdown actions", () => {
    it("shows dropdown items when clicked", async () => {
      const user = userEvent.setup();

      render(<ContactListHeader {...defaultProps} />);

      const moreButton = screen.getByText("More");
      await user.click(moreButton);

      expect(screen.getByText("Import CSV")).toBeInTheDocument();
      expect(screen.getByText("Export Contacts")).toBeInTheDocument();
      expect(screen.getByText("Sync Now")).toBeInTheDocument();
    });

    it("shows toast when sync clicked without handler", async () => {
      const user = userEvent.setup();

      render(<ContactListHeader {...defaultProps} />);

      const moreButton = screen.getByText("More");
      await user.click(moreButton);

      const syncButton = screen.getByText("Sync Now");
      await user.click(syncButton);

      expect(toast.info).toHaveBeenCalledWith("Sync feature", {
        description: "Google Contacts sync will be available soon.",
      });
    });
  });

  describe("bulk actions", () => {
    const bulkProps = {
      ...defaultProps,
      selectedCount: 2,
      onBulkActionEmail: vi.fn(),
      onBulkActionDelete: vi.fn(),
    };

    it("calls bulk action handlers", async () => {
      const user = userEvent.setup();

      render(<ContactListHeader {...bulkProps} />);

      const emailButton = screen.getByText("Send Email");
      await user.click(emailButton);

      expect(bulkProps.onBulkActionEmail).toHaveBeenCalled();

      const deleteButton = screen.getByText("Delete");
      await user.click(deleteButton);

      expect(bulkProps.onBulkActionDelete).toHaveBeenCalled();
    });
  });
});
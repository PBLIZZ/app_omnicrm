import React from "react";
import { describe, it, expect, vi } from "vitest";
import { render, screen, fireEvent, waitFor } from "@testing-library/react";
import userEvent from "@testing-library/user-event";
import { ContactTable, ContactRow } from "../ContactTable";

const mockContacts: ContactRow[] = [
  {
    id: "1",
    displayName: "John Doe",
    primaryEmail: "john@example.com",
    primaryPhone: "+1234567890",
    createdAt: "2024-01-15T10:00:00Z",
  },
  {
    id: "2",
    displayName: "Jane Smith",
    primaryEmail: "jane@example.com",
    createdAt: "2024-01-10T15:30:00Z",
  },
  {
    id: "3",
    displayName: "Bob Johnson",
    primaryPhone: "+0987654321",
    createdAt: "2024-02-01T09:45:00Z",
  },
];

describe("ContactTable", () => {
  const defaultProps = {
    data: mockContacts,
  };

  it("renders contact data correctly", () => {
    render(<ContactTable {...defaultProps} />);

    expect(screen.getByText("John Doe")).toBeInTheDocument();
    expect(screen.getByText("jane@example.com")).toBeInTheDocument();
    expect(screen.getByText("+0987654321")).toBeInTheDocument();
  });

  it("shows placeholder for missing data", () => {
    render(<ContactTable {...defaultProps} />);

    expect(screen.getAllByText("â€”")).toHaveLength(2); // Jane's phone and Bob's email
  });

  it("shows empty state when no contacts", () => {
    render(<ContactTable data={[]} />);
    
    expect(screen.getByText("No contacts found")).toBeInTheDocument();
  });

  describe("sorting", () => {
    it("sorts by name by default (ascending)", () => {
      render(<ContactTable {...defaultProps} />);
      
      const rows = screen.getAllByRole("button", { name: /Open contact/ });
      expect(rows[0]).toHaveAccessibleName("Open contact Bob Johnson");
      expect(rows[1]).toHaveAccessibleName("Open contact Jane Smith"); 
      expect(rows[2]).toHaveAccessibleName("Open contact John Doe");
    });

    it("toggles name sorting on header click", async () => {
      const user = userEvent.setup();
      render(<ContactTable {...defaultProps} />);
      
      const nameHeader = screen.getByRole("button", { name: /Sort by name/ });
      
      // First click should sort descending (since default is ascending)
      await user.click(nameHeader);
      
      const rows = screen.getAllByRole("button", { name: /Open contact/ });
      expect(rows[0]).toHaveAccessibleName("Open contact John Doe");
      expect(rows[1]).toHaveAccessibleName("Open contact Jane Smith");
      expect(rows[2]).toHaveAccessibleName("Open contact Bob Johnson");
    });

    it("sorts by date when date header is clicked", async () => {
      const user = userEvent.setup();
      render(<ContactTable {...defaultProps} />);
      
      const dateHeader = screen.getByRole("button", { name: /Sort by date added/ });
      await user.click(dateHeader);
      
      // Should sort by date ascending (oldest first)
      const rows = screen.getAllByRole("button", { name: /Open contact/ });
      expect(rows[0]).toHaveAccessibleName("Open contact Jane Smith"); // 2024-01-10
      expect(rows[1]).toHaveAccessibleName("Open contact John Doe");    // 2024-01-15  
      expect(rows[2]).toHaveAccessibleName("Open contact Bob Johnson"); // 2024-02-01
    });
  });

  describe("row selection", () => {
    it("selects individual rows", async () => {
      const user = userEvent.setup();
      const onSelectionChange = vi.fn();
      
      render(<ContactTable {...defaultProps} onSelectionChange={onSelectionChange} />);
      
      const johnCheckbox = screen.getByLabelText("Select John Doe");
      await user.click(johnCheckbox);
      
      expect(onSelectionChange).toHaveBeenCalledWith(["1"]);
    });

    it("selects all rows with header checkbox", async () => {
      const user = userEvent.setup();
      const onSelectionChange = vi.fn();
      
      render(<ContactTable {...defaultProps} onSelectionChange={onSelectionChange} />);
      
      const selectAllCheckbox = screen.getByLabelText("Select all contacts");
      await user.click(selectAllCheckbox);
      
      expect(onSelectionChange).toHaveBeenCalledWith(["1", "2", "3"]);
    });

    it("shows indeterminate state when some rows selected", () => {
      const rowSelection = { "1": true };
      
      render(<ContactTable {...defaultProps} rowSelection={rowSelection} />);
      
      const selectAllCheckbox = screen.getByLabelText("Select all contacts") as HTMLInputElement;
      expect(selectAllCheckbox.indeterminate).toBe(true);
    });
  });

  describe("row interaction", () => {
    it("calls onOpen when row is clicked", async () => {
      const user = userEvent.setup();
      const onOpen = vi.fn();
      
      render(<ContactTable {...defaultProps} onOpen={onOpen} />);
      
      const johnRow = screen.getByRole("button", { name: "Open contact John Doe" });
      await user.click(johnRow);
      
      expect(onOpen).toHaveBeenCalledWith("1");
    });

    it("calls onOpen when Enter is pressed on row", async () => {
      const user = userEvent.setup();
      const onOpen = vi.fn();
      
      render(<ContactTable {...defaultProps} onOpen={onOpen} />);
      
      const johnRow = screen.getByRole("button", { name: "Open contact John Doe" });
      johnRow.focus();
      await user.keyboard("{Enter}");
      
      expect(onOpen).toHaveBeenCalledWith("1");
    });

    it("does not call onOpen when checkbox is clicked", async () => {
      const user = userEvent.setup();
      const onOpen = vi.fn();
      
      render(<ContactTable {...defaultProps} onOpen={onOpen} />);
      
      const johnCheckbox = screen.getByLabelText("Select John Doe");
      await user.click(johnCheckbox);
      
      expect(onOpen).not.toHaveBeenCalled();
    });
  });

  describe("date filtering", () => {
    it("opens date filter dropdown", async () => {
      const user = userEvent.setup();
      render(<ContactTable {...defaultProps} />);
      
      const filterButton = screen.getByRole("button", { name: "Filter by date added" });
      await user.click(filterButton);
      
      expect(screen.getByText("Any time")).toBeInTheDocument();
      expect(screen.getByText("Today")).toBeInTheDocument();
      expect(screen.getByText("This week")).toBeInTheDocument();
    });

    it("filters by this month", async () => {
      const user = userEvent.setup();
      
      // Mock current date to be in January 2024
      const mockDate = new Date("2024-01-20T12:00:00Z");
      vi.setSystemTime(mockDate);
      
      render(<ContactTable {...defaultProps} />);
      
      const filterButton = screen.getByRole("button", { name: "Filter by date added" });
      await user.click(filterButton);
      
      const thisMonthOption = screen.getByText("This month");
      await user.click(thisMonthOption);
      
      // Should only show John and Jane (January contacts)
      expect(screen.getByText("John Doe")).toBeInTheDocument();
      expect(screen.getByText("Jane Smith")).toBeInTheDocument();
      expect(screen.queryByText("Bob Johnson")).not.toBeInTheDocument();
      
      vi.useRealTimers();
    });

    it("clears date filter", async () => {
      const user = userEvent.setup();
      render(<ContactTable {...defaultProps} />);
      
      // First apply a filter
      const filterButton = screen.getByRole("button", { name: "Filter by date added" });
      await user.click(filterButton);
      
      const thisYearOption = screen.getByText("This year");
      await user.click(thisYearOption);
      
      // Then clear it
      await user.click(filterButton);
      const clearOption = screen.getByText("Clear filter");
      await user.click(clearOption);
      
      // All contacts should be visible again
      expect(screen.getByText("John Doe")).toBeInTheDocument();
      expect(screen.getByText("Jane Smith")).toBeInTheDocument();
      expect(screen.getByText("Bob Johnson")).toBeInTheDocument();
    });

    it("filters by custom date range", async () => {
      const user = userEvent.setup();
      render(<ContactTable {...defaultProps} />);
      
      const filterButton = screen.getByRole("button", { name: "Filter by date added" });
      await user.click(filterButton);
      
      // Set date range to January 2024
      const fromInput = screen.getByLabelText("Filter from date");
      const toInput = screen.getByLabelText("Filter to date");
      
      await user.clear(fromInput);
      await user.type(fromInput, "2024-01-01");
      
      await user.clear(toInput);
      await user.type(toInput, "2024-01-31");
      
      // Should only show contacts from January
      await waitFor(() => {
        expect(screen.getByText("John Doe")).toBeInTheDocument();
        expect(screen.getByText("Jane Smith")).toBeInTheDocument();
        expect(screen.queryByText("Bob Johnson")).not.toBeInTheDocument();
      });
    });
  });

  describe("accessibility", () => {
    it("has proper ARIA labels for sorting buttons", () => {
      render(<ContactTable {...defaultProps} />);
      
      expect(screen.getByRole("button", { name: /Sort by name ascending/ })).toBeInTheDocument();
      expect(screen.getByRole("button", { name: /Sort by date added ascending/ })).toBeInTheDocument();
    });

    it("has proper ARIA labels for checkboxes", () => {
      render(<ContactTable {...defaultProps} />);
      
      expect(screen.getByLabelText("Select all contacts")).toBeInTheDocument();
      expect(screen.getByLabelText("Select John Doe")).toBeInTheDocument();
      expect(screen.getByLabelText("Select Jane Smith")).toBeInTheDocument();
    });

    it("has proper role and tabindex for row interaction", () => {
      render(<ContactTable {...defaultProps} />);
      
      const johnRow = screen.getByRole("button", { name: "Open contact John Doe" });
      expect(johnRow).toHaveAttribute("tabindex", "0");
      expect(johnRow).toHaveAttribute("role", "button");
    });

    it("supports keyboard navigation for sorting", async () => {
      const user = userEvent.setup();
      render(<ContactTable {...defaultProps} />);
      
      const nameHeader = screen.getByRole("button", { name: /Sort by name/ });
      nameHeader.focus();
      
      await user.keyboard("{Enter}");
      
      // Should sort in descending order
      const rows = screen.getAllByRole("button", { name: /Open contact/ });
      expect(rows[0]).toHaveAccessibleName("Open contact John Doe");
    });
  });

  describe("date formatting", () => {
    it("formats dates correctly", () => {
      render(<ContactTable {...defaultProps} />);
      
      // Dates should be formatted as DD/MM/YYYY (en-GB locale)
      expect(screen.getByText("15/01/2024")).toBeInTheDocument(); // John
      expect(screen.getByText("10/01/2024")).toBeInTheDocument(); // Jane
      expect(screen.getByText("01/02/2024")).toBeInTheDocument(); // Bob
    });
  });
});
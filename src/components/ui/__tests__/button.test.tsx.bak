import React from "react";
import { describe, it, expect, vi } from "vitest";
import { render, screen } from "@testing-library/react";
import userEvent from "@testing-library/user-event";
import { Button, buttonVariants } from "../button";

describe("Button", () => {
  describe("rendering", () => {
    it("renders button with default props", () => {
      render(<Button>Click me</Button>);
      
      const button = screen.getByRole("button", { name: "Click me" });
      expect(button).toBeInTheDocument();
      expect(button).toHaveClass("inline-flex", "items-center", "justify-center");
    });

    it("renders as child component when asChild is true", () => {
      render(
        <Button asChild>
          <a href="/test">Link Button</a>
        </Button>
      );
      
      const link = screen.getByRole("link", { name: "Link Button" });
      expect(link).toBeInTheDocument();
      expect(link).toHaveAttribute("href", "/test");
    });

    it("applies custom className", () => {
      render(<Button className="custom-class">Test</Button>);
      
      const button = screen.getByRole("button");
      expect(button).toHaveClass("custom-class");
    });

    it("forwards ref correctly", () => {
      const ref = vi.fn();
      render(<Button ref={ref}>Test</Button>);
      
      expect(ref).toHaveBeenCalled();
    });
  });

  describe("variants", () => {
    const variants = [
      "default",
      "destructive", 
      "outline",
      "secondary",
      "ghost",
      "link",
    ] as const;

    variants.forEach((variant) => {
      it(`applies ${variant} variant styles`, () => {
        render(<Button variant={variant}>Test</Button>);
        
        const button = screen.getByRole("button");
        expect(button).toHaveClass(buttonVariants({ variant }));
      });
    });
  });

  describe("sizes", () => {
    const sizes = ["default", "sm", "lg", "icon"] as const;

    sizes.forEach((size) => {
      it(`applies ${size} size styles`, () => {
        render(<Button size={size}>Test</Button>);
        
        const button = screen.getByRole("button");
        expect(button).toHaveClass(buttonVariants({ size }));
      });
    });
  });

  describe("states", () => {
    it("handles disabled state", () => {
      render(<Button disabled>Disabled</Button>);
      
      const button = screen.getByRole("button");
      expect(button).toBeDisabled();
      expect(button).toHaveClass("disabled:pointer-events-none");
    });

    it("calls onClick handler when clicked", async () => {
      const user = userEvent.setup();
      const onClick = vi.fn();
      
      render(<Button onClick={onClick}>Clickable</Button>);
      
      const button = screen.getByRole("button");
      await user.click(button);
      
      expect(onClick).toHaveBeenCalledTimes(1);
    });

    it("does not call onClick when disabled", async () => {
      const user = userEvent.setup();
      const onClick = vi.fn();
      
      render(<Button onClick={onClick} disabled>Disabled</Button>);
      
      const button = screen.getByRole("button");
      await user.click(button);
      
      expect(onClick).not.toHaveBeenCalled();
    });
  });

  describe("accessibility", () => {
    it("supports aria-label", () => {
      render(<Button aria-label="Custom label">Icon</Button>);
      
      const button = screen.getByRole("button", { name: "Custom label" });
      expect(button).toBeInTheDocument();
    });

    it("supports aria-describedby", () => {
      render(
        <>
          <Button aria-describedby="description">Button</Button>
          <div id="description">Button description</div>
        </>
      );
      
      const button = screen.getByRole("button");
      expect(button).toHaveAttribute("aria-describedby", "description");
    });

    it("is keyboard accessible", async () => {
      const user = userEvent.setup();
      const onClick = vi.fn();
      
      render(<Button onClick={onClick}>Keyboard test</Button>);
      
      const button = screen.getByRole("button");
      button.focus();
      
      await user.keyboard("{Enter}");
      expect(onClick).toHaveBeenCalledTimes(1);
      
      await user.keyboard(" ");
      expect(onClick).toHaveBeenCalledTimes(2);
    });
  });

  describe("buttonVariants utility", () => {
    it("generates correct default classes", () => {
      const classes = buttonVariants();
      expect(classes).toContain("bg-primary");
      expect(classes).toContain("text-primary-foreground");
    });

    it("generates correct variant classes", () => {
      expect(buttonVariants({ variant: "destructive" })).toContain("bg-destructive");
      expect(buttonVariants({ variant: "outline" })).toContain("border-input");
      expect(buttonVariants({ variant: "ghost" })).toContain("hover:bg-accent");
    });

    it("generates correct size classes", () => {
      expect(buttonVariants({ size: "sm" })).toContain("h-9");
      expect(buttonVariants({ size: "lg" })).toContain("h-11");
      expect(buttonVariants({ size: "icon" })).toContain("h-10");
    });

    it("combines variant and size classes", () => {
      const classes = buttonVariants({ variant: "outline", size: "sm" });
      expect(classes).toContain("border-input");
      expect(classes).toContain("h-9");
    });
  });

  describe("HTML attributes", () => {
    it("forwards all HTML button attributes", () => {
      render(
        <Button
          type="submit"
          form="test-form"
          name="test-button"
          value="test-value"
          data-testid="test-button"
        >
          Submit
        </Button>
      );
      
      const button = screen.getByRole("button");
      expect(button).toHaveAttribute("type", "submit");
      expect(button).toHaveAttribute("form", "test-form");
      expect(button).toHaveAttribute("name", "test-button");
      expect(button).toHaveAttribute("value", "test-value");
      expect(button).toHaveAttribute("data-testid", "test-button");
    });
  });
});
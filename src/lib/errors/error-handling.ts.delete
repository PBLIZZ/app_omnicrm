# Error Handling File Eliminated

This file contained error handling abstractions that have been eliminated in favor of direct patterns.

## Functions that were replaced:

### shouldRetry()
```typescript
// ❌ Old pattern
import { shouldRetry } from "@/lib/errors/error-handling";

// ✅ Direct pattern (copy this into each hook that needs it)
const shouldRetry = (error: unknown, retryCount: number): boolean => {
  // Don't retry auth errors (401, 403)
  if (error instanceof Error && error.message.includes("401")) return false;
  if (error instanceof Error && error.message.includes("403")) return false;

  // Retry network errors up to 3 times
  if (error instanceof Error && (error.message.includes("fetch") || error.message.includes("network"))) {
    return retryCount < 3;
  }

  // Retry other errors up to 2 times
  return retryCount < 2;
};
```

### createErrorHandler()
```typescript
// ❌ Old pattern
import { createErrorHandler } from "@/lib/errors/error-handling";

// ✅ Direct pattern
const createErrorHandler = (context: string) => (error: unknown) => {
  const message = error instanceof Error ? error.message : "An unknown error occurred";
  toast.error(`${context} Failed`, { description: message });

  // Log for debugging (development only)
  if (process.env.NODE_ENV === "development") {
    console.error(`[${context}] Error:`, error);
  }
};
```

### showSyncSuccessToast()
```typescript
// ❌ Old pattern
import { showSyncSuccessToast } from "@/lib/errors/error-handling";

// ✅ Direct pattern
const showSyncSuccessToast = (service: string, details?: { count?: number; duration?: string }) => {
  const title = `${service} Sync Complete`;
  let description = `${service} data has been synchronized successfully.`;

  if (details?.count !== undefined) {
    description = `${details.count} ${service.toLowerCase()} items synchronized successfully.`;
  }

  if (details?.duration) {
    description += ` (${details.duration})`;
  }

  toast.success(title, { description });
};
```

## Files updated:
- All hooks now use direct error handling patterns
- Server services use direct error classification
- Removed abstractions for better maintainability

Date: 2025-01-22
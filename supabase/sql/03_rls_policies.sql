-- =========================
-- 03_rls_policies.sql
-- Enable RLS and apply per-table policies.
-- Model: single-user accounts; every row is tenant-scoped via user_id.
-- Read-only: embeddings, raw_events, ai_insights (writes only via service role).
-- =========================

-- CONTACTS (owner full CRUD)
alter table public.contacts enable row level security;
drop policy if exists contacts_select_own on public.contacts;
drop policy if exists contacts_insert_own on public.contacts;
drop policy if exists contacts_update_own on public.contacts;
drop policy if exists contacts_delete_own on public.contacts;

create policy contacts_select_own on public.contacts
  for select to authenticated using (user_id = auth.uid());
create policy contacts_insert_own on public.contacts
  for insert to authenticated with check (user_id = auth.uid());
create policy contacts_update_own on public.contacts
  for update to authenticated using (user_id = auth.uid()) with check (user_id = auth.uid());
create policy contacts_delete_own on public.contacts
  for delete to authenticated using (user_id = auth.uid());

-- INTERACTIONS (owner full CRUD)
alter table public.interactions enable row level security;
drop policy if exists interactions_select_own on public.interactions;
drop policy if exists interactions_insert_own on public.interactions;
drop policy if exists interactions_update_own on public.interactions;
drop policy if exists interactions_delete_own on public.interactions;

create policy interactions_select_own on public.interactions
  for select to authenticated using (user_id = auth.uid());
create policy interactions_insert_own on public.interactions
  for insert to authenticated with check (user_id = auth.uid());
create policy interactions_update_own on public.interactions
  for update to authenticated using (user_id = auth.uid()) with check (user_id = auth.uid());
create policy interactions_delete_own on public.interactions
  for delete to authenticated using (user_id = auth.uid());

-- DOCUMENTS (owner full CRUD)
alter table public.documents enable row level security;
drop policy if exists documents_select_own on public.documents;
drop policy if exists documents_insert_own on public.documents;
drop policy if exists documents_update_own on public.documents;
drop policy if exists documents_delete_own on public.documents;

create policy documents_select_own on public.documents
  for select to authenticated using (user_id = auth.uid());
create policy documents_insert_own on public.documents
  for insert to authenticated with check (user_id = auth.uid());
create policy documents_update_own on public.documents
  for update to authenticated using (user_id = auth.uid()) with check (user_id = auth.uid());
create policy documents_delete_own on public.documents
  for delete to authenticated using (user_id = auth.uid());

-- JOBS (owner CRUD â€“ enqueue/update from client if you want; ok to keep)
alter table public.jobs enable row level security;
drop policy if exists jobs_select_own on public.jobs;
drop policy if exists jobs_insert_own on public.jobs;
drop policy if exists jobs_update_own on public.jobs;
drop policy if exists jobs_delete_own on public.jobs;

create policy jobs_select_own on public.jobs
  for select to authenticated using (user_id = auth.uid());
create policy jobs_insert_own on public.jobs
  for insert to authenticated with check (user_id = auth.uid());
create policy jobs_update_own on public.jobs
  for update to authenticated using (user_id = auth.uid()) with check (user_id = auth.uid());
create policy jobs_delete_own on public.jobs
  for delete to authenticated using (user_id = auth.uid());

-- RAW_EVENTS (owner READ-ONLY; writes only via service role)
alter table public.raw_events enable row level security;
drop policy if exists raw_events_select_own on public.raw_events;
drop policy if exists raw_events_insert_own on public.raw_events;
drop policy if exists raw_events_update_own on public.raw_events;
drop policy if exists raw_events_delete_own on public.raw_events;

create policy raw_events_select_own on public.raw_events
  for select to authenticated using (user_id = auth.uid());
-- no insert/update/delete policies here (service role bypasses RLS)

-- EMBEDDINGS (owner READ-ONLY; writes only via service role)
alter table public.embeddings enable row level security;
drop policy if exists embeddings_select_own on public.embeddings;
drop policy if exists embeddings_insert_own on public.embeddings;
drop policy if exists embeddings_update_own on public.embeddings;
drop policy if exists embeddings_delete_own on public.embeddings;

create policy embeddings_select_own on public.embeddings
  for select to authenticated using (user_id = auth.uid());
-- no insert/update/delete policies here

-- AI_INSIGHTS (owner READ-ONLY; generated by AI jobs)
alter table public.ai_insights enable row level security;
drop policy if exists ai_insights_select_own on public.ai_insights;
drop policy if exists ai_insights_insert_own on public.ai_insights;
drop policy if exists ai_insights_update_own on public.ai_insights;
drop policy if exists ai_insights_delete_own on public.ai_insights;

create policy ai_insights_select_own on public.ai_insights
  for select to authenticated using (user_id = auth.uid());
-- no insert/update/delete policies here

-- CHAT: THREADS (owner full CRUD)
alter table public.threads enable row level security;
drop policy if exists threads_select_own on public.threads;
drop policy if exists threads_insert_own on public.threads;
drop policy if exists threads_update_own on public.threads;
drop policy if exists threads_delete_own on public.threads;

create policy threads_select_own on public.threads
  for select to authenticated using (user_id = auth.uid());
create policy threads_insert_own on public.threads
  for insert to authenticated with check (user_id = auth.uid());
create policy threads_update_own on public.threads
  for update to authenticated using (user_id = auth.uid()) with check (user_id = auth.uid());
create policy threads_delete_own on public.threads
  for delete to authenticated using (user_id = auth.uid());

-- CHAT: MESSAGES (owner full CRUD)
alter table public.messages enable row level security;
drop policy if exists messages_select_own on public.messages;
drop policy if exists messages_insert_own on public.messages;
drop policy if exists messages_update_own on public.messages;
drop policy if exists messages_delete_own on public.messages;

create policy messages_select_own on public.messages
  for select to authenticated using (user_id = auth.uid());
create policy messages_insert_own on public.messages
  for insert to authenticated with check (user_id = auth.uid());
create policy messages_update_own on public.messages
  for update to authenticated using (user_id = auth.uid()) with check (user_id = auth.uid());
create policy messages_delete_own on public.messages
  for delete to authenticated using (user_id = auth.uid());

-- CHAT: TOOL_INVOCATIONS (owner full CRUD)
alter table public.tool_invocations enable row level security;
drop policy if exists toolinv_select_own on public.tool_invocations;
drop policy if exists toolinv_insert_own on public.tool_invocations;
drop policy if exists toolinv_update_own on public.tool_invocations;
drop policy if exists toolinv_delete_own on public.tool_invocations;

create policy toolinv_select_own on public.tool_invocations
  for select to authenticated using (user_id = auth.uid());
create policy toolinv_insert_own on public.tool_invocations
  for insert to authenticated with check (user_id = auth.uid());
create policy toolinv_update_own on public.tool_invocations
  for update to authenticated using (user_id = auth.uid()) with check (user_id = auth.uid());
create policy toolinv_delete_own on public.tool_invocations
  for delete to authenticated using (user_id = auth.uid());
